<style type="text/css">
	body{
		background:#5e85c0 !important;
		fontSize:12px;
		height:100%;
	}
	span.phoneRegist{
		color:#FFFFFF;
		font-size:18px;
		font-weight:bold;
	}
	span.phoneAdvice{
		color:#FFFFFF;
		font-size:14px;
		font-weight:bold;
	}
	a.phoneAdvice{
		color:#184283;
		font-weight:bold;
		font-size:14px;
		margin-left:28px;
		text-decoration:none;
	}
	input.resendBtn{
		background:#5e85c0;
		border-radius:5px;
		border:1px solid #184283;
		color:#184283;
		cursor:pointer;
		height:25px;
		font-size:12px;;
		margin-left:5px;
		vertical-align:middle;
		width:92px;
	}
	label.agreeAndRead{
		color:#FFFFFF;
		font-size:12px;
		margin-left:5px;
		line-height:30px;
		vertical-align:middle;
	}
	a.cloudRegistProtocalA{
		color:#FFFFFF;
		font-size:12px;
		vertical-align:middle;
	}
	li.textConE1 label{
		color:#FFFFFF;
		font-size:12px;
		line-height:36px;
		vertical-align:middle;
		margin-left:5px;
	}
	input.returnBtn{
		background:#335C9C;
		border-radius:3px;
		border:none;
		color:#FFFFFF;
		cursor:pointer;
		height:25px;
		position:absolute;
		top:0px;
		right:15px;
		width:60px;
	}
	#cloudRgProtocalCon{
		position:relative;
		z-index:1012;
		width:715px;
		margin:0px auto;
		height:0px;
		line-height:0px;
		font-size:0px;
		visibility:hidden;
		top:-9999px;
	}
	div.cloudRgProtocal{
		background:#FFFFFF;
		font-size:12px;
		line-height:normal;
		height:485px;
		position:absolute;
		top:90px;
		margin:0 auto;
		width:715px;
	}
	p.cloudRgProtocalTitle{
		height:35px;
		background:#5E85C0;
	}
	p.cloudRgProtocalTitle span{
		color:#FFFFFF;
		line-height:35px;
		margin-left:20px;
	}
	p.cloudRgProtocalTitle i{
		background:url(../web-static/images/routerBg.png) -422px -108px no-repeat;
		cursor:pointer;
		float:right;
		height:20px;
		width:20px;
		margin:7px 7px 0 0;
	}
	div.cloudRgDetialCon{
		color:#3C3E43;
		padding:0px 30px;
		margin:30px 10px 0;
		height:375px;
		overflow:hidden;
		text-align:center;
	}
	div.cloudRgDetialCon h1{
		font-size:24px;
		line-height:24px;
		margin-bottom:40px;
	}
	#cloudRgDetial{
		font-size:12px;
		text-align:left;
	}
	label.proName{
		right:16px;
		font-size:12px;
		color:#FFFFFF;
		margin-top:18px;
		margin-left:20px;
		text-align:left;
		position:absolute;
	}
</style>
<script type="text/javascript">
	function gCloudAccountRegstErrHandle(errNo, objOrId)
	{
		var showStr = "";
		var cloudErrRel;

		switch (parseInt(errNo))
		{
		case ENONE:
			gCloudAccountBR["success"] = true;
			gCloudAccountBR["noteF"] = label.cloudAccountBindSuccess;
			return true;
		case EINVACCOUNTREGISTED:
			showStr = appendErrCode(label.cloudAcccountRegisted, errNo);
			break;
		case EINVACCOUNTNOTEXIST:
			showStr = appendErrCode(errStr.invCloudAccountNotExist, errNo);
			break;
		case EINVPASSWORDFMT:
		case EINVACCOUNTPWDFMT:
			showStr = appendErrCode(errStr.pwdInvalid, errNo);
			break;
		case EINVACCOUNTPWDERR:
			showStr = appendErrCode(label.passwdErr, errNo);
			break;
		case EINVCLOUDUSRCOUNTFORMAT:
		case EINVACCOUNTEMAILFMT:
		case EINVACCOUNTPHONENUMFMT:
			showStr = appendErrCode(errStr.invCloudAccountFmtErr, errNo);
			break;
		case EINVACCOUNTRESETPWDCAPTCHAERR:
		case EINVVERICODEFORMAT:
			showStr = appendErrCode(errStr.CAPTCHAErrorTip, errNo);
			break;
		case EINVCLOUDERRORCAPTCHAINVAL:
			showStr = appendErrCode(errStr.invCloudCAPTCHAInval, errNo);
			break;
		default:
			cloudErrRel = cloudErrHandle(errNo);
			if (cloudErrRel.result == false)
			{
				showStr = cloudErrRel.tip;
			}
			else
			{
				showStr = appendErrCode(errStr.invRequestFail, errNo);
			}
			break;
		}

		gCloudAccountBR["success"] = false;
		showAlert(showStr, objOrId);
		return false;
	}

	function gCloudAccountBRHd(callBack, timeoutCallBack, closeHandle)
	{
		showLoading(label.cloudAccoundRegistWaiting, closeHandle, undefined, false);
		cloudAccountRegist(gCloudAccountBR["account"], gCloudAccountBR["accountType"], gCloudAccountBR["pwd"], gCloudAccountBR["CAPTCHAR"], function(code){
			closeLoading();
			if (true == gCloudAccountRegstErrHandle(code))
			{
				typeof callBack == "function" && callBack();
			}
		}, function(){
			gCloudAccountBR["success"] = false;
			gCloudAccountBR["noteF"] = label.cloudAccountRegistFail;
			gCloudAccountBR["noteS"] = label.cloudServerNoRespCheckNetwork;
			typeof timeoutCallBack == "function" && timeoutCallBack();
		});
	}

	function gCloudAccountBindErrHandle(errNo, objOrId)
	{
		var showStr = "";
		var cloudErrRel;

		switch (parseInt(errNo))
		{
		case ENONE:
			gCloudAccountBR["success"] = true;
			gCloudAccountBR["noteF"] = label.cloudAccountBindSuccess;
			return true;
		case EINVACCOUNTBINDED:
		case EINDEVICEALREADYBOUND:
            showStr = label.cloudAccountBindFailAndCallSupport;
            break;
		case EINVDEVICEIDNOTEXIST:
		case EINVERRORDEVICEIDFORMATERROR:
			showStr = label.cloudDeviceInfoExpt;
			break;
		case EINVACCOUNTNOTEXIST:
			showStr = appendErrCode(errStr.invCloudAccountNotExist, errNo);
			break;
		case EINVACCOUNTPWDERR:
			showStr = appendErrCode(errStr.invCloudOldPwdErr, errNo);
			break;
		case EINVACCOUNTPHONENUMFMT:
			showStr = appendErrCode(errStr.invCloudAccountFmtErr, errNo);
			break;
		default:
			cloudErrRel = cloudErrHandle(errNo);
			if (cloudErrRel.result == false)
			{
				showStr = cloudErrRel.tip;
			}
			else
			{
				showStr = appendErrCode(errStr.invRequestFail, errNo);
			}
			break;
		}

		gCloudAccountBR["success"] = false;
		showAlert(showStr, objOrId);
		return false;
	}

	function gCloudAccountBindHd(callBack, timeoutCallBack, closeHandle)
	{
		showLoading(label.cloudAccoundBindWaiting, closeHandle, undefined, false);
		cloudAccountBind(gCloudAccountBR["account"], gCloudAccountBR["pwd"], function(code){
			closeLoading();
			if (true == gCloudAccountBindErrHandle(parseInt(code)))
			{
				gCloudAccountBR["success"] = true;
				gCloudAccountBR["noteF"] = label.cloudAccountBindSuccess;
				gCloudAccountBR["noteS"] = label.cloudServerNoRespCheckNetwork;
				typeof callBack == "function" && callBack();
			}
		}, function(){
			gCloudAccountBR["success"] = false;
			gCloudAccountBR["noteF"] = label.cloudAccountBindFail;
			gCloudAccountBR["noteS"] = label.cloudServerNoRespCheckNetwork;
			typeof timeoutCallBack == "function" && timeoutCallBack();
		});
	}

	function cloudRegistBindLoadPage()
	{
		loadPage("CloudBindRegistResult.htm", "cloudMgtDetial", undefined, {bClearPageTickArray:false});
	}

	function cloudRegistSubHd(checkSub)
	{
		if (true == checkSub())
		{
			gCloudAccountBRHd(function(){
				/* 创建成功则登录 */
				$.setTimeout(function(){
					gCloudAccountBindHd(cloudRegistBindLoadPage, cloudRegistBindLoadPage, cloudAccountQueryStop);
				}, 10);
			}, cloudRegistBindLoadPage, cloudAccountQueryStop);
		}
	}

	function init()
	{
		var account = id("cloudAccount");
		var cloudPwd = id("cloudPwd");
		var cloudConfPwd = id("cloudConfPwd");
		var adminPwdBox = id("adminPwd");
		var INLINE_BLOCK = ((isIESix || isIESeven) ? "inline":"inline-block");
		var lgPwdNote = id("lgPwdNote");
		var lgPwdConfNote = id("lgPwdConfNote");
		var lgPwdNoteLess = id("lgPwdNoteLess");
		var lgAgreeNote = id("lgAgreeNote");
		var lgPwdNoteInvalidChar = id("lgPwdNoteInvalidChar");
		var pwdDep = id("pwdDep");
		var chgPwdDep = id("chgPwdDep");
		var CAPTCHAGet = id("CAPTCHAGet");
		var resend = id("resend");
		var CAPTCHASendTip = id("CAPTCHASendTip");
		var cloudRegistSub = id("cloudRegistSub");
		var phoneAdvice = $("a.phoneAdvice");
		var emailRegistTitle = id("emailRegistTitle");
		var phoneRegistTitle = id("phoneRegistTitle");
		var cloudAccountLbl = id("cloudAccountLbl");
		var returnBtn = id("return");
		var agree = id("agree");
		var pwdDepI = id("pwdDepI");
		var WAITING_CLOUD_RESPONSE_CAPTCHA = 2000;
		var CAPTCHA_TIME = 1000;
		var CAPTCHA_MAX_TIME = 120;
		var ACCOUNT_TYPE_EMAIL = uciCloudConfig.optValue.accountTypeEmail;
		var ACCOUNT_TYPE_PHONE = uciCloudConfig.optValue.accountTypePhoneNum;
		var accountType = ACCOUNT_TYPE_PHONE;
		var data = {};
		var bGettingCAPTCHA = false;

		id("productName").innerHTML = label.productName + proName;

		function errHandle(errNo, objOrId)
		{
			var showStr = "";

			switch (parseInt(errNo))
			{
			case ENONE:
				return true;
			case EINVERICODEEMPTY:
				objOrId = "CAPTCHA";
				showStr = errStr.invVericodeNULL;
				break;
			case EINVACCOUNTRESETPWDCAPTCHAERR:
			case EINVVERICODEFORMAT:
				objOrId = "CAPTCHA";
				showStr = appendErrCode(errStr.CAPTCHAErrorTip, errNo);
				break;
			case EINVCLOUDUSRCOUNTFORMAT:
			case EINVACCOUNTEMAILFMT:
			case EINVACCOUNTPHONENUMFMT:
				objOrId = account;
				showStr = appendErrCode(errStr.invCloudAccountFmtErr, errNo);
				break;
			case EINVACCOUNTREGISTED:
				objOrId = account;
				showStr = appendErrCode(label.cloudAcccountRegisted, errNo);
				break;
			case EINVACCOUNTTYPEERR:
				objOrId = account;
				showStr = appendErrCode(errStr.invCloudAccountType, errNo);
				break;
			case EINVDEVICELOCKED:
				showStr = appendErrCode(errStr.invCloudDeviceLocked, errNo);
				break;
			case EINVCLOUDERRORCAPTCHAINVAL:
				showStr = appendErrCode(errStr.invCloudCAPTCHAInval, errNo);
				break;
			default:
				cloudErrRel = cloudErrHandle(errNo);
				if (cloudErrRel.result == false)
				{
					showStr = cloudErrRel.tip;
				}
				else
				{
					showStr = errStr.invRequestFail;
				}
				break;
			}

			showAlert(showStr, objOrId);
			return false;
		}

		function chkPswVal(szValue)
		{
			return (/^[\x21-\x7e]+$/.test(szValue));
		}
		function pwdConfFocus()
		{
			lgPwdNote.style.visibility = "hidden";
		}
		function pwdFocus()
		{
			lgPwdConfNote.style.visibility = "hidden";
		}
		function pwdConfCheck()
		{
			pwdConfFocus();

			if (cloudConfPwd.value == cloudPwd.value)
			{
				lgPwdConfNote.style.visibility = "hidden";
				return true;
			}
			else
			{
				lgPwdConfNote.style.visibility = "visible";
				return false;
			}
		}
		function pwdBlur()
		{
			var len = cloudPwd.value.length;

			if (len >= 0 && len < 6)
			{
				$("#lgPwdNoteLess").css("display", INLINE_BLOCK).css("visibility", "visible");
			}
		}
		function pwdCheckMixChars(str)
		{
			var hasNum = false;
			var hasLetter = false;
			var hasSymbol = false;

			hasNum = /\d/g.test(str);
			hasLetter = /[a-zA-Z]/g.test(str);
			hasSymbol = /[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]/g.test(str);

			return hasNum&&hasSymbol&&hasLetter;
		}
		function pwdCheck()
		{
			var width = 24, tip = "";
			var lgPwdlessTip = INLINE_BLOCK;
			var lgPwdValTip = INLINE_BLOCK;
			var pwdValue = cloudPwd.value;
			var len = pwdValue.length;
			var lgPwdNoteVi = "visible";
			var result = true;
			var iClass = "warn";

			if (len >= 0 && len < 6)
			{
				result = false;
				lgPwdValTip = "none";
				$("#lgPwdNoteLess").css("display", INLINE_BLOCK).css("visibility", "visible");
			}
			else if(!chkPswVal(pwdValue))
			{
				lgPwdlessTip = "none";
				result = false;
			}
			else if (len > 32)
			{
				lgPwdlessTip = "none";
				lgPwdValTip = "none";
				result = false;
			}
			else
			{
				lgPwdlessTip = "none";
				lgPwdValTip = "none";
			}

			if ("none" != lgPwdlessTip || "none" != lgPwdValTip)
			{
				lgPwdNoteVi = "hidden";
			}
			else if (/^\d+$/.test(pwdValue) ||
					/^[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]+$/.test(pwdValue) ||
					/^[a-zA-Z]+$/.test(pwdValue))
			{
				if (len <= 10)
				{
					tip = label.weak;
					width = width;
				}
				else
				{
					tip = label.media;
					width = width*2;
				}
			}
			else if (true == pwdCheckMixChars(pwdValue))
			{
				tip = label.strong;
				width = width*3;
				iClass = "correct";
			}
			else
			{
				if (len <= 10)
				{
					tip = label.media;
					width = width*2;
				}
				else
				{
					tip = label.strong;
					width = width*3;
					iClass = "correct";
				}
			}

			lgPwdNote.style.visibility = lgPwdNoteVi;
			lgPwdNoteLess.style.display = lgPwdlessTip;
			lgPwdNoteInvalidChar.style.display = lgPwdValTip;
			pwdDep.innerHTML = tip;
			chgPwdDep.style.width = width + "px";
			pwdDepI.className = iClass;

			return result;
		}
		function checkAccount()
		{
			var accountVal = account.value;

			if (ACCOUNT_TYPE_PHONE == accountType)
			{
				if (0 == accountVal.length)
				{
					showNoteB("cloudAccountNote", label.cloudAccountPhoneMumNull);
					return false;
				}

				if (false == checkNum(accountVal))
				{
					showNoteB("cloudAccountNote", label.cloudAccountPhoneNumFmtErr, "twoLine");
					return false;
				}
				else if (false == checkPhoneNum(accountVal))
				{
					showNoteB("cloudAccountNote", label.cloudAccountPhoneNumFmtErr, "twoLine");
					return false;
				}
				else
				{
					closeNote("cloudAccountNote");
					return true;
				}
			}
			else
			{
				if (0 == accountVal.length)
				{
					showNoteB("cloudAccountNote", label.cloudAccountEmailNull);
					return false;
				}
				else if (64 < accountVal.length)
				{
					showNoteB("cloudAccountNote", errStr.invMailLen);
					return false;
				}

				if (false == checkEmail(accountVal))
				{
					showNoteB("cloudAccountNote", label.cloudAccountEmailFmtErr);
					return false;
				}
				else
				{
					closeNote("cloudAccountNote");
					return true;
				}
			}
		}
		function checkSub()
		{
			var accountVal = account.value;
			var pwdValue = cloudPwd.value;
			var CAPTCHAVal = id("CAPTCHA").value;

			/* 检查账号信息 */
			if (false == checkAccount())
			{
				return false;
			}

			/* 检查密码 */
			if (false == pwdCheck() || false == pwdConfCheck())
			{
				return false;
			}
			else
			{
				gCloudAccountBR["pwd"] = pwdValue;
			}

			/* 检查验证码 */
			if (0 == CAPTCHAVal.length)
			{
				errHandle(EINVERICODEEMPTY);
				return false;
			}

			gCloudAccountBR["account"] = accountVal;
			gCloudAccountBR["CAPTCHAR"] = CAPTCHAVal;
			gCloudAccountBR["accountType"] = accountType;

			return true;
		}

		/* 获取验证码 */
		function getCAPTCHA()
		{
			var captchaHd;
			var accountVal = account.value;
			var emailAddr = null;

			if (true == bGettingCAPTCHA)
			{
				return;
			}

			if (true == checkAccount())
			{
				bGettingCAPTCHA = true;
				captchaHd = $.setTimeout(function(){
					showLoading(label.cloudServerWaitingResp, function(){
						bGettingCAPTCHA = false;
						cloudAccountQueryStop();
					}, undefined, false);
				}, WAITING_CLOUD_RESPONSE_CAPTCHA);

				cloudAccountGetRegistAC(accountVal, accountType, function(code){
					closeLoading();
					clearTimeout(captchaHd);

					if (true == errHandle(code))
					{
						showCAPTCHABtn(CAPTCHA_MAX_TIME);
						CAPTCHASendTip.style.display = "block";
						if (ACCOUNT_TYPE_EMAIL == accountType)
						{
							if (null != (emailAddr = emailLinkCheck(accountVal)))
							{
								CAPTCHASendTip.innerHTML = label.CAPTCHASentEmainTip +
									"<a href='" + emailAddr + "' target='blank'>" + label.CAPTCHASentEmainTipS + "</a>";
							}
							else
							{
								CAPTCHASendTip.innerHTML = label.CAPTCHASentEmainTip + label.CAPTCHASentEmainTipS;
							}
						}
						else
						{
							CAPTCHASendTip.innerHTML = label.CAPTCHASentPhTip;
						}
					}

					bGettingCAPTCHA = false;
				}, function(){
					clearTimeout(captchaHd);
					bGettingCAPTCHA = false;
				});
			}
			else
			{
				bGettingCAPTCHA = false;
			}
		}

		/* 设置验证码剩余的时间 */
		function showCAPTCHABtn(time)
		{
			time = parseInt(time);

			if (time <= 0)
			{
				CAPTCHAGet.style.display = "inline";
				resend.style.display = "none";
				resend.time = -1;
			}
			else
			{
				CAPTCHAGet.style.display = "none";
				resend.value = btn.resend + "(" + time + ")";
				resend.time = --time;
				resend.style.display = "inline";
			}
		}

		/* 验证码剩余的时间的守护函数 */
		function CAPTCHATime()
		{
			if (resend.style.display != "none")
			{
				showCAPTCHABtn(resend.time);
			}

			$.setTimeout(arguments.callee, CAPTCHA_TIME);
		}

		function changeRegistType(type)
		{
			closeNote("cloudAccountNote");
			accountType = type;
			if (ACCOUNT_TYPE_PHONE == type)
			{
				cloudAccountLbl.innerHTML = label.phoneNum;
				phoneRegistTitle.style.display = "block";
				emailRegistTitle.style.display = "none";
			}
			else
			{
				cloudAccountLbl.innerHTML = label.emailBox;
				phoneRegistTitle.style.display = "none";
				emailRegistTitle.style.display = "block";
			}
		}

		cloudPageSetNodes(true);
		CAPTCHAGet.onclick = getCAPTCHA;
		CAPTCHATime();

		data[cloudClientStatus.fileName] = {};
		data[cloudClientStatus.fileName][KEY_NAME] = cloudClientStatus.secName.regVeriCodeTimer;

		$.query(data, function(result){
			if (errHandle(result[ERR_CODE]))
			{
				var regTimerObj = result[cloudClientStatus.fileName][cloudClientStatus.secName.regVeriCodeTimer];

				showCAPTCHABtn(parseInt(regTimerObj[cloudClientStatus.optName.regVeriCodeTimer]));
			}
		});

		phoneAdvice[0].onclick = function(){
			changeRegistType(ACCOUNT_TYPE_PHONE);
		};
		phoneAdvice[1].onclick = function(){
			changeRegistType(uciCloudConfig.optValue.accountTypeEmail);
		};
		agree.checked = true;
		agree.onclick = function(){
			if (true == this.checked)
			{
				lgAgreeNote.style.visibility = "hidden";
			}
			else
			{
				lgAgreeNote.style.visibility = "visible";
			}
		};
		cloudRegistSub.onclick = function(){
			if (false == agree.checked)
			{
				lgAgreeNote.style.visibility = "visible";
			}
			else
			{
				cloudRegistSubHd(checkSub);
			}
		};

		id("softVersionCloud").innerHTML += (gCloudAccountBR["softVersion"].split(" "))[0];
		returnBtn.onclick = function(){
			cloudGoBackBR({binded:false});
		};
		if (true == gCloudAccountBR["bFWzd"])
		{
			returnBtn.value = "{%btn.skip%}>";
		}
		else
		{
			returnBtn.value = "{%btn.backWzd%}>";
		}

		account.onblur = checkAccount;
		cloudConfPwd.onkeyup = pwdConfCheck;
		cloudConfPwd.onfocus = pwdConfFocus;
		cloudConfPwd.onblur = pwdConfCheck;
		cloudPwd.onkeyup = pwdCheck;
		cloudPwd.onblur = pwdBlur;
		cloudPwd.onfocus = pwdFocus;
		lgPwdNoteInvalidChar.style.visibility = "visible";
		lgPwdNoteInvalidChar.style.display = "none";
	}
	init();
</script>
<div class="cloudAccountLogo">
	<label class="proName" id="productName">{%label.productName%}</label>
</div>
<div class="cloudManageCon">
	<div id="cloudMgtDetial" class="cloudMgtDetial">
		<p class="title">
			<span class="title">{%label.cloudAccountCreate%}</span>
		</p>
		<input id="return" class="returnBtn" type="button" />
		<ul id="emailRegistTitle" class="gridLine gridLineD disNone">
			<label class="desLblB"></label>
			<span class="phoneRegist">{%label.emailRegist%}</span>
			<a class="phoneAdvice" href="javascript:void(0);">{%label.phoneRegist%}></a>
		</ul>
		<ul id="phoneRegistTitle" class="gridLine gridLineD">
			<label class="desLblB"></label>
			<span class="phoneRegist">{%label.phoneRegist%}</span>
			<a class="phoneAdvice" href="javascript:void(0);">{%label.emailRegist%}></a>
		</ul>
		<ul class="gridLine gridLineD mpPhoneRgt20">
			<label id="cloudAccountLbl" class="desLblB" for="cloudAccount">{%label.phoneNum%}</label>
			<li class="textConE textCon"><input id="cloudAccount" class="textC text imeModeN" maxLength="64" /></li>
			<li id="cloudAccountNote" class="note">
				<i class="tip"></i>
				<span class="note"></span>
			</li>
		</ul>
		<ul class="gridLine gridLineD">
			<label class="desLblB" for="cloudPwd">{%label.loginSetPwd%}</label>
			<li class="textConE textCon"><input id="cloudPwd" class="textC text imeModeN" type="password" maxLength="32" /></li>
			<li id="lgPwdNoteLess" class="note">
				<i class="error"></i>
				<div class="noteCon">
					<p >{%label.chgPwdLess%}</p>
				</div>
			</li>
			<li id="lgPwdNoteInvalidChar" class="note">
				<i class="error"></i>
				<div class="noteCon">
					<p >{%errStr.pwdCharValid%}</p>
				</div>
			</li>
			<li id="lgPwdNote" class="note">
				<i class="warn" id="pwdDepI"></i>
				<div class="noteCon">
					<p class="twoLine pwdDepC">{%label.chgPwdDep%}{%label.colon%}<label id="pwdDep">{%label.weak%}</label></p>
					<div class="pwdDepL"><label id="chgPwdDep"></label></div>
				</div>
			</li>
		</ul>
		<p class="inputTip">{%label.chgPwdChar%}</p>
		<ul class="gridLine gridLineD">
			<label class="desLblB" for="cloudConfPwd">{%label.loginPwdConf%}</label>
			<li class="textConE textCon"><input id="cloudConfPwd" type="password" class="textC text imeModeN" maxLength="32" /></li>
			<li id="lgPwdConfNote" class="note">
				<i class="error"></i>
				<div class="noteCon">
					<p class="chgPwdDif">{%label.chgPwdDif%}</p>
				</div>
			</li>
		</ul>
		<ul class="gridLine gridLineD">
			<label class="desLblB" for="CAPTCHA">{%label.loginCAPTCHA%}</label>
			<li class="textConB5 textCon"><input id="CAPTCHA" class="textC textC1 text imeModeN"  maxLength="6" /></li>
			<input id="resend" type="button" value="{%btn.resend%}" disabled="true" class="resendBtn disNone" />
			<input id="CAPTCHAGet" type="button" value="{%btn.CAPTCHAGet%}" class="subBtn btnA btnA1 disNone" />
		</ul>
		<p id="CAPTCHASendTip" class="inputTip disNone">{%label.CAPTCHASentEmainTip%}</p>
		<ul class="gridLine gridLineD mpPhoneRgt15">
			<label class="desLblB"></label>
			<li class="textConE2 textCon">
				<input id="agree" type="checkbox" class="checkbox" />
				<label class="agreeAndRead" for="agree">{%label.agreeAndRead%}</label>
				<a class="cloudRegistProtocalA" href="http://src.tplinkcloud.com.cn/agreement.html" target="_blank">{%label.cloudRegistProtocal%}</a>
			</li>
			<li id="lgAgreeNote" class="note">
				<i class="error"></i>
				<div class="noteCon">
					<p class="chgPwdDif">{%label.agreeAndReadTip%}</p>
				</div>
			</li>
		</ul>
		<input id="cloudRegistSub" type="button" value="{%btn.ok%}" class="subBtn cloudSub" />
	</div>
	<div class="cloudMgtFoot">
		<ul class="footConCloud">
			<li id="softVersionCloud" class="softVersion">{%label.softVersion%}{%label.colon%}</li>
			<li class="netAddrTel"><a href="http://www.tp-link.com.cn" target="_blank">{%label.officalAddr%}</a><label>{%label.surpportTel%}400-8863-400</label></li>
		</ul>
	</div>
	<img src="../web-static/images/cloudF.png" class="cloudBRBgF" />
	<img src="../web-static/images/cloudS.png" class="cloudBRBgS" />
	<img src="../web-static/images/cloudS.png" class="cloudBRBgT" />
</div>
