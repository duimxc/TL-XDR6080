<script type="text/javascript">
	var wzOptions = [{str:label.pppoe, value:WAN_TYPE_PPPOE},
					 {str:label.staticIp, value:WAN_TYPE_STATIC},
					 {str:label.dhcp, value:WAN_TYPE_DHCP}];

	var gNetworkCfg = {};
	var gLanIP, gOldLanIP;
	var gLanMask;
	var gIsLanIpChanged = false;
	var gPbcEnable = 0;
	var gSysMode = 0;
	var gLanIPMode;
	var gWifiCfgToSave = {};
	var gIsWifiDevice = false;
	var bWzdWanTypeDetected = false;
	gIsWifiCfgChged = false;
	gIsWifiCfg2GChged = false;
	gIsWifiCfg5GChged = false;
	gIsWifiCfg5G4Chged = false;
	gIsWifiCfgBsChged = false;

	/* WAN口选择配置 */
	var gWanPortSelCfg, gWanPortSelDescCfg;

	/* WAN口上网类型配置 */
	gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.pppoe;

	/* PPPoE临时配置 */
	gNetworkCfg[uciProto.optValue.proto.pppoe] = {};
	gNetworkCfg[uciProto.optValue.proto.pppoe][uciProto.optName.pppoeUsr] = "";
	gNetworkCfg[uciProto.optValue.proto.pppoe][uciProto.optName.pppoePwd] = "";

	/* 静态IP临时配置 */
	gNetworkCfg[uciProto.optValue.proto.staticIp] = {};
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.ip] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.netmask] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.gateway] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.priDns] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.sndDns] = "";

	/* 自动获取IP临时配置 */
	gNetworkCfg[uciProto.optValue.proto.dynIp] = {};

	/* 页面input元素id和uci配置的映射关系 */
	var keyMap = {};
	keyMap[uciProto.optValue.proto.pppoe] = [{id:"pppoeAccount", uciKey:uciProto.optName.pppoeUsr},
											 {id:"pppoePasswd", uciKey:uciProto.optName.pppoePwd}];
	keyMap[uciProto.optValue.proto.staticIp] = [{id:"ipAddrIn", uciKey:uciProto.optName.ip},
											 {id:"netMaskIn", uciKey:uciProto.optName.netmask},
											 {id:"gatewayIn", uciKey:uciProto.optName.gateway},
											 {id:"dns0In", uciKey:uciProto.optName.priDns},
											 {id:"dns1In", uciKey:uciProto.optName.sndDns}];
	keyMap[uciProto.optValue.proto.dynIp] = [];

	function getWanPortTipsText(currentPort)
	{
		var text = "";
		$.each(wanPortDescList, function(desc, value){
			if (currentPort != value)
			{
				text = text == "" ? desc : "、" + desc;
			}
		});

		return text;
	}

	/* 将上网设置临时配置显示到对应页面 */
	function showNetworkCfg(wanType)
	{
		for (var i = 0; i < keyMap[wanType].length; i++)
		{
			var idStr = keyMap[wanType][i]["id"];
			var uciKeyStr = keyMap[wanType][i]["uciKey"];

			$("#" + idStr).val(gNetworkCfg[wanType][uciKeyStr]);
		}
	}

	/* 将页面的配置生成要保存的接口格式 */
	function saveNetworkCfg(wanType, callBack)
	{
		var cfgToSave = {}, cfgFile = {}, cfgProto = {}, cfgWan = {};

		gNetworkCfg[uciProto.optName.type] = wanType;

		cfgToSave[uciProto.fileName] = cfgFile;
		cfgFile[uciProto.secName.wan] = cfgWan;
		cfgWan[uciProto.optName.type] = wanType

		var cfgSec = uciProto.secName.pppoe;
		switch(wanType)
		{
		case uciProto.optValue.proto.staticIp:
			cfgSec = uciProto.secName.sta;
			break;
		case uciProto.optValue.proto.dynIp:
			cfgSec = uciProto.secName.dhcp;
			break;
		default:
			cfgSec = uciProto.secName.pppoe;
			break;
		}

		cfgFile[cfgSec] = cfgProto;

		for (var i = 0; i < keyMap[wanType].length; i++)
		{
			var idStr = keyMap[wanType][i]["id"];
			var uciKeyStr = keyMap[wanType][i]["uciKey"];

			gNetworkCfg[wanType][uciKeyStr] = id(idStr).value;
			cfgProto[uciKeyStr] = gNetworkCfg[wanType][uciKeyStr];
		}

		if (gSysModeSupport) {
			cfgToSave.system = {"sys_mode":{"mode":uciSystem.optValue.sysMode.routerMode}};
			gSysMode = uciSystem.optValue.sysMode.routerMode;
		}

		/* 保存配置 */
		$.modify(cfgToSave, callBack);
	}

	function wzdWanPortChange(value)
	{
		if (value == gWanPortSelCfg)
		{
			return;
		}

		var data = {}, args = {};;
		data[uciProto.fileName] = {};
		data[uciProto.fileName][uciProto.secName.wan] = args;
		args[uciProto.optName.port] = value;

		showLoading(label.switchWanPortAndWait, null, undefined, false);
		$.modify(data, function(result){
			if (result[ERR_CODE] == ENONE)
			{
				gWanPortSelCfg = value;
				var waitTime = result["wait_time"] || 0;
				waitTime = parseInt(waitTime);

				if (waitTime == 0)
				{
					closeLoading();
					loadPage("WizardNetwork.htm", "wizardCon");
				}
				else
				{
					$.setTimeout(function(){
						closeLoading();
						loadPage("WizardNetwork.htm", "wizardCon");
					}, waitTime * 1000);
				}
			}
			else
			{
				closeLoading();
				id("wanPortSel").changeSel(gWanPortSelCfg);
				$("#wanPortSelected").html(getWanPortTipsText(gWanPortSelCfg));
				showAlert(errStr.systemErr);
			}
		});
	}

	function wzdNetWorkModeChange(value)
	{
		switch(value)
		{
		case WAN_TYPE_STATIC:
		case uciProto.optValue.proto.staticIp:
			gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.staticIp;
			loadPage("WizardStaticIp.htm", "wizardCon");
			break;
		case WAN_TYPE_DHCP:
		case uciProto.optValue.proto.dynIp:
			gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.dynIp;
			loadPage("WizardDynamicIp.htm", "wizardCon");
			break;
		case LINK_TYPE_WIRED_REPEATER:
			loadPage("WizardWiredRepeater.htm", "wizardCon");
			break;
		case LINK_TYPE_WIRELESS_REPEATER:
			loadPage("WizardWirelessRepeater.htm", "wizardCon");
			break;
		case WAN_TYPE_PPPOE:
		case uciProto.optValue.proto.pppoe:
		default:
			gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.pppoe;
			loadPage("WizardPPPoE.htm", "wizardCon");
			break;
		}
	}

	function wzdConSet(styles)
	{
		setStyle(id("wizardCon"), styles);
	}

	function wzdNavSet(step)
	{
		var wzdNavList = $("ul.wzdNav li");
		for (var i = 0; i < wzdNavList.length; i++)
		{
			wzdNavList[i].className = (i == step) ? "select" : "";
		}
	}

	/* 禁用/启用设置向导页面中的sub button */
	function disSubBtn(target, disable, btnStr)
	{
		var input = (typeof target == "object" ? target : id(target));
		var className = input.className;

		if (input.disabled == disable)
		{
			return;
		}

		input.disabled = disable ? true : false;
		input.className = disable ? className.replace("", "subBtnDis") : className.replace("subBtnDis", "");
		input.value = (btnStr != undefined) ? btnStr : input.value;
	}

	/* 在设置向导中显示弹出框 */
	function showWzdConfirm(tipStr, onYesCbk, onNoCbk, btnOkStr, btnNoStr)
	{
		var i, input, p, divFunc;

		var divCon = document.createElement("div");
		divCon.className = "confirmCon";
		document.body.appendChild(divCon);

		var div = document.createElement("div");
		div.className = "confirm";
		divCon.appendChild(div);

		i = document.createElement("i");
		i.className = "confirmLogo";
		div.appendChild(i);

		p = document.createElement("p");
		p.className = "confirmQuestion";
		p.innerHTML = tipStr;
		div.appendChild(p);

		divFunc = document.createElement("div");
		divFunc.className = "confirmFuncCon";
		div.appendChild(divFunc);

		input = document.createElement("input");
		input.className = "subBtn subBtnL";
		input.value = (btnOkStr != undefined) ? btnOkStr : btn.btnY;
		input.type = "button";
		input.onclick = function(){
			hideCover(function(){
				if (typeof onYesCbk != "undefined"){
					onYesCbk();
				}

				document.body.removeChild(divCon);
			});
		};
		divFunc.appendChild(input);

		input = document.createElement("input");
		input.className = "subBtn subBtnR";
		input.value = (btnNoStr != undefined) ? btnNoStr : btn.btnN;
		input.type = "button";
		input.onclick = function(){
			hideCover(function(){
				if (typeof onNoCbk != "undefined"){
					onNoCbk();
				}

				document.body.removeChild(divCon);
			});
		};
		divFunc.appendChild(input);
	}

	function wzdSelectInit(idStr, options, value, callback, maxSize)
	{
		var classObj = {
			className:"wzdSelOptsUl",
			colorN:"#FFFFFF",
			colorC:"#FFEA55",
			fontColorN:"#3C3E43",
			fontColorC:"#3C3E43",
			valueColor:"#FFFFFF",
			valueDisColor:"#9EBE1D"
		};

		selectInit(idStr, options, value, callback, maxSize, classObj);
	}

	function wzdDone()
	{
		var data = {};

		data[uciSystem.fileName] = {};
		data[uciSystem.fileName][uciSystem.secName.sys] = {};
		data[uciSystem.fileName][uciSystem.secName.sys][uciSystem.optName.isFactory] = uciSystem.optValue.isFactory.no;
		$.modify(data);
	}

	function init()
	{
		var uciFile = uciProto.fileName;
		var uciWan = uciProto.secName.wan;
		var uciStatic = uciProto.secName.sta;
		var uciPppoe = uciProto.secName.pppoe;
		var uciDynIp = uciProto.secName.dhcp;

		id("pName").innerHTML = label.productName + proName;

		function wzdStop()
		{
			wzdDone();
			if(gBeInCNA == "NO")
			{
				loadBasic(NET_STATE_INDEX);
			}
			else
			{
				loadPage("WizardIPadSuccess.htm", "wizardCon");
			}
		}

		function initWanCfg(result)
		{
			if (ENONE == result[ERR_CODE])
			{
				var info = result[uciDeviceInfo.fileName][uciDeviceInfo.secName.info];
				var version = (info[uciDeviceInfo.optName.swVer].split(" "))[0];

				gNetworkCfg[uciProto.optName.type] = result[uciFile][uciWan][uciProto.optName.type];
				gNetworkCfg[uciProto.optValue.proto.pppoe] = result[uciFile][uciPppoe];
				gNetworkCfg[uciProto.optValue.proto.staticIp] = result[uciFile][uciStatic];
				gNetworkCfg[uciProto.optValue.proto.dynIp] = result[uciFile][uciDynIp];
				gNetworkCfg["lanIp"] = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ip];
				gOldLanIP = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ip];
				gLanIPMode = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ipMode];
				gLanIP = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ip];
				if (gSupportWanPortSwap)
				{
					gWanPortSelCfg = result[uciFile][uciWan][uciProto.optName.port];
				}

				id("softVersionWzd").innerHTML += version;
				gCloudAccountBR["softVersion"] = info[uciDeviceInfo.optName.swVer];
			}
		}

		function getWanCfg()
		{
			var data = {};

			data[uciFile] = {};
			data[uciFile][KEY_NAME] = [uciWan, uciStatic, uciPppoe, uciDynIp];
			data[uciDeviceInfo.fileName] = {};
			data[uciDeviceInfo.fileName][KEY_NAME] = uciDeviceInfo.secName.info;
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = uciNetwork.secName.lan;

			$.query(data, initWanCfg);
		}

		function getMeshCfg() {
			var data = {"mesh":{"name":"config"}};
			$.query(data, function(result) {
				if (ENONE == result[ERR_CODE]) {
					gPbcEnable = result.mesh.config.pbc_enable;
				}
			});
		}

		/* 设置“跳过向导”的显示 */
		$("#skipWzd").css("display", "inline-block");

		try
		{
			getWanCfg();
			if (gMeshSupport) {
				getMeshCfg();
			}
		}catch(ex){}

		$("#skipWzd").bind("click", wzdStop);
		loadPage("WizardNetwork.htm", "wizardCon");
	}
	init();
</script>
<style type="text/css">
	body{
		background-color:#248AB3;
	}
	label.proName{
		font-size:12px;
		color:#FFFFFF;
		top:20px;
		right:10px;
		position:absolute;
	}
	ul.wanSel{
		margin-bottom:0px !important;
	}
	ul.wanSelTips{
		margin-top:10px;
		margin-bottom:0px;
		height:14px;
		line-height:14px;
	}
	ul.wanSelTips li{
		height:14px;
		line-height:14px;
	}
	ul.wanSelTips li span{
		font-size:14px;
		color:#FFF;
	}
	div.internetStateCon {
		text-align: center;
		margin-bottom: 40px;
	}
	div.internetStateCon div.lineCon {
		display: inline-block;
		height: 64px;
		vertical-align: bottom;
		position: relative;
		margin: 0 6px;
	}
	div.internetStateCon div.lineCon span.dot {
		background-color: #FFF;
		width: 4px;
		height: 4px;
		display: inline-block;
		border-radius: 50%;
		vertical-align: middle;
		margin-top: 12px;
	}
	div.internetStateCon div.lineCon span.line {
		height: 1px;
		width: 70px;
		display: inline-block;
		background-color: #FFFFFF;
		vertical-align: middle;
		margin-top: 12px;
	}
	div.internetStateCon div.lineCon label {
		display: block;
		font-size: 12px;
		color: #FFF;
		margin-top: 10px;
	}
	div.internetStateCon div.lineCon i.connect {
		background:url(../web-static/images/netConnect.png) no-repeat;
		height:20px;
		width:20px;
		left:29px;
		position:absolute;
		top:6px;
		display: none;
	}
	div.internetStateCon div.lineCon i.disConnect {
		background:url(../web-static/images/netDisconnect.png) no-repeat;;
		height:20px;
		width:20px;
		left:29px;
		position:absolute;
		top:6px;
		display: none;
	}
	div.tipsCon {
		color: #FFF;
		font-size: 13px;
		margin-bottom: 40px;
	}
	div.dividingLineCon {
		text-align: center;
		margin-top: 24px;
	}
	div.dividingLineCon span.dividingLine {
		width: 222px;
		display: inline-block;
		border-bottom: 1px solid #248AB3;
		vertical-align: middle;
	}
	div.dividingLineCon span.title {
		font-size: 12px;
		letter-spacing: 0.14px;
		color: #0D6A90;
		margin: 0 11px;
	}
	div.menuCon {
		text-align: center;
		margin-top: 24px;
		font-size: 12px;
	}
	div.menuCon a {
		color: #0D6A90;
		cursor: pointer;
		margin-right: 24px;
	}
</style>
<div class="wizardContent">
	<div class="wizardLogo">
		<i class="logoBand"></i>
		<label class="proName" id="pName">{%label.productName%}</label>
	</div>
	<div id="wzdIdx" class="wzdIdx">
		<input id="skipWzd" type="button" class="skipWzd" value="{%label.skipWzd%}" />
		<ul class="wzdNav">
			<li class="select" id="chgPwd">
				<p>{%label.wzdChgPwd%}</p>
				<i class="edgeItem"></i><span></span><i class="showRight"></i>
			</li>
			<li>
				<p id="netCfgTitle">{%label.wzdNetCfg%}</p>
				<i class="showLeft"></i><span></span><i class="showRight"></i>
			</li>
			<li>
				<p id="wirelessCfgTitle">{%label.wzdWirelessCfg%}</p>
				<i class="showLeft"></i><span></span><i class="edgeItem"></i>
			</li>
		</ul>
	</div>
	<div id="wizardCon" class="wizardCon"></div>
	<div id="wizardFoot" class="wizardFoot">
		<ul class="wzdFootCon">
			<li id="softVersionWzd" class="showLeft">{%label.softVersion%}{%label.colon%}</li>
			<li class="showRight"><a href="http://www.tp-link.com.cn" target="_blank">{%label.officalAddr%}</a><label>{%label.surpportTel%}400-8863-400</label></li>
		</ul>
	</div>
</div>
