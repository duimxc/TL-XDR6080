<style type="text/css">
	#appsInstallList{
		padding:0 16px 0 63px;
	}
	div.appCon span.name{
		cursor:pointer;
	}
	div.appInstalledCon {
		width: 745px;
	}
</style>
<script type="text/javascript">
	function init()
	{
		var GET_APP_DETAIL_TIME = 1000;
		var GET_APP_LIST_TIME = 1000;
		var ITEM_MARGIN_LEFT = 85;

		var APP_ID = uciAppInfo.dynOptName.id;
		var NAME = uciAppInfo.dynOptName.name;
		var AUTHOR = uciAppInfo.dynOptName.author;
		var SIZE = uciAppInfo.dynOptName.size;
		var TIME = uciAppInfo.dynOptName.releaseTime;
		var ICON_URL = uciAppInfo.dynOptName.iconURL;
		var STATUS = uciAppInfo.dynOptName.status;
		var DESCRIPTION = uciAppInfo.dynOptName.description;
		var UPDATED = uciAppInfo.dynOptName.updated;
		var VERSION = uciAppInfo.dynOptName.version;
		var LAST_VERSION = uciAppInfo.dynOptName.lastVersion;
		var LAST_SIZE = uciAppInfo.dynOptName.lastSize;
		var PAGE_URL = uciAppInfo.dynOptName.pageURL;
		var INSTALLED_NO = uciAppInfo.dynOptValue.installed.no;
		var UPDATED_YES = uciAppInfo.dynOptValue.updated.yes;

		var appsCon = id("appsInstallList");
		var appDetailCon = id("appsInstallAppDetail");
		var appsList = [];

		function errHandle(code)
		{
			var note = "";
			var bShowConfirm = false;
			var cloudErrRel;

			switch(parseInt(code, 10))
			{
			case ENONE:
				return true;
			case EINDEVICENOTBIND:
				note = errStr.appCloudUnBindInstall;
				bShowConfirm = true;
				break;
			case ENOMEMORY:
				note = errStr.invMemoryOut;
				break;
			case EINVMEMORYOUT:
				note = errStr.routerFlashNotEnough;
				break;
			case ESYSBUSY:
			case EINVLASTOPTIONISNOTFINISHED:
				note = errStr.invLastOptionIsNotFinished;
				break;
			case EINVDEVICEIDNOTEXIST:
			case EINVERRORDEVICEIDFORMATERROR:
			case EINVILLEGALDEVICE:
				note = appendErrCode(label.cloudDeviceInfoExpt, code);		/* 设备非法 */
				break;
			default:
				cloudErrRel = cloudErrHandle(code)
				if (cloudErrRel.result == false)
				{
					note = cloudErrRel.tip;
				}
				else
				{
					note = appendErrCode(errStr.invRequestFailRefresh, code);
				}
				break;
			}

			if (true == bShowConfirm)
			{
				showConfirm(note, function(result){
					if (true == result)
					{
						cloudSetBackBRHd(function(result){
							basicBRGoBackHandle(result);
						});
						showCloudPage("CloudBindCfg.htm");
					}
				});
			}
			else
			{
				showAlert(note);
			}

			return false;
		}

		function netSpaceTrans(space)
		{
			var kSpace = 1024;

			space = parseFloat(space)/kSpace;
			space = space.toFixed(1) + "KB"

			return space;
		}

		/* 从应用列表中获取某一个具体应用的信息 */
		function getAppListItem(appID)
		{
			var item = null;

			for (var i = 0, len = appsList.length; i < len; i++)
			{
				item = appsList[i];
				if (item[APP_ID] == appID)
				{
					return item;
				}
			}

			return null;
		}

		/* 设置应用列表中某一个具体应用的信息 */
		function setAppListItem(newItem)
		{
			var item = null;

			for (var i = 0, len = appsList.length; i < len; i++)
			{
				item = appsList[i];
				if (item[APP_ID] == newItem[APP_ID])
				{
					for (var prop in newItem)
					{
						item[prop] = newItem[prop];
					}

					return;
				}
			}
		}

		/* 从应用列表中删除某一个具体应用的信息 */
		function delAppListItem(appID)
		{
			var item = null;

			for (var i = 0, len = appsList.length; i < len; i++)
			{
				if (appsList[i][APP_ID] == appID)
				{
					appsList.splice(i, 1);
					return;
				}
			}
		}

		/* 从页面上的应用列表中删除某一个具体应用的信息 */
		function delAppListItemInPage(appID)
		{
			var childNodes = appsCon.childNodes;
			var childNode, moveDom = false;

			for (var index = 0, len = childNodes.length; index < len; index++)
			{
				childNode = childNodes[index];
				if (childNode.nodeType != 1)
				{
					continue;
				}

				if (childNode.appID == appID)
				{
					appsCon.removeChild(childNode);
					index--;
					len--;
					moveDom = true;
					continue;
				}

				if (false == moveDom)
				{
					continue;
				}

				if (parseInt(childNode.style.marginLeft) == ITEM_MARGIN_LEFT)
				{
					childNode.style.marginLeft = "0px";
				}
				else
				{
					childNode.style.marginLeft = ITEM_MARGIN_LEFT + "px";
				}
			}
		}

		/* 从页面上的应用列表中获取一个APP的容器 */
		function getAppListItemInPage(appID)
		{
			var childNodes = appsCon.childNodes;
			var childNode;

			for (var index = 0, len = childNodes.length; index < len; index++)
			{
				childNode = childNodes[index];
				if ((childNode.nodeType == 1) && (childNode.appID == appID))
				{
					return childNode;
				}
			}

			return null;
		}

		/* 设置页面上的一个应用的按钮状态 */
		function setAppListItemInputsInPage(inputs, item)
		{
			try
			{
				/* 更新 */
				if (UPDATED_YES == item[UPDATED])
				{
					inputs[0].style.display = "inline";
					inputs[1].style.display = "none";
				}
				else
				{
					inputs[0].style.display = "none";
					inputs[1].style.display = "inline";
				}
			}catch(ex){}
		}

		/* 设置页面上的一个应用的具体信息 */
		function setAppListItemInPage(item, appID)
		{
			var con = $(getAppListItemInPage(appID));

			con.find("i.logo").attr("src", item[ICON_URL]);
			con.find("p.vs").html(label.version + label.colon + item[VERSION] +
								'<span>' + label.size + label.colon + netSpaceTrans(item[SIZE]) +
								'</span>').css("display", "block");
			con.find("a.updateDetail").css("display", "none");
			setAppListItemInputsInPage(con.find("input"), item);
		}

		/* 显示操作的进度 */
		function appPragBarShow(appID, btn, pragCallBack, complete)
		{
			var progressBar = new ProgressBar();
			var con = btn.parentNode;
			var rel = {"count":0};

			$(con).children().css("display", "none");
			progressBar.showProgBarApps(con, function(callback){
				if (true == $.local)
				{
					rel["count"] += 20;
					rel[ERR_CODE] = ENONE;

					callback(rel);
				}

				pragCallBack(appID, callback);
			}, function(tag, code){
				if (true == $.local)
				{
					rel["count"] = 0;
				}

				$.setTimeout(function(){
					progressBar.closeProgBar();
					typeof complete == "function" && complete(tag, code);
				}, 300);
			});
		}

		/* 判断显示单个APP还是显示APP市场列表 */
		function appsInstallShow(detialShowTag)
		{
			if (true == detialShowTag)
			{
				appsCon.style.display = "none";
				appDetailCon.style.display = "block";
			}
			else
			{
				appsCon.style.display = "block";
				appDetailCon.style.display = "none";
			}

			emptyNodes(appDetailCon);
		}

		/* 显示单个APP的详细信息 */
		function showAppDetail(item)
		{
			var pageName = item[PAGE_URL];
			var pIndex = 0;

			if ((pIndex = pageName.lastIndexOf("/")) >= 0)
			{
				gAppPreUrl = pageName.substring(0, pIndex);
			}

			loadAppPage(pageName, "appsInstallAppDetail");
		}

		/* 显示单个APP的详细信息的响应函数 */
		function appDetail(appID)
		{
			if (true == $.local)
			{
				var tmp = localPluginURI[appID];

				appsInstallShow(true);
				showAppDetail(tmp, appID);
				return;
			}

			basicAppsRefreshLoading(function(){
				if (appID != null)
				{
					var reqData = {};

					reqData[uciAppInfo.fileName] = {};
					reqData[uciAppInfo.fileName][uciAppInfo.actionName.open] = {};
					reqData[uciAppInfo.fileName][uciAppInfo.actionName.open][uciAppInfo.dynOptName.id] = appID;

					$.action(reqData, function(result){
						if (errHandle(result[ERR_CODE]))
						{
							appsInstallShow(true);
							showAppDetail(result);
						}
						else
						{
							appsInstallShow(false);
						}
					});
				}
			});
		}

		/* 获取APP的更新、安装、卸载的进度 */
		function getAppActionProgress(reqData, callback)
		{
			var rel = {};

			$.action(reqData, function(result){
				var code = result[ERR_CODE];
				if (ENONE == code)
				{
					rel["count"] = parseInt(result[uciAppInfo.dynOptName.progress]);
					rel[ERR_CODE] = ENONE;
				}
				else
				{
					rel["count"] = ERR_PERCENT;
					rel[ERR_CODE] = code;
					closeProgBar();
					errHandle(code);
				}

				callback(rel);
			}, true);
		}

		/* 获取APP的更新进度 */
		function getAppUpdateProgress(appID, callback)
		{
			var data = {};
			var reqObjDetail;

			data[uciAppInfo.fileName] = {};
			reqObjDetail = data[uciAppInfo.fileName][uciAppInfo.actionName.getAppStatus] = {};
			reqObjDetail[uciAppInfo.dynOptName.id] = appID;
			reqObjDetail[uciAppInfo.dynOptName.action] = uciAppInfo.dynOptValue.actionUpdate;

			getAppActionProgress(data, callback);
		}

		/* 获取APP的卸载进度 */
		function getAppUnInstallProgress(appID, callback)
		{
			var data = {};
			var reqObjDetail;

			data[uciAppInfo.fileName] = {};
			reqObjDetail = data[uciAppInfo.fileName][uciAppInfo.actionName.getAppStatus] = {};
			reqObjDetail[uciAppInfo.dynOptName.id] = appID;
			reqObjDetail[uciAppInfo.dynOptName.action] = uciAppInfo.dynOptValue.actionUninstall;

			getAppActionProgress(data, callback);
		}

		/* 单个APP的卸载函数 */
		function appUninstall(appID, btn, complete, isUninstalling)
		{
			var reqData = {};
			var item = getAppListItem(appID);

			if (isUninstalling == true)
			{
				appPragBarShow(appID, btn, getAppUnInstallProgress, complete);
			}
			else if (item != null)
			{
				reqData[uciAppInfo.fileName] = {};
				reqData[uciAppInfo.fileName][uciAppInfo.actionName.uninstall] = {};
				reqData[uciAppInfo.fileName][uciAppInfo.actionName.uninstall][uciAppInfo.dynOptName.id] = appID;

				$.action(reqData, function(result){
					if (errHandle(result[ERR_CODE]))
					{
						appPragBarShow(appID, btn, getAppUnInstallProgress, complete);
					}
				});
			}
		}

		/* 单个APP的卸载函数 */
		function appsListAppUninstall(appID, btn, isUninstalling)
		{
			basicAppsRefreshLoading(function(){
				appUninstall(appID, btn, function(tag, code){
					if (true == tag)
					{
						delAppListItem(appID);
						delAppListItemInPage(appID);
						updateFlashInfo();
					}
					else
					{
						errHandle(code);
						btn.style.display = "inline";
					}
				}, isUninstalling);
			});
		}

		/* 单个APP的更新函数 */
		function appUpdate(appID, btn, complete, isUpdating)
		{
			var reqData = {};
			var item = getAppListItem(appID);

			if (isUpdating == true)
			{
				appPragBarShow(appID, btn, getAppUpdateProgress, complete);
			}
			else if (item != null && UPDATED_YES == item[UPDATED])
			{
				reqData[uciAppInfo.fileName] = {};
				reqData[uciAppInfo.fileName][uciAppInfo.actionName.update] = {};
				reqData[uciAppInfo.fileName][uciAppInfo.actionName.update][uciAppInfo.dynOptName.id] = appID;

				$.action(reqData, function(result){
					if (errHandle(result[ERR_CODE]))
					{
						appPragBarShow(appID, btn, getAppUpdateProgress, complete);
					}
				});
			}
		}

		/* 精选应用列表中单个APP的更新函数 */
		function appsListAppUpdate(appID, btn, isUpdating)
		{
			basicAppsRefreshLoading(function(){
				appUpdate(appID, btn, function(tag, code){
					if (true == tag)
					{
						var reqData = {};

						reqData[uciAppInfo.fileName] = {};
						reqData[uciAppInfo.fileName][uciAppInfo.actionName.view] = {};
						reqData[uciAppInfo.fileName][uciAppInfo.actionName.view][uciAppInfo.dynOptName.id] = appID;

						$.action(reqData, function(result){
							if (errHandle(result[ERR_CODE]))
							{
								var item = result[appID];

								setAppListItem(item);
								setAppListItemInPage(item, appID);
								updateFlashInfo();
							}
						});
					}
					else
					{
						if (errHandle(code))
						{
							showAlert(errStr.appUpdateFailTip);
						}
						btn.style.display = "inline";
					}
				}, isUpdating);
			});
		}

		/* 创建精选应用的列表 */
		function appsListCreate()
		{
			var item, appID, canUpdate;
			var divC, divS, p, span, uninsBtn, updateBtn, optenBtn, logo, shadow, a;
			var handleInstall = uciAppInfo.dynOptValue.properties.handleInstall;
			var propertyStr = uciAppInfo.optName.property;

			for (var i = 0, len = appsList.length; i < len; i++)
			{
				item = appsList[i];
				appID = item[APP_ID];

				divC = document.createElement("div");
				divC.className = "appConC";
				divC.appID = appID;
				if (i%2 == 1)
				{
					divC.style.marginLeft = ITEM_MARGIN_LEFT + "px";
				}
				appsCon.appendChild(divC);

				canUpdate = item[UPDATED];

				/* detail */
				div = document.createElement("div");
				div.className = "appCon";
				if (UPDATED_YES == canUpdate)
				{
					div.innerHTML = '<p class="vs" style="display:none;"></p>';
					a = document.createElement("a");
					a.className = "updateDetail";
					a.innerHTML = label.updateNoteStr + ">";
					a.href = "javascript:void(0)";
					a.onclick = (function(appID, updateLog){
						return function(){
							basicAppUpgradeInfoShow(this, updateLog.replace(/\\n/gi, "<br />"), 35);
						};
					})(appID, item[uciAppInfo.dynOptName.updateLog]);
					div.appendChild(a);

				}
				else
				{
					div.innerHTML = '<p class="vs">'+ label.version + label.colon + item[VERSION] + '<span>' +
									label.size + label.colon + netSpaceTrans(item[SIZE]) + '</span></p>';
				}
				divC.appendChild(div);

				/* name */
				span = document.createElement("span");
				span.className = "name";
				span.innerHTML = item[NAME];
				span.onclick = (function(appID){
					return function(){
						basicAppUpgradeInfoClose();
						appDetail(appID);
					};
				})(appID);
				div.insertBefore(span, div.childNodes[0]);

				/* logo && detial func */
				logo = document.createElement("img");
				logo.className = "logo";
				logo.src = item[ICON_URL];
				logo.onclick = (function(appID){
					return function(){
						basicAppUpgradeInfoClose();
						appDetail(appID);
					};
				})(appID);
				div.appendChild(logo);

				/* shadow && detial func */
				shadow = document.createElement("i");
				shadow.className = "logoShadow";
				shadow.onclick = (function(appID){
					return function(){
						basicAppUpgradeInfoClose();
						appDetail(appID);
					};
				})(appID);
				div.appendChild(shadow);

				/* func con */
				divS = document.createElement("div");
				divS.className = "appFunc";
				div.appendChild(divS);

				/* func update */
				updateBtn = document.createElement("input");
				updateBtn.type = "button";
				updateBtn.className = "subBtn disNone";
				updateBtn.value = btn.update;
				updateBtn.onclick = (function(appID){
					return function(){
						basicAppUpgradeInfoClose();
						appsListAppUpdate(appID, this, false);
					};
				})(appID);
				if (UPDATED_YES == canUpdate)
				{
					updateBtn.style.display = "inline";
				}
				divS.appendChild(updateBtn);

				/* func open */
				optenBtn = document.createElement("input");
				optenBtn.type = "button";
				optenBtn.className = "subBtn disNone";
				optenBtn.value = btn.enter;
				if (UPDATED_YES != canUpdate)
				{
					optenBtn.style.display = "inline";
				}
				optenBtn.onclick = (function(appID){
					return function(){
						basicAppUpgradeInfoClose();
						appDetail(appID);
					};
				})(appID);
				divS.appendChild(optenBtn);

				/* func uninstall */
				if (handleInstall == item[propertyStr])
				{
					uninsBtn = document.createElement("input");
					uninsBtn.type = "button";
					uninsBtn.className = "cancelBtn";
					uninsBtn.value = btn.unInstall;
					uninsBtn.onclick = (function(appID){
						return function(){
							var btn = this;

							basicAppUpgradeInfoClose();
							showConfirm(label.appDeleteTip, function(rel){
								if (true == rel)
								{
									appsListAppUninstall(appID, btn, false);
								}
							});
						};
					})(appID);
					divS.appendChild(uninsBtn);
				}

				/* 重新进入该页面时显示进度 */
				switch(item[uciAppInfo.dynOptName.operaType])
				{
				case uciAppInfo.dynOptValue.operaType.uninstall:
					appsListAppUninstall(appID, uninsBtn, true);
					break;
				case uciAppInfo.dynOptValue.operaType.update:
					appsListAppUpdate(appID, updateBtn, true);
					break;
				default:
					// nothing to do
				}
			}
		}

		/* 获取精选应用的列表信息 */
		function getAppsList()
		{
			var reqData = {};

			reqData[uciAppInfo.fileName] = {};
			reqData[uciAppInfo.fileName][uciAppInfo.actionName.getInstalledApp] = null;

			if (true == $.local)
			{
				appsList = formatTableData(localPluginInfo[uciAppInfo.optName.installedApp]);
				appsListCreate();
			}
			else
			{
				$.action(reqData, function(result){
					if (errHandle(result[ERR_CODE]))
					{
						appsList = formatTableData(result[uciAppInfo.optName.installedApp]);
						appsListCreate();
					}
				});
			}
		}

		if (gLoadAppDetail["appId"].length > 0)
		{
			/* 直接显示某个APP的详细信息 */
			var appId = gLoadAppDetail["appId"];
			var uri = gLoadAppDetail["uri"];

			gSetLoadAppDetail("", "");
			appsInstallShow(true);
			showAppDetail({uri:uri}, appId);
		}
		else if (true == gAppSet.appInstallShow.detialTag)
		{
			/* 判断是否直接显示某个APP的详细信息 */
			appDetail(gAppSet.appInstallShow.appID);
			gAppSet.appInstallShow = {detialTag:false, appID:-1};
		}
		else
		{
			/* APP的详细列表显示 */
			getAppsList();
		}
	}
	init();
</script>
<div class="appInstalledCon">
	<div id="appsInstallList"></div>
	<div id="appsInstallAppDetail" class="disNone"></div>
</div>