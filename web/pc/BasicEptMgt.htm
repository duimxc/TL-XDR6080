<style type="text/css">
	div.menuCon {
		height: 410px;
		margin: 20px 15px 0 auto;
		overflow: hidden;
		padding-right: 10px;
		position: relative;
		width: 200px;
	}
	h1.bMdelTitle{
		text-shadow:2px 2px #EF7F53;
	}
	div.bConfLBC{
		background:#FF8C5E;
	}
	div.bConfRBC{
		background:#F57E4E;
	}
	#eptMngCon {
		height: 86%;
	}
	#eptMngRCon {
		width: 664px;
		height: auto;
		min-height: auto;
		padding-top: 16px;
		margin: 0 16px 0 65px;
		box-sizing: border-box;
	}
	#eptMngConTitle{
		width: 664px;
		padding-right:1em;
		margin: 0 16px 15px 65px;
		box-sizing: border-box;
	}
	#eptMngConTitle #addLabelSpan{
		float: right;
		height: 26px;
		padding-top: 10px;
		box-sizing: border-box;
	}
	#eptMngConTitle #addLabelSpan a{
		font-size: 12px;
		color: #FFFFFF;
		margin-left: 15px;
		cursor:pointer;
		text-decoration:underline;
	}
	.switchBlock{
		margin-bottom: 30px;
	}
	.switchBlock div.block{
		margin: 0;
	}
	.switchBlock div.block ul.gridLineA{
		margin: 0;
	}
	div.title{
		font-size: 0.1px;
		border-bottom: 1px solid #DC6839;
		padding-bottom: 10px;
		position: relative;
		/* margin: 0 16px 30px 65px; */
		margin-bottom: 30px;
	}
	div.title label.title{
		color: #FFFFFF;
		font-size: 18px;
		vertical-align: middle;
		/* line-height: 21px; */
	}
	#routerSelLi{
		float: right;
		border-radius: 3px;
		border: 1px solid #DC6839;
		background: #DC6839;
		margin: 0 8px 0 16px;
		list-style: none;
	}
	#routerSel {
		float: right;
		margin-right: 10px;
		margin-left: 10px;
	}
	span.select span.hsValue {
		color: #FFFFFF;
		width: 150px;
		line-height: 23px;
		font-size: 12px;
	}
	/* ul.gridLine li.textCon{
		float: right;
		border-radius: 3px;
		border: 1px solid #DC6839;
		background: #DC6839;
		margin-right: 8px;
	} */
	#limitedEpt_rsMenu{
		border:none !important;
	}
	li.menuLi{
		color:#E06C3F;
	}
	li.menuLiClick{
		color:#FFFFFF;
		text-shadow:2px 2px #EF7F53;
	}
	li.menuLi i.ept_host{
		background:url(../web-static/images/routerBg.png) -206px -171px no-repeat;
	}
	li.menuLiClick i.ept_host{
		background:url(../web-static/images/routerBg.png) -233px -171px no-repeat;
	}
	li.menuLi i.ept_guest{
		background:url(../web-static/images/routerBg.png) -260px -171px no-repeat;
	}
	li.menuLiClick i.ept_guest{
		background:url(../web-static/images/routerBg.png) -288px -171px no-repeat;
	}
	li.menuLi i.ept_limited{
		background:url(../web-static/images/routerBg.png) -206px -199px no-repeat;
	}
	li.menuLiClick i.ept_limited{
		background:url(../web-static/images/routerBg.png) -233px -199px no-repeat;
	}
	label.menuLbl{
		white-space:pre;
		cursor:pointer;
		margin-left:15px;
		vertical-align:middle;
	}
	i.menuC{
		width:10px;
		height:9px;
		top:27px;
		*top:26px;
		right:10px;
		font-size:0px;
		position:absolute;
		vertical-align:middle;
		background:url(../web-static/images/routerBg.png) -426px -89px no-repeat;
	}
	li.menuLi i.menuC{
		visibility:hidden;
	}
	li.menuLiClick i.menuC{
		visibility:visible;
	}
	div.eptConC{
		height:78px;
		float:left;
		overflow:visible;
		width:300px;
		margin-bottom:74px;
	}
	div.eptCon{
		padding-left:80px;
		position:relative;
		height: 100%;
	}

	div.eptCon i.logo{
		display:inline-block;
		height:50px;
		width:50px;
		position:absolute;
		top:0;
		left:10px;
		background: url(../web-static/images/routerBg.png) no-repeat scroll -52px -256px #DC6839;
		border-radius: 4px;
	}

	div.eptCon i.router {
		background: url(../web-static/images/ap_router.png) no-repeat scroll #DC6839;
		background-size: contain;
	}

	div.eptCon i.qMark {
		background: url(../web-static/images/routerBg.png) no-repeat scroll -376px -331px;
		width: 22px;
		height: 22px;
		display: inline-block;
		position: absolute;
		top: -9px;
		left: 48px;
		cursor: pointer;
	}

	div.eptCon i.logoShade{
		display:inline-block;
		height:11px;
		width:71px;
		position:absolute;
		bottom: 1px;
		left: 0px;
		background: url(../web-static/images/routerBg.png) no-repeat scroll -416px -218px transparent;
	}
	div.eptCon pre{
		font-size:14px;
		color:#FFFFFF;
		font-weight:bold;
		width:195px;
	}
	div.eptCon span{
		vertical-align:middle;
	}
	div.eptCon span.name{
		display:inline-block;
		text-overflow:ellipsis;
		overflow:hidden;
	}
	div.eptCon p.vs{
		color:#FFFFFF;
		font-size:12px;
		margin-bottom:8px;
		margin-top:8px;
	}
	div.eptCon p.vs span{
		margin-left:5px;
	}
	div.eptCon div.eptFunc{
		margin-top:8px;
	}
	div.eptCon div.eptFunc input{
		width:70px;
		padding-top:3px;
		padding-bottom:3px;
		*padding-top:2px;
		*padding-bottom:1px;
		margin-right:14px;
	}
	#eptMngDetail{
		padding-right: 20px;
		display: none;
	}
	#eptMngDetail p.title{
		border-bottom: 1px solid #DF6A3B;
		font-size: 18px;
		color: #FFFFFF;
		padding-bottom: 10px;
		padding-top: 20px;
		margin-bottom: 20px;
	}
	div.eptTitle{
		padding-left:70px;
		color:#FFFFFF;
		position: relative;
	}
	div.eptTitle p{
		font-size:18px;
		line-height:35px;
	}
	div.eptTitle span.name{
		cursor: pointer;
		font-size: 18px;
	}
	div.eptTitle p input{
		background-color:#DF6A3B;
		font-size:14px;
		border:none 0;
		border-radius:3px;
		height:24px;
		padding:1px 5px;
		color:#FFFFFF;
		width:100px;
	}
	div.eptTitle span{
		font-size:12px;
	}
	div.eptTitle i{
		background: url("../web-static/images/routerBg.png") no-repeat scroll -1px -1px #DC6839;
		border-radius: 4px;
		display: inline-block;
		height: 50px;
		left: 0;
		position: absolute;
		top: 0;
		width: 50px;
	}
	div.eptTitle i.router {
		background: url(../web-static/images/ap_router.png) no-repeat scroll #DC6839;
		background-size: contain;
	}
	div.eptSpeedInfo{
		margin-top: 33px;
		padding-left:70px;
	}
	div.eptSpeedInfo ul{
		list-style: none outside none;
	}
	div.eptSpeedInfo li{
		display: inline-block;
		*display: inline;
		*zoom: 1;
		height: 50px;
		padding-left: 28px;
		color: #FFFFFF;
		position: relative;
		width: 256px;
		margin-left:0;
		margin-right:0;
	}
	div.eptSpeedInfo li i{
		display: inline-block;
		*display: inline;
		*zoom: 1;
		top: 1px;
		left: 0;
		height: 20px;
		width: 20px;
		position: absolute;
	}
	div.eptSpeedInfo li i.up{
		background: url("../web-static/images/routerBg.png") no-repeat scroll -284px -199px transparent;
	}
	div.eptSpeedInfo li i.down{
		background: url("../web-static/images/routerBg.png") no-repeat scroll -260px -199px transparent;
	}
	div.eptSpeedInfo li p{
		font-size: 20px;
		line-height: 20px;
		height:20px;
	}
	div.eptSpeedInfo li span{
		font-size: 12px;
		vertical-align: middle;
	}
	div.eptSpeedInfo li span.speedDesc{
		padding-right: 4px;
	}
	div.eptSpeedInfo li span.unit{
		padding-left: 4px;
		padding-right: 2px;
	}
	div.eptSpeedInfo li span.digit{
		background-color: #DF6A3B;
		border: 0 none;
		border-radius: 3px;
		padding: 4px 7px;
		cursor: pointer;
	}
	@media screen and (-webkit-min-device-pixel-ratio:0)
	{
		div.eptSpeedInfo li input.text{
			line-height:0px !important;
		}
	}
	div.eptSpeedInfo li input.text{
		background-color: #DF6A3B;
		border: 0 none;
		color: #FFFFFF;
		font-size: 12px;
		height: 22px;
		line-height: 22px;
		padding: 0;
		width: 45px;
		border-radius: 3px;
		vertical-align: middle;
		padding: 0 6px;
	}
	input.eqtBtn{
		padding: 3px 6px;
		*padding:1px 0px;
		vertical-align: middle;
		margin-left: 7px;
	}
	div.netControl p.newItem{
		margin-top: 25px;
		padding-left: 70px;
		margin-bottom: 30px;
	}
	div.netControl p.newItem span{
		color: #FFFFFF;
		font-size: 12px;
		border-bottom: 1px solid #FFFFFF;
		cursor: pointer;
	}
	div.netControl span.netControlAdd{
		color: #FFFFFF;
		font-size: 12px;
		border-bottom: 1px solid #FFFFFF;
		cursor: pointer;
	}
	div.netControl p.newItem span.netControlAddDis{
		color: lightgrey;
		border-bottom: 1px solid lightgrey;
	}
	div.netControlList ul{
		list-style: none outside none;
		margin-left: 46px;
		margin-right: 20px;
	}
	div.netControlList li{
		height: 72px;
		padding-left: 24px;
		background-color: #DF6A3B;
		font-size: 0px;
		padding-left: 24px;
		color: #FFFFFF;
		margin-bottom: 20px;
		position: relative;
		cursor: pointer;
	}
	div.netControlList li.domainLi{
		height: 36px;
		padding-left: 24px;
		background-color: #DF6A3B;
		font-size: 0px;
		color: #FFFFFF;
		margin-bottom: 10px;
		position: relative;
		cursor: pointer;
	}
	div.netControlList li pre{
		font-size:15px;
		font-weight:bold;
		padding-top:12px;
		margin-bottom:10px;
	}
	div.netControlList li span{
		margin-right: 10px;
		font-size: 12px;
	}
	div.netControlList li i{
		background: url("../web-static/images/routerBg.png") no-repeat scroll -306px -209px transparent;
		position: absolute;
		display: inline-block;
		*display: inline;
		*zoom: 1;
		height: 13px;
		width: 13px;
		right: -6px;
		top: -6px;
		cursor: pointer;
		visibility: hidden;
		z-index: 10;
	}
	div.netControlList li p{
		font-size:15px;
		font-weight:bold;
		padding-top:8px;
	}
	div.vigNetControl{
		background: none repeat scroll 0 0 #FFFFFF;
		height:280px;
		margin:20px auto;
		width:600px;
		padding-top:35px;
		position:relative;
	}
	ul.netControlLine {
		line-height: 26px;
		font-size: 0;
		height: 26px;
		margin-bottom: 25px;
	}
	ul.netControlLine label.desc{
		float: left;
		text-align: right;
		font-size: 14px;
		width: 113px;
		padding-right: 12px;
	}
	@media screen and (-webkit-min-device-pixel-ratio:0)
	{
		ul.netControlLine input.text{
			line-height:0px !important;
		}
	}
	ul.netControlLine input.text{
		background-color: #FFFFFF;
		border: 1px solid #F17E50;
		color: #000000;
		font-size: 12px;
		height: 22px;
		line-height: 22px;
		border-radius: 3px;
		vertical-align: middle;
		padding: 1px 6px;
	}
	ul.netControlLine input.timeDesc{
		width: 210px;
	}
	ul.netControlLine li.netControlText{
		display:inline-block;
		*display:inline;
		*zoom:1;
		font-size: 12px;
		vertical-align: middle;
		margin-right: 20px;
		line-height: 20px;
	}
	span.netSelectSpan{
		display:inline-block;
		margin-right:8px;
		height:26px;
		width:75px;
		z-index:1;
	}
	span.netSelect{
		border-radius: 3px;
		height: 100%;
		border: 1px solid #F17E50;
		border-radius: 3px;
		margin-left: 0;
		padding-left: 10px;
		line-height: 20px;
	}
	span.select span.hsTimeCon {
		color: #000000;
		height: 24px;
		line-height: 24px;
		width: 48px;
		border: 0 none;
	}
	span.select i.eptArrow {
		background:url("../web-static/images/routerBg.png") no-repeat scroll -445px -113px transparent;
		margin-right:5px;
		*margin-left:0px !important;
	}
	div.netControlBtn{
		text-align: center;
		margin-top: 35px;
	}
	div.netControlBtn input.eptBtnA{
		font-size: 13px;
		padding: 3px 20px;
		margin-right: 20px;
	}
	ul.netControlWeek{
		list-style: none outside none;
		font-size: 0;
	}
	ul.netControlWeek li {
		float: left;
		position: relative;
		margin-right: 10px;
		line-height: 24px;
		height: 24px;
		font-size: 12px;
		vertical-align: middle;
		border: 1px solid #F17E50;
		border-radius: 3px;
		padding-left: 10px;
		padding-right: 10px;
		cursor: pointer;
	}
	ul.netControlWeek li i{
		background: url("../web-static/images/routerBg.png") no-repeat scroll -424px -69px transparent;
		position: absolute;
		display: inline-block;
		*display: inline;
		*zoom: 1;
		height: 13px;
		width: 13px;
		right: -6px;
		top: -6px;
		visibility: hidden;
	}
	div.bcRCon{
		overflow:hidden;
	}
	div.eptInputDomainCon{
		background-color:#FFFFFF;
		margin:50px auto;
		overflow:hidden;
		position:relative;
		width:400px;
		text-align:center;
	}
	div.eptManageCon{
		background-color:#FFFFFF;
		margin:0 auto;
		overflow:hidden;
		position:relative;
		width:656px;
	}
	div.eptDetailCon{
		margin: 30px;
	}

	div.eptDetail{
		margin: 0 30px 0 30px;
	}

	table.dataGrid {
		border:1px solid #F57E4E;
		border-collapse:collapse;
		margin:15px 0 0;
		text-align:center;
		width:100%;
	}

	table.dataGrid tr {
		background:#FFFFFF;
		border-bottom:1px solid #F57E4E;
	}

	table.dataGrid td{
		border:1px solid #F57E4E;
		color:#3c3e43;
		height:38px;
		vertical-align:middle;
		white-space:pre;
	}
	#bTip1 {
		line-height: 38px;
		border-width: 0 1px 1px 1px;
		border-style: solid;
		border-color: #F57E4E;
		text-align: center;
		display: block;
	}
	div.closeManagement{
		font-size:0;
		margin:20px 0 20px;
		text-align:center;
	}

	div.funcManagement{
		font-size:0;
		margin:20px 0 20px;
		text-align:left;
	}

	div.eptSelTip{
		color:#000000;
		font-size:14px;
		font-weight:bold;
		margin:20px 0 0 60px;
	}

	div.domainInputDiv{
		margin:20px 0 20px;
		text-align:center;
	}

	div.btns{
		font-size:0;
		margin:20px 0 20px;
		text-align:center;
	}

	label.domainConLabel{
		display:inline-block;
		font-size:14px;
		text-align:right;
		vertical-align:middle;
	}

	input.domainConInput{
		border:1px solid #a4c22c;
		border-radius:3px;
		height:30px;
		color: gray;
		line-height:30px;
		margin-left:12px;
		text-indent:15px;
		vertical-align:middle;
		width:200px;
	}

	h1.eptAddTimeTips{
		color:#000000;
		font-size:14px;
		font-weight:bold;
		margin:30px;
	}
	div.pageListPo span.listSpanS{
		color:#3c3e43;
	}
	div.pageListPo span.ListSpan{
		color:#829a20;
	}
	ul.routerSelOptsUl {
		top: -9999px;
		left: -1px;
		width: 100%;
		font-size: 12px;
		list-style: none;
		position: absolute;
		border: 1px solid #FFFFFF;
		overflow: hidden;
		max-height: 182px;
		_height: expression(this.offsetHeight<400?"":400);
		box-shadow: 0 0 3px 0px rgba(120,120,120,.6);
		border-radius: 3px;
		background: #FFFFFF;
		padding: 3px 0;
		visibility: visible;
		z-index: 1001;
	}
	ul.routerSelOptsUl li.option{
		background-color:#FFFFFF;
		height:30px;
		line-height:30px;
		font-size:12px;
		font-weight:normal;
		margin:0;
		padding-left:10px;
		cursor:pointer;
		overflow:hidden;
		float:none;
		display:block;
	}
	table.dataGrid2{
		width:100%;
		margin:15px 0px 0px 0px;
		border-collapse:collapse;
		border:1px solid #F57E4E;
		text-align:center;
	}
	table.dataGrid2 tr{
		background: transparent;
		border-bottom: 1px solid #F57E4E;
	}
	table.dataGrid2 td{
		height:30px;
		color:#343434;
		border:1px solid #F57E4E;
		vertical-align:middle;
		white-space:pre;
	}
	@media screen and (-webkit-min-device-pixel-ratio:0)
	{
		table.dataGrid input.text, table.dataGrid2 input.text{
			line-height:0px !important;
		}
	}
	table.dataGrid2 input.text{
		color:#FFFFFF;
		height:21px;
		line-height:21px;
		border:none;
		border-radius:3px;
		padding:0px 2px;
		font-size:12px;
		background:transparent;
	}
	#stepOne i.resetImg {
		background: url(../web-static/images/reset2.png);
		display: block;
		width: 219px;
		height: 125px;
	}
	#stepOne i.easyExtend {
		background: url(../web-static/images/easyExtend2.png);
		display: block;
		width: 219px;
		height: 125px;
	}
	input.classNameBtn {
		background: url(../web-static/images/add1.png) no-repeat;
		color: #F57E4E;
	}
	div.eptConWrapper{
		background-color:#FFFFFF;
		margin:0 auto;
		overflow:hidden;
		position:relative;
		width:656px;
	}
	div.eptConTitle{
		margin: 30px 60px 0 60px;
		font-size: 20px;
		font-weight: bold;
	}
	div.eptConTitle span.textBtn{
		margin-left: 12px;
		color: #F57E4E;
		font-size: 12px;
		font-weight: normal;
		text-decoration: underline;
		cursor: pointer;
	}
	div.eptConGridHead{
		width: 530px;
		color:#000000;
		font-size:14px;
		font-weight:bold;
		margin:30px 0 0 60px;
	}
	div.eptConGridHead .btnA{
		float: right;
    	margin-top: -2px;
	}
	h1.eptWarn{
		color:#000000;
		font-size:12px;
		margin:15px 0 0 60px;
	}
	p.eptFullWarn{
		display:none;
		margin-left:230px;
		margin-top:20px;
		padding-left:18px;
		position:relative;
	}
	p.eptFullWarn i{
		background:url(web-static/images/routerBg.png) no-repeat -467px -190px;
		height:13px;
		left:0px;
		position:absolute;
		top:2px;
		width:13px;
	}
	span.eptFullWarn{
		display:none;
		max-width: 165px;
		margin-left:8px;
		padding-left:18px;
		position:relative;
		font-size: 12px;
		vertical-align: middle;
	}
	span.eptFullWarn i{
		background:url(web-static/images/routerBg.png) no-repeat -467px -190px;
		height:13px;
		left:0px;
		position:absolute;
		top:2px;
		width:13px;
	}
	div.blockFuncEpt{
		font-size:0;
		margin:20px 0 50px;
		text-align:center;
	}
	div.tableDiv{
		margin-left:60px;
		width:530px;
	}
	ul.eptForm {
		margin: 20px 0 30px 0;
		font-size: 0;
	}
	ul.eptForm li.eptFormItem{
		padding-left: 220px;
		margin-top: 16px;
	}
	ul.eptForm li.eptFormItem label.label {
		display: inline-block;
		width: 60px;
		margin-right: 16px;
		font-size: 12px;
		text-align: right;
		vertical-align: middle;
	}
	ul.eptForm li.eptFormItem input {
		vertical-align: middle;
	}
	#eptMngList p.title{
		color: #FFFFFF;
		margin-bottom: 20px;
	}
	#eptMngList #devCount {
		margin-left: 16px;
	}
	#eptMngList #addWhiteListDev{
		padding: 3px 15px;
	}
	#eptMngList #addBlackListDev{
		padding: 3px 15px;
	}
</style>
<script type="text/javascript">
	function init()
	{
		/* 全局变量初始化 */
		var POLL_TIME = 3000; /* 轮询时间 */

		var MAC = uciHostsInfo.optName.mac;
		var TYPE = uciHostsInfo.optName.type;
		var BLOCKED = uciHostsInfo.optName.blocked;
		var IS_BLOCKED = uciHostsInfo.optName.isBlocked;
		var DOWN_LIMIT = uciHostsInfo.optName.downLimit;
		var DOWN_SPEED = uciHostsInfo.optName.downSpeed;
		var UP_LIMIT = uciHostsInfo.optName.upLimit;
		var UP_SPEED = uciHostsInfo.optName.upSpeed;
		var LINIT_TIME = uciHostsInfo.optName.limitTime;
		var FORBID_DOMAIN = uciHostsInfo.optName.forbidDomain;
		var IP = uciHostsInfo.optName.ip;
		var HOSTNAME = uciHostsInfo.optName.hostname;
		var IS_CUR_HOST = uciHostsInfo.optName.isCurHost;
		var SSID = uciHostsInfo.optName.ssid;
		var CFG_VALID = uciHostsInfo.optName.cfgValid;
		var WIFI_MODE = uciHostsInfo.optName.wifiMode;
		var PLAN_RULE = uciHostsInfo.optName.planRule;
		var BNAME = uciHostsInfo.optName.name;
		var MON = uciHostsInfo.optName.mon;
		var TUE = uciHostsInfo.optName.tue;
		var WED = uciHostsInfo.optName.wed;
		var THU = uciHostsInfo.optName.thu;
		var FRI = uciHostsInfo.optName.fri;
		var SAT = uciHostsInfo.optName.sat;
		var SUN = uciHostsInfo.optName.sun;
		var START_TIME = uciHostsInfo.optName.startTime;
		var END_TIME = uciHostsInfo.optName.endTime;

		var BLOCKED_YES = uciHostsInfo.optValue.isBlocked.yes;
		var BLOCKED_NO  = uciHostsInfo.optValue.isBlocked.no;
		var CUR_HOST_YES = uciHostsInfo.optValue.isCurHost.yes;
		var CUR_HOST_NO = uciHostsInfo.optValue.isCurHost.no;
		var ENABLED = uciGuestNet.optValue.enable.yes;
		var DISABLED = uciGuestNet.optValue.enable.no;

		var MAX_SPEED_LIMIT = 9999999;
		var MAX_SPEED_LEN = 6;
		var MAC_NET_CONTROL_PANEL = 4;

		var EPT_TYPE_HOST = 0;
		var EPT_TYPE_GUEST = 1;
		var EPT_TYPE_FORBID = 2;
		var EPT_TYPE_DETAIL = 3;

		var ACTION_ADD = 0;
		var ACTION_EDIT = 1;

		var curUrl;

		var curTypeStaList = []; //当前类型的设备列表

		var menuRefreshMap = {};
		menuRefreshMap[EPT_TYPE_HOST] = bMenuHostRefresh;
		menuRefreshMap[EPT_TYPE_GUEST] = bMenuGuestRefresh;
		menuRefreshMap[EPT_TYPE_FORBID] = bMenuForbidRefresh;
		menuRefreshMap[EPT_TYPE_DETAIL] = bEptDetailRefresh;

		var epTypes = {
			inet:uciHostsInfo.optValue.linkType.wired,			// 0为有线
			wirelessH:uciHostsInfo.optValue.linkType.hostWireless,	// 1为无线主人
			wirelessG:uciHostsInfo.optValue.linkType.guestWireless,	// 2为无线访客人
			block:uciHostsInfo.optValue.isBlocked.yes,		// 1为已禁用
			unBlock:uciHostsInfo.optValue.isBlocked.no,		// 0为允许连接
			wireless2G:uciHostsInfo.optValue.wifiMode.h2G,
			wireless5G:uciHostsInfo.optValue.wifiMode.h5G,
			wireless5G1:uciHostsInfo.optValue.wifiMode.h5G1,
			wireless5G4:uciHostsInfo.optValue.wifiMode.h5G4
		};
		var epLinkType = [label.inetLink, label.wireless2GLink, label.wirelessLink, label.wireless5GLink];
		var epWeekType = [label.Mon, label.Tue, label.Wen, label.Thu, label.Fri, label.Sta, label.Sun];
		var epNetControlType = [
			{str: label.MonB, value: ENABLED, unValue:DISABLED},
			{str: label.TueB, value: ENABLED, unValue:DISABLED},
			{str: label.WenB, value: ENABLED, unValue:DISABLED},
			{str: label.ThuB, value: ENABLED, unValue:DISABLED},
			{str: label.FriB, value: ENABLED, unValue:DISABLED},
			{str: label.StaB, value: ENABLED, unValue:DISABLED},
			{str: label.SunB, value: ENABLED, unValue:DISABLED}
		];
		var DEFAULT_TIME = "0";
		var hourOptions = [];
		var miniteOptions = [];
		var epStaList = new Array();	// 数据列表
		var tmpId = "bEptHostName";
		var speedClass = "speedLimit";
		var noSpeedClass = "noSpeedLimit";
		var digitClass = "digit";
		var inputClass = "text";
		var refreshDataHandle;
		var gEditItem;
		var gEditItemKey;
		var gEptType;
		var beEdit = false;
		var bSavingData = false;
		var savingFlgSetTimes = 0;
		var bEptNameMaxLen = 31;
		var bEptNameMax = 63;
		var wirelessEnable;
		var localInfo = "";

		/* for HNAT */
		var isHnatOpen = false;

		var ENABLE = "1";
		var DISABLE = "0";
		var FILE_HNAT = "hnat";
		var SEC_HNAT = "main";
		var KEY_ENABLE = "enable";

		var MAX_LIMIT_TIME_NUMBER = 16;
		var MAX_FORBID_DOMAIN_NUMBER = 64;
		var MAX_STA_LIMIT_TIME_NUMBER = 4;
		var MAX_STA_FORBID_DOMAIN_NUMBER = 16;
		var gForbidDomainArray = [];		/* 总域名列表 */
		var gLimitTimeArray = [];			/* 总时间规则列表 */
		var forbidDomainDataGridLs = null;
		var limitTimeDataGridLs = null;
		var gStaForbidDomainSelectedArray = [];
		var gStaLimitTimeSelectedArray = [];

		if (gMacFilterSupport)
		{
			var EPT_TYPE_BLACK_LIST = 4;
			var EPT_TYPE_WHITE_LIST = 5;
			var EPT_TYPE_LIST_OFF = 6;

			/* 黑/白名单MAC地址过滤策略 */
			var BLACK_LIST_POLICY = 0;
			var WHITE_LIST_POLICY = 1;
			var NOT_MAC_FILTER_POLICY = 2;

			/* 列表添加设备类型 */
			var ADD_ONLINE_DEV_TO_BLACK_LIST = 0;
			var ADD_ONLINE_DEV_TO_WHITE_LIST = 1;
			var ADD_BLOCK_DEV_TO_WHITE_LIST = 2;

			var WAC_MAX_WHITELIST_LEN = 64;
			var WAC_MAX_BLACKLIST_LEN = 64;

			var MacBrandAry = [
			{br:"Apple", ch:"苹果"},
			{br:"Samsung", ch:"三星"},
			{br:"OPPO", ch:"OPPO"},
			{br:"LG", ch:"LG"},
			{br:"Lenovo", ch:"联想"},
			{br:"HuaWei", ch:"华为"},
			{br:"ZTE", ch:"中兴"},
			{br:"Coolpad", ch:"酷派"},
			{br:"XiaoMi", ch:"小米"},
			{br:"MeiZu", ch:"魅族"},
			{br:"Google", ch:"Google"},
			{br:"Microsoft", ch:"Microsoft"},
			{br:"MOTO", ch:"MOTO"},
			{br:"Sony", ch:"索尼"},
			{br:"HTC", ch:"HTC"},
			{br:"HP", ch:"惠普"},
			{br:"Dell", ch:"戴尔"},
			{br:"Acer", ch:"宏基"},
			{br:"Toshiba", ch:"东芝"},
			{br:"ASUS", ch:"华硕"}];

			menuRefreshMap[EPT_TYPE_BLACK_LIST] = bMenuBlackListRefresh;
			menuRefreshMap[EPT_TYPE_WHITE_LIST] = bMenuWhiteListRefresh;
			menuRefreshMap[EPT_TYPE_LIST_OFF] = bEptListOffRefresh;

			var owner;
			var oldPolicy;
			var wlanAccessEnable;
			var blArray = [];
			var wlArray = [];
			var selStaIndex = 0;
			var curItem = {};
			var staArray = [];
			var staSelArray = [];
		}

		var capRouterName = document.title || "主路由";

		var currentRouter = 0;
		var curEptType;
		var extList = new Array();
		var routerOptions = [{str:"全部", value:0}];
		var linkEptNumObj = [];
		var classObj = {
			className:"routerSelOptsUl",
			colorN:"#FFFFFF",
			colorC:"#f57e4e",
			fontColorN:"#3C3E43",
			fontColorC:"#FFFFFF",
			valueColor:"#FFFFFF",
			valueDisColor:"#B2B2B2",
			scrollBg:"#E26D3F"
		};
		selectInit("routerSel", routerOptions, currentRouter, routerSelectChange, 31, classObj);

		function binds(func, obj) {
			return function() {
				return func.call(obj);
			};
		}

		/* 截取字符串，如果超过maxNum则以中间省略，首尾显示 */
		function getSubString(value){
			var str = "", suffixStr = "", maxNum = 16;
			var strTemp, i, count = 0;

			if (getDisplayStrLen(value) <= maxNum) {
				return value;
			}

			for (i = value.length - 1; i > 0; i -= 1) {
				strTemp = value.charAt(i);
				suffixStr += strTemp;

				count += getDisplayStrLen(strTemp);
				if (count >= 5 ) {
					break;
				}
			}
			suffixStr = suffixStr.split("").reverse().join("");

			count = 0;
			for (i = 0; i < value.length - 1; i +=1) {
				strTemp = value.charAt(i);
				str += strTemp;

				count += getDisplayStrLen(strTemp);
				if (count > maxNum - 8) {
					break;
				}
			}

			str = str + "..." + suffixStr;
			return str;
		};

		function routerSelectChange(index) {
			currentRouter = index;
			emptyNodes(id("eptMngList"));
			if (curEptType == EPT_TYPE_HOST)
			{
				bMenuHostC();
			}
			else
			{
				bMenuGuestC();
			}
		}

		function menuInit_Ept()
		{
			var macFilterMenuLabel = gMacFilterSupport ? label.blackWhiteList : label.limitedEpt
			var menuList = {
				linkedEpt_rsMenu:{
					value: menuStr.wifiHost,
					className:"ept_host",
					url: "wifiHost"
				},
				bGuestEpt_rsMenu :
				{
					value: label.bGuestEpt,
					className:"ept_guest",
					url: "bGuestEpt"
				},
				limitedEpt_rsMenu:{
					value: macFilterMenuLabel,
					className:"ept_limited",
					url: "limitedEpt"
				}
			};

			var menuTool = new menuTool_BC();

			function refreshGuestMenu()
			{
				getGuestNewtorkInfo(function(guestEnabled){
					if (!guestEnabled)
					{
						menuList["bGuestEpt_rsMenu"] = null;
					}

					menuTool.init({
						menuUlId:"menuBEptMngUl",
						conId:"eptMngRCon",
						menuList:menuList,
						menuClickCallBack:bMenuClickHd,
						pageLoad:function(){
							id("menuBEptMngUl").childNodes[0].onclick();
						},
						niceScrollStyles:{"background":"#1E96D4"},
						loadNewPage:false
					});
				});
			}

			if (gMacFilterSupport)
			{
				getMacFilterPolicy(function(policy){
					refreshGuestMenu();
				});
			}
			else
			{
				refreshGuestMenu();
			}

			/* 初始化内容区域滚动条 */
			gBasicAppsRNiceScroll = new NiceScroll("eptMngCon");
			gBasicAppsRNiceScroll.scrollTipOpacity(1);
			gBasicAppsRNiceScroll.scrollTipSet({"background":"#E26D3F"});
			gBasicAppsRNiceScroll.init();

			/* 初始化上网控制功能 */
			initNetControl();
		}

		function disableSwitchBlock()
		{
			id("blackListOn").disabled = true;
			id("whiteListOn").disabled = true;
			id("off").disabled = true;
		}

		/* 获取黑白名单模式状态 */
		function getMacFilterPolicy(callback)
		{
			var titleStr;
			var data = {};

			data[uciCustomNetwork.fileName] = {};
			data[uciCustomNetwork.fileName][KEY_NAME] = uciCustomNetwork.secName.macFilterConfig;

			$.query(data, function(resp){
				var policy = resp[uciCustomNetwork.fileName][uciCustomNetwork.secName.macFilterConfig][uciCustomNetwork.optName.policy];
				var enable = resp[uciCustomNetwork.fileName][uciCustomNetwork.secName.macFilterConfig][uciCustomNetwork.optName.enable];
				owner = resp[uciCustomNetwork.fileName][uciCustomNetwork.secName.macFilterConfig][uciCustomNetwork.optName.owner];

				if (enable == "on")
				{
					oldPolicy = policy;
				}
				else
				{
					oldPolicy = NOT_MAC_FILTER_POLICY;
				}

				callback(policy);
			});
		}

		/* 切换黑/白名单模式 */
		function onRadioChange()
		{
			var enable;
			var newPolicy;
			var confirmStr;
			var titleStr;

			if (id("blackListOn").checked) {
				enable = "on";
				newPolicy = BLACK_LIST_POLICY;
				confirmStr = label.switchToBlackList;
			} else if (id("whiteListOn").checked) {
				enable = "on";
				newPolicy = WHITE_LIST_POLICY;
				confirmStr = label.switchToWhiteList;
			} else {
				enable = "off";
				newPolicy = NOT_MAC_FILTER_POLICY;
				confirmStr = label.switchToOff;
			}

			if (newPolicy == oldPolicy) {
				return;
			}

			/* 无线接入控制(WAC)启用下，开启黑白名单需提示无线接入控制(WAC)关闭 */
			if (oldPolicy == NOT_MAC_FILTER_POLICY)
			{
				var data = {};
				data[uciWlanAccess.fileName] = {}
				data[uciWlanAccess.fileName][KEY_NAME] = uciWlanAccess.optName.config;

				$.query(data, function(result){
					if (result[ERR_CODE] == ENONE)
					{
						wlanAccessEnable = parseInt(result[uciWlanAccess.fileName][uciWlanAccess.optName.config][uciWlanAccess.optName.enable]);

						if (wlanAccessEnable)
						{
							if (newPolicy == BLACK_LIST_POLICY) {
								confirmStr = label.WACSwitchToBlackList;
							} else if (newPolicy = WHITE_LIST_POLICY) {
								confirmStr = label.WACSwitchToWhiteList;
							}
						}
					}
				}, false);
			}

			showConfirm(confirmStr, function(result){
				if (result)
				{
					/* 切换为黑名单，则查询本机是否在黑名单中
					 * 切换为白名单，则弹窗选择已连接设备加入白名单
					 * 切换为关闭，则隐藏黑白名单列表
					 */
					if (newPolicy == BLACK_LIST_POLICY)
					{
						if (isInBl(g_cur_host_mac.toUpperCase()))
						{
							var curHost;
							for(var i = 0; i < blArray.length; i++)
							{
								if (g_cur_host_mac.toUpperCase() == blArray[i].mac.toUpperCase())
								{
									curHost = blArray[i];
									break;
								}
							}

							showAlertD(label.checkCurHost + curHost.hostname + label.curHostInBlackList, function(){
								var item = {
									mac: curHost.mac,
									name: curHost.hostname
								};

								bEptHostUnblockClick(item, function(){
									sendRadioChangeData(enable, newPolicy);
								});
							});
						}
						else
						{
							sendRadioChangeData(enable, newPolicy);
						}
					}
					else if (newPolicy == WHITE_LIST_POLICY)
					{
						showStaWindow(ADD_ONLINE_DEV_TO_WHITE_LIST);
					}
					else
					{
						sendRadioChangeData(enable, newPolicy);
					}
				}
				else // 取消则恢复原勾选状态
				{
					if (oldPolicy == BLACK_LIST_POLICY)
					{
						id("blackListOn").checked = true;
						id("whiteListOn").checked = false;
						id("off").checked = false;
					}
					else if (oldPolicy == WHITE_LIST_POLICY)
					{
						id("blackListOn").checked = false;
						id("whiteListOn").checked = true;
						id("off").checked = false;
					}
					else
					{
						id("blackListOn").checked = false;
						id("whiteListOn").checked = false;
						id("off").checked = true;
					}
				}
			});
		}

		function sendRadioChangeData(enable, newPolicy)
		{
			showLoading(statusStr.waiting, undefined, undefined, false);

			var data = {};
			var macFilterCfg = {
				owner: uciCustomNetwork.optValue.owner.web,
				enable: enable
			};

			if (enable == "on") {
				macFilterCfg.policy = newPolicy;

				if (wlanAccessEnable)
				{
					data[uciWlanAccess.fileName] = {};
					data[uciWlanAccess.fileName][uciWlanAccess.optName.config] = {};
					data[uciWlanAccess.fileName][uciWlanAccess.optName.config][uciWlanAccess.optName.enable] = 0;
				}
			}

			data[uciCustomNetwork.fileName] = {};
			data[uciCustomNetwork.fileName][uciCustomNetwork.secName.macFilterConfig] = macFilterCfg;

			$.modify(data, function(resp){
				if (resp.error_code == ENONE) {
					oldPolicy = newPolicy;

					if (newPolicy == NOT_MAC_FILTER_POLICY)
					{
						var delData = {};
						delData[uciCustomNetwork.fileName] = {};
						delData[uciCustomNetwork.fileName][KEY_TABLE] = ["mac_filter_black_entry", "mac_filter_white_entry"];

						$.del(delData, function(delResp){
							if (delResp.error_code == ENONE)
							{
								id("eptMngList").style.display = "none";
								id("eptMngListTitle").style.display = "none";

								closeLoading();
							}
						});
					}
					else
					{
						/* 切换到白名单模式时，选择已连接设备加入白名单 */
						if (newPolicy == WHITE_LIST_POLICY)
						{
							gEptType = EPT_TYPE_WHITE_LIST;
							titleStr = label.whiteListTitle;
						}
						else
						{
							gEptType = EPT_TYPE_BLACK_LIST;
							titleStr = label.blackListTitle;
						}

						bEptGetData();
						$("#eptMngListTitle .title").text(titleStr);
						id("eptMngList").style.display = "block";
						id("eptMngListTitle").style.display = "block";

						closeLoading();
					}
				}
			});
		}

		/* 获取当前已连接的设备列表 */
		function showStaWindow(type)
		{
			var cntNum;
			var data = {};

			staSelArray.length = 0; /* 清空 */
			staArray.length = 0;

			data[uciHostsInfo.fileName] = {};
			data[uciHostsInfo.fileName][KEY_TABLE] = uciHostsInfo.dynData.online_host;

			/* 读取数量 */
			$.query(data, function(rspData){
				if (errHandle(rspData[ERR_CODE]))
				{
					addStaArray(rspData[uciHostsInfo.fileName][uciHostsInfo.dynData.online_host], type);
					openStaWindow(type);
				}
			});
		}

		/* 获取当前已阻止的设备列表 */
		function showBlockedWindow()
		{
			var data = {};

			staSelArray.length = 0; /* 清空 */
			staArray.length = 0;
			data[uciCustomNetwork.fileName] = {};
			data[uciCustomNetwork.fileName][KEY_TABLE] = uciCustomNetwork.dynData.macFilterWhiteBlockList;

			$.query(data, function (rspData){
				if (errHandle(rspData[ERR_CODE])){
					if ((rspData[uciCustomNetwork.fileName] == null) ||
						(rspData[uciCustomNetwork.fileName][uciCustomNetwork.dynData.macFilterWhiteBlockList] == null))
					{
						return;
					}

					addBlockedArray(rspData[uciCustomNetwork.fileName][uciCustomNetwork.dynData.macFilterWhiteBlockList]);
					openBlockedWindow();
				}
			});
		}

		/* 刷新设备列表（已阻止设备列表或已连入设备列表） */
		function refreshStaWindow(type)
		{
			var divCon = id("showStaDiv");

			document.body.removeChild(divCon);
			showStaWindow(type);
		}

		/* 刷新已阻止设备列表 */
		function refreshBlockedWindow()
		{
			var divCon = id("showStaDiv");

			document.body.removeChild(divCon);
			showBlockedWindow();
		}

		/* 添加到设备列表 */
		function addStaArray(staData, type)
		{
			var device, devItem, itemTmp, flag;
			var data = formatTableData(staData) || [];

			for (device in data)
			{
				itemTmp = {};
				devItem = data[device];

				itemTmp.name = devItem.hostname.replace(/^\s+|\s+$/g,"");
				if (itemTmp.name == "" || itemTmp.name == "-")
				{
					itemTmp.name = label.anonymousHost;
				}
				itemTmp.mac = devItem.mac.toUpperCase();
				itemTmp.ip = devItem.ip;

				if (itemTmp.mac == g_cur_host_mac.toUpperCase())
				{
					curItem.name = itemTmp.name;
					curItem.mac = itemTmp.mac;
					curItem.ip = itemTmp.ip;
					continue;
				}

				if (type == ADD_ONLINE_DEV_TO_WHITE_LIST && true == isInWl(itemTmp.mac) ||
					type == ADD_ONLINE_DEV_TO_BLACK_LIST && true == isInBl(itemTmp.mac))
				{
					continue;
				}

				/* staArray.unshift(itemTmp); */
				staArray.splice(0, 0, itemTmp);
			}
		}

		/* 添加已阻止设备到白名单列表 */
		function addBlockedArray(staData)
		{
			var device, devItem, itemTmp, interVal;
			var data = formatTableData(staData) || [];

			for (device in data)
			{
				itemTmp = {};
				devItem = data[device];

				itemTmp.mac = devItem.mac.toUpperCase();
				interVal = parseInt(devItem.interval);

				if (interVal >= 86400)
				{
					itemTmp.tip = ""+String(parseInt(interVal/86400))+"天前";
				}
				else if (interVal >= 3600)
				{
					itemTmp.tip = ""+String(parseInt(interVal/3600))+"小时前";
				}
				else if (interVal >= 60)
				{
					itemTmp.tip = ""+String(parseInt(interVal/60))+"分钟前";
				}
				else
				{
					itemTmp.tip = "刚刚";
				}

				itemTmp.name = brandSearch(devItem.mac);
				/* unshift在部分IE浏览器中不能正常执行
				staArray.unshift(itemTmp); */
				staArray.splice(0, 0, itemTmp);
			}
		}

		/* 查询设备的品牌信息 */
		function brandSearch(macString)
		{
			var len = MacBrandAry.length;
			var mac = macString.substring(0, 8).toUpperCase();
			var re = /:/g;
			var macStr;

			if (undefined == MacBrands){
				return "-";
			}

			mac = mac.replace(/:/g, "-");

			for (var i = 0; i < len; i++)
			{
				if ((undefined != (macStr = MacBrands[MacBrandAry[i].br])))
				{
					if (macStr.indexOf(mac) >= 0)
					{
						return MacBrandAry[i].ch;
					}
				}
			}

			return "-";
		}

		/* 弹出当前可选设备列表 */
		function openStaWindow(type)
		{
			/* 如果已存在弹出框，则直接返回 */
			if (null != id("showStaDiv"))
			{
				return;
			}

			var divCon;
			var eptCon, eptTip, tableDiv, table, bankTip, warnTip, iWarn, divFunc, eptWarn, inputBtn;
			var staDataGridLs = new DataGrid();

			/* 添加本机到列表 */
			if (type != ADD_ONLINE_DEV_TO_BLACK_LIST){
				staArray.push(curItem);
			}

			divCon = document.createElement("div");
			divCon.className = "VigNetControlCon";
			divCon.id = "showStaDiv";
			document.body.appendChild(divCon);

			createAddByListContent(type);

			if (type == ADD_ONLINE_DEV_TO_BLACK_LIST)
			{
				createAddByMacContent(type);
			}

			showCoverB(function(){
				divCon.style.visibility = "visible";
				divCon.style.top = "150px";
			});
		}

		/* 弹出当前可选的已阻止设备列表 */
		function openBlockedWindow()
		{
			/* 如果已存在弹出框，则直接返回 */
			if (null != id("showStaDiv"))
			{
				return;
			}

			var divCon;

			divCon = document.createElement("div");
			divCon.className = "VigNetControlCon";
			divCon.id = "showStaDiv";
			document.body.appendChild(divCon);

			createAddByListContent(ADD_BLOCK_DEV_TO_WHITE_LIST);
			createAddByMacContent(ADD_BLOCK_DEV_TO_WHITE_LIST);

			showCoverB(function(){
				divCon.style.visibility = "visible";
				divCon.style.top = "150px";
			});
		}

		/* 切换为通过MAC地址添加 */
		function switchToAddByMac()
		{
			$(".addByList").hide();
			$(".addByMac").show();
		}

		/* 切换为通过列表添加 */
		function switchToAddByList()
		{
			$(".addByMac").hide();
			$(".addByList").show();
		}

		/* 创建通过列表添加方式的弹窗内容 */
		function createAddByListContent(type)
		{
			var eptCon, eptTitle, eptAddByListTitle, eptSwitchAddTypeBtn, eptTip, tableDiv, table, bankTip, warnTip, iWarn, divFunc, eptWarn, inputBtn;
			var divCon = id("showStaDiv")
			var staDataGridLs = new DataGrid();

			eptCon = document.createElement("div");
			eptCon.className = "eptConWrapper addByList";
			eptCon.id = "eptConWindow";
			divCon.appendChild(eptCon);

			if (type == ADD_ONLINE_DEV_TO_BLACK_LIST || type == ADD_BLOCK_DEV_TO_WHITE_LIST)
			{
				eptTitle = document.createElement("div");
				eptTitle.className = "eptConTitle";
				eptCon.appendChild(eptTitle);

				eptAddByListTitle = document.createElement("label");
				eptAddByListTitle.className = "title";
				eptAddByListTitle.innerHTML = label.addByList;
				eptTitle.appendChild(eptAddByListTitle);

				eptSwitchAddTypeBtn = document.createElement("span");
				eptSwitchAddTypeBtn.className = "textBtn";
				eptSwitchAddTypeBtn.innerHTML = btn.addByMac;
				eptSwitchAddTypeBtn.onclick = switchToAddByMac;
				eptTitle.appendChild(eptSwitchAddTypeBtn);
			}

			eptGridHead = document.createElement("div");
			eptGridHead.className = "eptConGridHead";
			eptCon.appendChild(eptGridHead);

			eptTip = document.createElement("label");
			eptTip.className = "eptSelTip";
			if (type == ADD_ONLINE_DEV_TO_BLACK_LIST)
			{
				eptTip.innerHTML = label.selOnlineDevAddedToBlackList;
			}
			else if (type == ADD_BLOCK_DEV_TO_WHITE_LIST)
			{
				eptTip.innerHTML = label.selBlockDevAddedToWhiteList;
			}
			else if (type == ADD_ONLINE_DEV_TO_WHITE_LIST)
			{
				eptTip.innerHTML = label.selOnlineDevAddedToWhiteList;
			}
			eptGridHead.appendChild(eptTip);

			tableDiv = document.createElement("div");
			tableDiv.className = "tableDiv";
			eptCon.appendChild(tableDiv);

			table = document.createElement("table");
			table.className = "dataGrid";
			table.id = "staSelTable";
			tableDiv.appendChild(table);

			if (0 == staArray.length){
				bankTip = document.createElement("p");
				bankTip.id = "bTip1";
				bankTip.innerHTML = "当前没有可添加的设备！";
				tableDiv.appendChild(bankTip);
			}

			if (type == ADD_ONLINE_DEV_TO_WHITE_LIST)
			{
				eptWarn = document.createElement("h1");
				eptWarn.className = "eptWarn";
				eptWarn.innerHTML = label.addOnlineDevToWhiteListTips;
				eptCon.appendChild(eptWarn);
			}

			warnTip = document.createElement("p");
			warnTip.className = "eptFullWarn";
			warnTip.id = "listFullWarn";
			warnTip.innerHTML = "列表条目超过规定个数，最多允许指定" + WAC_MAX_WHITELIST_LEN + "个设备。";
			eptCon.appendChild(warnTip);

			iWarn = document.createElement("i");
			warnTip.appendChild(iWarn);

			divFunc = document.createElement("div");
			divFunc.className = "blockFuncEpt";
			eptCon.appendChild(divFunc);

			inputBtn = document.createElement("input");
			inputBtn.type = "button";
			inputBtn.className = "btnA subBtn";
			inputBtn.value = "刷新";
			if (type == ADD_ONLINE_DEV_TO_BLACK_LIST)
			{
				inputBtn.onclick = function(){
					refreshStaWindow(type);
				}
			}
			else if (type == ADD_BLOCK_DEV_TO_WHITE_LIST)
			{
				inputBtn.onclick = function(){
					refreshBlockedWindow();
				}
			}
			else if (type == ADD_ONLINE_DEV_TO_WHITE_LIST)
			{
				inputBtn.onclick = function(){
					refreshStaWindow(type);
				}
			}
			eptGridHead.appendChild(inputBtn);

			inputBtn = document.createElement("input");
			inputBtn.type = "button";
			inputBtn.className = "btnA subBtn";
			inputBtn.value = "确定";
			if (type == ADD_ONLINE_DEV_TO_BLACK_LIST)
			{
				inputBtn.onclick = function(){
					staListSelConfirm(type);
				}
			}
			else if (type == ADD_BLOCK_DEV_TO_WHITE_LIST)
			{
				inputBtn.onclick = function(){
					blockedStaListSelConfirm();
				}
			}
			else if (type == ADD_ONLINE_DEV_TO_WHITE_LIST)
			{
				inputBtn.onclick = function(){
					staListSelConfirm(type);
				}
			}
			divFunc.appendChild(inputBtn);

			if (type == ADD_ONLINE_DEV_TO_BLACK_LIST || type == ADD_BLOCK_DEV_TO_WHITE_LIST)
			{
				inputBtn = document.createElement("input");
				inputBtn.type = "button";
				inputBtn.className = "btnA subBtn";
				inputBtn.value = "取消";
				inputBtn.onclick = staListSelCancel;
				divFunc.appendChild(inputBtn);
			}

			if (type == ADD_BLOCK_DEV_TO_WHITE_LIST)
			{
				staDataGridLs.init({
					id:"staSelTable",
					data: staArray,
					max:WAC_MAX_WHITELIST_LEN,
					edit:false,
					paging:{num:8, page:1},
					checkIndex:1,
					head:[{field:"设备品牌", width:164},
						{field:"MAC地址", width:230},
						{field:"连接时间", width:150}],
					list:[{name:"name", type:"str"},
						{name:"mac", type:"mac", maxSize:30},
						{name:"tip", type:"str"}]
				});
			}
			else
			{
				staDataGridLs.init({
					id:"staSelTable",
					data: staArray,
					max:WAC_MAX_WHITELIST_LEN,
					edit:false,
					paging:{num:8, page:1},
					checkIndex:1,
					head:[{field:"设备", width:164},
					{field:"MAC地址", width:230},
					{field:"IP地址", width:150}],
					list:[{name:"name", type:"host"},
					{name:"mac", type:"mac", maxSize:30},
					{name:"ip", type:"ip"}],
					selAllHd:selAllFunc
				});

				if (type == ADD_ONLINE_DEV_TO_WHITE_LIST)
				{
					/* 对本机进行特殊处理 */
					var childNodes = id("staSelTable").rows;
					for (var i = 1; i < childNodes.length; i++)
					{
						var checkbox = childNodes[i].cells[0].childNodes[0];
						if (checkbox == null)
						{
							continue;
						}

						if (childNodes[i].style.display != "none")
						{
							var name = childNodes[i].cells[1].title; /* 从title提示中获取值.*/
							var mac = childNodes[i].cells[2].title; /* 从title提示中获取值.*/

							if (mac.toUpperCase() == curItem.mac.toUpperCase())
							{
								childNodes[i].cells[1].innerHTML = name + "（本机）";
								checkbox.checked  = true;
								checkbox.disabled = true;
							}
						}
					}
				}
			}
		}

		/* 创建通过MAC添加方式的弹窗内容 */
		function createAddByMacContent(type)
		{
			var eptCon, eptTitle, eptAddByListTitle, eptSwitchAddTypeBtn, eptTip, tableDiv, table, bankTip, warnTip, iWarn, divFunc, eptWarn, inputBtn;
			var divCon = id("showStaDiv")
			var staDataGridLs = new DataGrid();

			eptCon = document.createElement("div");
			eptCon.className = "eptConWrapper disNone addByMac";
			eptCon.id = "eptConWindow";
			divCon.appendChild(eptCon);

			eptTitle = document.createElement("div");
			eptTitle.className = "eptConTitle";
			eptCon.appendChild(eptTitle);

			eptAddByListTitle = document.createElement("label");
			eptAddByListTitle.className = "title";
			eptAddByListTitle.innerHTML = label.addByMac;
			eptTitle.appendChild(eptAddByListTitle);

			eptSwitchAddTypeBtn = document.createElement("span");
			eptSwitchAddTypeBtn.className = "textBtn";
			eptSwitchAddTypeBtn.innerHTML = btn.addByList;
			eptSwitchAddTypeBtn.onclick = switchToAddByList;
			eptTitle.appendChild(eptSwitchAddTypeBtn);

			eptGridHead = document.createElement("div");
			eptGridHead.className = "eptConGridHead";
			eptCon.appendChild(eptGridHead);

			eptTip = document.createElement("h1");
			eptTip.className = "eptSelTip";
			eptTip.innerHTML = type == ADD_BLOCK_DEV_TO_WHITE_LIST ? label.addToWhiteListByMac : label.addToBlackListByMac;
			eptGridHead.appendChild(eptTip);

			eptForm = document.createElement("ul");
			eptForm.className = "eptForm";
			eptCon.appendChild(eptForm);

			/* 主机名表单项 */
			eptFormItem = document.createElement("li");
			eptFormItem.className = "eptFormItem";
			eptForm.appendChild(eptFormItem);

			eptLabel = document.createElement("label");
			eptLabel.className = "label"
			eptLabel.innerHTML = label.host;
			eptFormItem.appendChild(eptLabel);

			eptInput = document.createElement("input");
			eptInput.id = "nameInput"
			eptFormItem.appendChild(eptInput);

			warnTip = document.createElement("span");
			warnTip.className = "eptFullWarn";
			warnTip.id = "nameFullWarn";
			eptFormItem.appendChild(warnTip);

			/* MAC地址表单项 */
			eptFormItem = document.createElement("li");
			eptFormItem.className = "eptFormItem";
			eptForm.appendChild(eptFormItem);

			eptLabel = document.createElement("label");
			eptLabel.className = "label"
			eptLabel.innerHTML = label.mac;
			eptFormItem.appendChild(eptLabel);

			eptInput = document.createElement("input");
			eptInput.id = "macInput"
			eptFormItem.appendChild(eptInput);

			warnTip = document.createElement("span");
			warnTip.className = "eptFullWarn";
			warnTip.id = "macFullWarn";
			eptFormItem.appendChild(warnTip);

			divFunc = document.createElement("div");
			divFunc.className = "blockFuncEpt";
			eptCon.appendChild(divFunc);

			inputBtn = document.createElement("input");
			inputBtn.type = "button";
			inputBtn.className = "btnA subBtn";
			inputBtn.value = "确定";
			inputBtn.onclick = type == ADD_BLOCK_DEV_TO_WHITE_LIST ? addWhiteListDevByMac : addBlackListDevByMac;
			divFunc.appendChild(inputBtn);

			inputBtn = document.createElement("input");
			inputBtn.type = "button";
			inputBtn.className = "btnA subBtn";
			inputBtn.value = "取消";
			inputBtn.onclick = staListSelCancel;
			divFunc.appendChild(inputBtn);
		}

		/* 判断选择框是否要处理 */
		function selAllFunc(index, callback)
		{
			var childNodes = id("staSelTable").rows;
			var tr = childNodes[index];

			if (tr.style.display != "none" && tr.cells[2] != null)
			{
				var mac = (tr.cells[2].title != "" ? tr.cells[2].title : tr.cells[2].innerHTML);
				callback(!(mac == curItem.mac));
			}
			else
			{
				callback(true);
			}
		}

		/* 添加连接设备选择确定按钮响应 */
		function staListSelConfirm(type)
		{
			selStaIndex = 0;
			staSelArray.length = 0;

			var childNodes = id("staSelTable").rows, checkbox, cells;
			var childLen = childNodes.length;
			for (var index = 1; index < childLen; index++)
			{
				cells = childNodes[index].cells;
				checkbox = cells[0].childNodes[0];

				if (null == checkbox)
				{
					continue;
				}
				else if (true == checkbox.checked)
				{
					var name = staArray[childLen - index - 1].name;
					var mac  = staArray[childLen - index - 1].mac;
					var item = {};

					name = name.replace(/^\s+|\s+$/g,"");
					mac  = String(mac.match(/([0-9a-f]{2}-){5}([0-9a-f]{2})+/gi));
					if (mac && mac != "" &&
						(type == ADD_ONLINE_DEV_TO_BLACK_LIST && !isInBl(mac) ||
						type == ADD_ONLINE_DEV_TO_WHITE_LIST && !isInWl(mac))){
						item["name"] = name;
						item["mac"] = mac;
						staSelArray.push(item);
					}
				}
			}

			if (staSelArray.length + blArray.length > WAC_MAX_BLACKLIST_LEN)
			{
				id("listFullWarn").style.display = "block";
				return;
			}
			else
			{
				id("listFullWarn").style.display = "none";
			}

			/* 关闭选择设备添加列表 */
			staListSelCancel();

			if (0 != staSelArray.length)
			{
				showLoading(label.savingCfg, undefined, undefined, false);
				if (type == ADD_ONLINE_DEV_TO_BLACK_LIST)
				{
					addBl();
				}
				else if (type == ADD_ONLINE_DEV_TO_WHITE_LIST)
				{
					addWl(false, function(){
						sendRadioChangeData("on", WHITE_LIST_POLICY);
					});
				}
			}
			else
			{
				if (type == ADD_ONLINE_DEV_TO_WHITE_LIST)
				{
					sendRadioChangeData("on", WHITE_LIST_POLICY);
				}
			}
		}

		/* 从被阻止设备列表添加白名单设备保存响应 */
		function blockedStaListSelConfirm()
		{
			selStaIndex = 0;
			staSelArray.length = 0;

			var childNodes = id("staSelTable").rows, checkbox, cells;
			var childLen = childNodes.length;
			for (var index = 1; index < childLen; index++)
			{
				cells = childNodes[index].cells;
				checkbox = cells[0].childNodes[0];

				if (null == checkbox)
				{
					continue;
				}
				else if (true == checkbox.checked)
				{
					var name = staArray[childLen - index - 1].name;
					var mac  = staArray[childLen - index - 1].mac;
					var item = {};

					name = "";
					mac  = String(mac.match(/([0-9a-f]{2}-){5}([0-9a-f]{2})+/gi));
					if (mac && mac != "" && !isInWl(mac)){
						item["name"] = name;
						item["mac"] = mac;
						staSelArray.push(item);
					}
				}
			}

			if (staSelArray.length + wlArray.length > WAC_MAX_WHITELIST_LEN)
			{
				id("listFullWarn").style.display = "block";
				return;
			}
			else
			{
				id("listFullWarn").style.display = "none";
			}

			/* 关闭选择设备添加列表 */
			staListSelCancel();

			if (0 != staSelArray.length)
			{
				showLoading(label.savingCfg, undefined, undefined, false);
				addWl();
			}
		}

		/* 通过MAC添加白名单设备 */
		function addWhiteListDevByMac(){
			var name = $("#nameInput").val();
			var mac = $("#macInput").val();

			if (name == "")
			{
				$("#nameFullWarn").html("<i></i>" + errStr.nameEmptyErr).css("display", "inline-block");
				return;
			}
			else
			{
				$("#nameFullWarn").hide();
			}

			var macValid = checkMac(mac);
			var macErrStr;

			if (macValid != ENONE)
			{
				switch(macValid)
				{
					case EINVMACZERO:
						macErrStr = errStr.macZeroErr;
						break;
					case EINVMACBROAD:
						macErrStr = errStr.macBroadErr;
						break;
					case EINVMACGROUP:
						macErrStr = errStr.macGroupErr;
						break;
					case EINVMACFMT:
					default:
						macErrStr = errStr.macFmtErr2;
						break;
				}

				$("#macFullWarn").html("<i></i>" + macErrStr).css("display", "inline-block");
				return;
			}
			else
			{
				$("#macFullWarn").hide();
			}

			if (isInWl(mac))
			{
				$("#macFullWarn").html("<i></i>" + errStr.macExistErr).css("display", "inline-block");
				return;
			}
			else
			{
				$("#macFullWarn").hide();
			}

			selStaIndex = 0;
			staSelArray.length = 0;

			host = {
				name: name,
				mac: mac
			};
			staSelArray.push(host);

			showLoading(label.savingCfg, undefined, undefined, false);
			addWl(true);
		}

		/* 通过MAC添加黑名单设备 */
		function addBlackListDevByMac(){
			var name = $("#nameInput").val();
			var mac = $("#macInput").val();

			if (name == "") {
				$("#nameFullWarn").html("<i></i>" + errStr.nameEmptyErr).css("display", "inline-block");
				return;
			}
			else
			{
				$("#nameFullWarn").hide();
			}

			var macValid = checkMac(mac);
			var macErrStr;

			if (macValid != ENONE)
			{
				switch(macValid)
				{
					case EINVMACZERO:
						macErrStr = errStr.macZeroErr;
						break;
					case EINVMACBROAD:
						macErrStr = errStr.macBroadErr;
						break;
					case EINVMACGROUP:
						macErrStr = errStr.macGroupErr;
						break;
					case EINVMACFMT:
					default:
						macErrStr = errStr.macFmtErr2;
						break;
				}

				$("#macFullWarn").html("<i></i>" + macErrStr).css("display", "inline-block");
				return;
			}
			else
			{
				$("#macFullWarn").hide();
			}

			if (isInBl(mac))
			{
				$("#macFullWarn").html("<i></i>" + errStr.macExistErr).css("display", "inline-block");
				return;
			}
			else
			{
				$("#macFullWarn").hide();
			}

			staSelArray.length = 0;

			host = {
				name: name,
				mac: mac
			};
			staSelArray.push(host);

			showLoading(label.savingCfg, undefined, undefined, false);
			addBl(true);
		}

		/* 关闭选择框 */
		function staListSelCancel()
		{
			var divCon = id("showStaDiv");

			hideCoverB(function(){
				divCon.style.visibility = "hidden";
				divCon.style.top = "-9999px";
				document.body.removeChild(divCon);
			});
		}

		/* 判断是否在黑名单列表里 */
		function isInBl(tmpMac)
		{
			if (blArray.length == 0)
			{
				return false;
			}

			for (var i = 0; i < blArray.length; i++)
			{
				if (tmpMac.toUpperCase() == blArray[i]["mac"].toUpperCase())
				{
					return true;
				}
			}
			return false;
		}

		/* 判断是否在白名单列表里 */
		function isInWl(tmpMac)
		{
			if (wlArray.length == 0)
			{
				return false;
			}

			for (var i = 0; i < wlArray.length; i++)
			{
				if (tmpMac.toUpperCase() == wlArray[i]["mac"].toUpperCase())
				{
					return true;
				}
			}
			return false;
		}

		/* 添加白名单设备 */
		function addWl(isAddByMac, callback)
		{
			if (selStaIndex < staSelArray.length)
			{
				var data = {}, reqTable = {}, reqPara = {};

				data[uciCustomNetwork.fileName] = reqTable;
				reqTable[KEY_TABLE]= uciCustomNetwork.dynData.macFilterWhiteEntry;
				reqTable[KEY_NAME] = "white_" + staSelArray[selStaIndex]["mac"].replace(/-/g, "").toLowerCase();
				reqTable[KEY_PARA] = reqPara;
				reqPara["hostname"] = staSelArray[selStaIndex]["name"];
				reqPara["mac"] = staSelArray[selStaIndex]["mac"].toUpperCase();
				reqPara["enable"] = "on";
				reqPara["owner"] = uciCustomNetwork.optValue.owner.web;
				reqPara[uciCustomNetwork.optName.accessRight] = uciCustomNetwork.optValue.accessRight.allAllow;

				$.add(data, function(rspAdd){
					if (isAddByMac)
					{
						var showStr;
						switch (rspAdd[ERR_CODE])
						{
						case ENONE:
							/* 关闭弹窗 */
							staListSelCancel();
							closeLoading();

							bEptGetData();
							return;
						case EINVMACFMT:
							showStr = errStr.macFmtErr2;
							break;
						case EINVMACZERO:
							showStr = errStr.macZeroErr;
							break;
						case EINVMACBROAD:
							showStr = errStr.macBroadErr;
							break;
						case EINVMACGROUP:
							showStr = errStr.macGroupErr;
							break;
						default:
							showStr = errStr.invRequestFail;
							showAlert(showStr);
							return;
						}

						$("#macFullWarn").html("<i></i>" + showStr).css("display", "inline-block");
						closeLoading();
					}
					else
					{
						$("#macFullWarn").hide();

						if (errHandle(rspAdd[ERR_CODE]))
						{
							selStaIndex++;
							addWl(false, callback);
						}
						else
						{
							closeLoading();
							bEptGetData();
							return;
						}
					}
				});
			}
			else
			{
				closeLoading();
				bEptGetData();

				if (typeof callback == 'function')
				{
					callback();
				}
			}
		}

		/* 添加黑名单设备 */
		function addBl(isAddByMac)
		{
			if (selStaIndex < staSelArray.length)
			{
				var data = {}, reqTable = {}, reqPara = {};

				data[uciCustomNetwork.fileName] = reqTable;
				reqTable[KEY_TABLE]= uciCustomNetwork.dynData.macFilterBlackEntry;
				reqTable[KEY_NAME] = "black_" + staSelArray[selStaIndex]["mac"].replace(/-/g, "").toLowerCase();
				reqTable[KEY_PARA] = reqPara;
				reqPara["hostname"] = staSelArray[selStaIndex]["name"];
				reqPara["mac"] = staSelArray[selStaIndex]["mac"].toUpperCase();
				reqPara["enable"] = "on";
				reqPara["owner"] = uciCustomNetwork.optValue.owner.web;
				reqPara[uciCustomNetwork.optName.accessRight] = uciCustomNetwork.optValue.accessRight.allForbid;

				$.add(data, function(rspAdd){
					if (isAddByMac)
					{
						var showStr;
						switch (rspAdd[ERR_CODE])
						{
						case ENONE:
							/* 关闭弹窗 */
							staListSelCancel();
							closeLoading();

							bEptGetData();
							return;
						case EINVMACFMT:
							showStr = errStr.macFmtErr2;
							break;
						case EINVMACZERO:
							showStr = errStr.macZeroErr;
							break;
						case EINVMACBROAD:
							showStr = errStr.macBroadErr;
							break;
						case EINVMACGROUP:
							showStr = errStr.macGroupErr;
							break;
						default:
							showStr = errStr.invRequestFail;
							showAlert(showStr);
							return;
						}

						$("#macFullWarn").html("<i></i>" + showStr).css("display", "inline-block");
						closeLoading();
					}
					else
					{
						$("#macFullWarn").hide();

						if (errHandle(rspAdd[ERR_CODE]))
						{
							selStaIndex++;
							addBl();
						}
						else
						{
							closeLoading();
							bEptGetData();
							return;
						}
					}
				});
			}
			else
			{
				closeLoading();
				bEptGetData();
			}
		}

		function bMenuClickHd(url)
		{
			curUrl = url;
			if ("wifiHost" == url)
			{
				bMenuHostC();
			}
			else if ("bGuestEpt" == url)
			{
				bMenuGuestC();
			}
			else if ("limitedEpt" == url)
			{
				bMenuForbidC();
			}
		}

		/* 刷新连接的相关信息和对应的显示列表 */
		function bEptGetData()
		{
			window.clearTimeout(refreshDataHandle);

			if ((beEdit == false) && (bSavingData == false))
			{
				// DONE: 读取数据并赋值给epStaList
				if (currentRouter == 0 || curUrl == "limitedEpt")
				{
					getHostInfo(setLocalHostInfo);
				}
				else
				{
					getSpecRouterHostInfo(setSpecRouterHostInfo);
				}
			}

			refreshDataHandle = $.setTimeout(bEptGetData, POLL_TIME);
		}

		/* 获取主机信息 */
		function getHostInfo(callback)
		{
			var data = {};
			data[uciHostsInfo.fileName] = {};
			data[uciHostsInfo.fileName][KEY_TABLE] = uciHostsInfo.dynData.host_info;
			data[uciHostsInfo.fileName][KEY_NAME] = uciHostsInfo.dynData.capHostNum;

			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = uciNetwork.dynData.ifaceMac;

			data[uciPlc.fileName] = {};
			data[uciPlc.fileName][KEY_TABLE] = [uciPlc.secType.connectedExt];

			if (gMacFilterSupport)
			{
				data[uciCustomNetwork.fileName] = {};
				data[uciCustomNetwork.fileName][KEY_TABLE] = [uciCustomNetwork.dynData.macFilterBlackEntry, uciCustomNetwork.dynData.macFilterWhiteEntry];
			}

			$.query(data, callback, true);
		}

		/* 获取主机信息 */
		function getSpecRouterHostInfo(callback)
		{
			var data = {};
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = uciNetwork.dynData.ifaceMac;

			data[uciHostsInfo.fileName] = {};
			data[uciHostsInfo.fileName][KEY_NAME] = uciHostsInfo.dynData.capHostNum;

			data[uciPlc.fileName] = {};
			data[uciPlc.fileName][KEY_TABLE] = [uciPlc.secType.connectedExt];

			$.query(data, function (result) {
				if (ENONE == result[ERR_CODE])
				{
					localInfo = result[uciNetwork.fileName][uciNetwork.dynData.ifaceMac]["host"];
				}

				extList = formatTableData(result[uciPlc.fileName][uciPlc.secType.connectedExt]);

				var hostNum = 0;
				var guestNum = 0;
				linkEptNumObj = [];
				routerOptions.splice(0, routerOptions.length);
				routerOptions.push({str:"全部",value:0});
				count = curEptType == EPT_TYPE_HOST ? result[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["host_num"] : result[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["guest_num"];
				routerOptions.push({str:getSubString(capRouterName), title:capRouterName, value:1, staCount:count});
				hostNum = hostNum + result[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["host_num"];
				guestNum = guestNum + result[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["guest_num"];
				linkEptNumObj.push([hostNum,guestNum]);

				for (var i = 0; i < extList.length; i++)
				{
					var extName = getSubString(extList[i].name) || "子路由";
					var val = i + 2;
					var count = curEptType == EPT_TYPE_HOST ? extList[i].sta_num_host : extList[i].sta_num_guest;
					routerOptions.push({str:extName, title:extList[i].name, value:val, staCount:count});
					hostNum =  extList[i].sta_num_host;
					guestNum = extList[i].sta_num_guest;
					linkEptNumObj.push([hostNum,guestNum]);
				}

				data = {};
				data[uciHostsInfo.fileName] = {};
				if (currentRouter == 1)
				{
					data[uciHostsInfo.fileName]["get_cap_host"] = null;
				}
				else
				{
					data[uciHostsInfo.fileName]["get_ext_host"] = {};
					data[uciHostsInfo.fileName]["get_ext_host"]["mac"] = extList[currentRouter-2].mac;
				}

				$.action(data, callback, true);
			}, true);

		}

		function getGuestNetworkCfg(fCallback)
		{
			var data = {};

			data[uciGuestNet.fileName] = {};
			data[uciGuestNet.fileName][KEY_TABLE] = uciGuestNet.secType.guest;
			$.query(data, fCallback);
		}

		function getGuestNewtorkInfo(callback)
		{
			getGuestNetworkCfg(function(resp){
				var enable2G = false;
				var enable5G = false;
				var enabled = false;
				var data_tbl;
				var data = {};

				if ($.local)
				{
					enable2G = true;
					enable5G = true;
					callback((enable2G || enable5G));
					return;
				}

				try
				{
					if ((resp[uciGuestNet.fileName] == null)
					|| (resp[uciGuestNet.fileName][uciGuestNet.secType.guest] == null))
					{
						enable2G = false;
						enable5G = false;

						callback((enable2G || enable5G));
						return;
					}

					data_tbl = resp[uciGuestNet.fileName][uciGuestNet.secType.guest];

					for (var data_idx in data_tbl)
					{
						if (data_tbl[data_idx][uciGuestNet.secName.wireless2G])
						{
							data[uciGuestNet.secName.wireless2G] = data_tbl[data_idx][uciGuestNet.secName.wireless2G];
						}

						if (data_tbl[data_idx][uciGuestNet.secName.wireless5G])
						{
							data[uciGuestNet.secName.wireless5G] = data_tbl[data_idx][uciGuestNet.secName.wireless5G];
						}
					}

					if (null == data[uciGuestNet.secName.wireless2G])
					{
						enable2G = false;
					}
					else
					{
						enabled = data[uciGuestNet.secName.wireless2G][uciGuestNet.optName.enable];
						enable2G = (enabled == ENABLED) ? true : false;
					}

					if (null == data[uciGuestNet.secName.wireless5G])
					{
						enable5G = false;
					}
					else
					{
						enabled = data[uciGuestNet.secName.wireless5G][uciGuestNet.optName.enable];
						enable5G = (enabled == ENABLED) ? true : false;
					}
				}catch(ex){}

				callback((enable2G || enable5G));
			});
		}

		/* 主人菜单点击的响应函数 */
		function bMenuHostC()
		{
			id("eptMngConTitle").style.display = "block";
			id("routerSelLi").style.display = "block";
			id("eptMngList").style.display = "block";
			id("eptMngDetail").style.display = "none";
			if (gMacFilterSupport)
			{
				id("eptMngListTitle").style.display = "none";
				id("blackWhiteListSwitchBlock").style.display = "none";
			}
			curEptType = gEptType = EPT_TYPE_HOST;
			beEdit = false;
			bEptGetData();
		}

		/* 已禁用菜单点击的响应函数 */
		function bMenuForbidC()
		{
			if (gMacFilterSupport)
			{
				if (oldPolicy == NOT_MAC_FILTER_POLICY)
				{
					$("#deviceNum").text(label.blackWhiteListSwitch);
					id("eptMngConTitle").style.display = "block";
					id("routerSelLi").style.display = "none";
					id("eptMngList").style.display = "none";
					id("eptMngListTitle").style.display = "none";
					id("eptMngDetail").style.display = "none";
					id("blackWhiteListSwitchBlock").style.display = "block";
					id("blackListOn").checked = false;
					id("whiteListOn").checked = false;
					id("off").checked = true;
					gEptType = EPT_TYPE_LIST_OFF;
					beEdit = false;
				}
				else
				{
					var titleStr = oldPolicy == BLACK_LIST_POLICY ? label.blackListTitle : label.whiteListTitle;

					id("eptMngConTitle").style.display = "block";
					id("routerSelLi").style.display = "none";
					id("eptMngList").style.display = "block";
					id("eptMngListTitle").style.display = "block";
					id("eptMngDetail").style.display = "none";
					id("blackWhiteListSwitchBlock").style.display = "block";
					id("blackListOn").checked = oldPolicy == BLACK_LIST_POLICY;
					id("whiteListOn").checked = oldPolicy == WHITE_LIST_POLICY;
					$("#eptMngListTitle .title").text(titleStr);
					gEptType = oldPolicy == BLACK_LIST_POLICY ? EPT_TYPE_BLACK_LIST : EPT_TYPE_WHITE_LIST;
					beEdit = false;
					bEptGetData();
				}

				/* andlink协议下发白名单时，不允许修改黑白名单模式 */
				if (owner == uciCustomNetwork.optValue.owner.andlink &&
					oldPolicy == WHITE_LIST_POLICY)
				{
					disableSwitchBlock();
				}
			}
			else
			{
				id("eptMngConTitle").style.display = "block";
				id("routerSelLi").style.display = "none";
				id("eptMngList").style.display = "block";
				id("eptMngDetail").style.display = "none";
				gEptType = EPT_TYPE_FORBID;
				beEdit = false;
				bEptGetData();
			}
		}

		/* 访客菜单点击的响应函数 */
		function bMenuGuestC()
		{
			id("eptMngConTitle").style.display = "block";
			id("routerSelLi").style.display = "block";
			id("eptMngList").style.display = "block";
			id("eptMngDetail").style.display = "none";
			if (gMacFilterSupport)
			{
				id("eptMngListTitle").style.display = "none";
				id("blackWhiteListSwitchBlock").style.display = "none";
			}
			curEptType = gEptType = EPT_TYPE_GUEST;
			beEdit = false;
			bEptGetData();
		}

		/* 编辑设备详细信息的响应函数 */
		function bMenuEptDetail()
		{
			id("eptMngConTitle").style.display = "none";
			id("eptMngList").style.display = "none";
			id("eptMngDetail").style.display = "block";
			/* netControlPanelDis(false); */
			gEptType = EPT_TYPE_DETAIL;
			bEptGetData();
		}

		/* 主人数据列的过滤函数 */
		function bEptHostFilter(item)
		{
			/* 显示未禁用的非访客网络设备（有线+主人）以及禁用的全部设备 */
			if ((item[BLOCKED] == epTypes.unBlock && item.type != epTypes.wirelessG) ||
				item[BLOCKED] == epTypes.block)
			{
				return true;
			}

			return false;
		}

		/* 访客数据列的过滤函数 */
		function bEptGuestFilter(item)
		{
			/* 显示未禁用的访客网络设备以及禁用的全部设备 */
			if ((item[BLOCKED] == epTypes.unBlock && item.type == epTypes.wirelessG) ||
				item[BLOCKED] == epTypes.block)
			{
				return true;
			}

			return false;
		}

		/* 黑名单设备列表过滤函数 */
		function bEptBlackListFilter(item)
		{
			if (item["owner"] == uciCustomNetwork.optValue.owner.web &&
				item[".name"].indexOf("black") > -1) {
				return true;
			}

			return false;
		}

		/* 白名单设备列表过滤函数 */
		function bEptWhiteListFilter(item)
		{
			if (item["owner"] == uciCustomNetwork.optValue.owner.web &&
				item[".name"].indexOf("white") > -1) {
				return true;
			}

			return false;
		}

		/* 已禁用数据列的过滤函数 */
		function bEptForbidFilter(item)
		{
			if (item.blocked == epTypes.block)
			{
				return true;
			}

			return false;
		}

		/* 主人列表的刷新 */
		function bMenuHostRefresh()
		{
			/* 刷新设备数量 */
			refreshDevNum();
			eptListCreate(EPT_TYPE_HOST);
		}

		/* 访客列表的刷新 */
		function bMenuGuestRefresh()
		{
			/* 刷新设备数量 */
			refreshDevNum();
			eptListCreate(EPT_TYPE_GUEST);
		}

		/* 已禁用设备列的刷新 */
		function bMenuForbidRefresh()
		{
			/* 刷新设备数量 */
			refreshDevNum();
			eptListCreate(EPT_TYPE_FORBID);
		}

		/* 黑名单设备列表的刷新 */
		function bMenuBlackListRefresh()
		{
			/* 刷新设备数量 */
			refreshDevNum();
			eptListCreate(EPT_TYPE_BLACK_LIST);
		}

		/* 白名单设备列表的刷新 */
		function bMenuWhiteListRefresh()
		{
			/* 刷新设备数量 */
			refreshDevNum();
			eptListCreate(EPT_TYPE_WHITE_LIST);
		}

		/* 黑白名单关闭时的刷新 */
		function bEptListOffRefresh()
		{
			$("#deviceNum").text(label.blackWhiteListSwitch);
		}

		/* 设备详细信息刷新*/
		function bEptDetailRefresh()
		{
			if (!gEditItem) {
				return;
			}

			gEditItem = findHostItemByKey(gEditItem[MAC]);

			if (!gEditItem) {
				return;
			}

			bEptLinkBandSearch(gEditItem);
			eptDetailCreate(gEditItem);
		}

		function findHostItemByKey(mac)
		{
			var hostItem = null;

			for (var i = 0; i < epStaList.length; i++) {
				var item = epStaList[i];

				if (item[MAC] == mac)
				{
					hostItem = item;
					break;
				}
			}

			return hostItem;
		}

		/* 刷新设备数量 */
		function refreshDevNum()
		{
			/* 刷新已连设备个数 */
			var headStr = label.linkedEpt;
			var devNum = 0;

			if (gMacFilterSupport)
			{
				if (EPT_TYPE_BLACK_LIST == gEptType ||
					EPT_TYPE_WHITE_LIST == gEptType)
				{
					$("#deviceNum").text(label.blackWhiteListSwitch);
				}
				else
				{
					for (var i = 0; i < curTypeStaList.length; i++)
					{
						if (curTypeStaList[i][BLOCKED] != epTypes.block)
						{
							devNum++;
						}
					}

					$("#deviceNum").text(headStr + devNum + label.entry);
				}
			}
			else
			{
				if (EPT_TYPE_FORBID == gEptType)
				{
					headStr = label.limitedEpt;
					devNum = curTypeStaList.length;
				}
				else
				{
					for (var i = 0; i < curTypeStaList.length; i++)
					{
						if (curTypeStaList[i][BLOCKED] != epTypes.block)
						{
							devNum++;
						}
					}
				}

				$("#deviceNum").text(headStr + devNum + label.entry);
			}

			/* 刷新设备管理框右上角数字 */
			var totalNum = getSumOfArray(linkEptNumObj);
			bEquipLinkedNumSet(totalNum);
		}

		function setLocalHostInfo(resp)
		{
			var data;
			var hostNum = 0;
			var guestNum = 0;
			linkEptNumObj = [];

			if ((resp == null)
					|| (resp[uciHostsInfo.fileName] == null)
					|| (resp[uciHostsInfo.fileName][uciHostsInfo.dynData.host_info] == null))
			{
				return;
			}

			if (ENONE == resp[ERR_CODE])
			{
				localInfo = resp[uciNetwork.fileName][uciNetwork.dynData.ifaceMac]["host"];
			}

			data = formatTableData(resp[uciHostsInfo.fileName][uciHostsInfo.dynData.host_info]);

			if (gMacFilterSupport)
			{
				blArray = formatTableData(resp[uciCustomNetwork.fileName][uciCustomNetwork.dynData.macFilterBlackEntry]);
				wlArray = formatTableData(resp[uciCustomNetwork.fileName][uciCustomNetwork.dynData.macFilterWhiteEntry]);
			}

			extList = formatTableData(resp[uciPlc.fileName][uciPlc.secType.connectedExt]);

			routerOptions.splice(0, routerOptions.length);
			routerOptions.push({str:"全部",value:0});
			count = curEptType == EPT_TYPE_HOST ? resp[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["host_num"] : resp[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["guest_num"];
			routerOptions.push({str:getSubString(capRouterName), title:capRouterName, value:1, staCount:count});
			hostNum = hostNum + resp[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["host_num"];
			guestNum = guestNum + resp[uciHostsInfo.fileName][uciHostsInfo.dynData.capHostNum]["guest_num"];
			linkEptNumObj.push([hostNum,guestNum]);

			for (var i = 0; i < extList.length; i++)
			{
				var extName = getSubString(extList[i].name) || "子路由";
				var val = i + 2;
				var count = curEptType == EPT_TYPE_HOST ? extList[i].sta_num_host : extList[i].sta_num_guest;
				routerOptions.push({str:extName, title:extList[i].name, value:val, staCount:count});
				hostNum = extList[i].sta_num_host;
				guestNum = extList[i].sta_num_guest;
				linkEptNumObj.push([hostNum,guestNum]);
			}

			if (beEdit || bSavingData)
			{
				return;
			}

			if (gMacFilterSupport)
			{
				epStaList = data.concat(blArray, wlArray);
			}
			else
			{
				epStaList = data;
			}

			switch (gEptType) {
				case EPT_TYPE_HOST:
					curTypeStaList = bEptFilterList(bEptHostFilter);
					break;
				case EPT_TYPE_GUEST:
					curTypeStaList = bEptFilterList(bEptGuestFilter);
					break;
				case EPT_TYPE_FORBID:
					curTypeStaList = bEptFilterList(bEptForbidFilter);
					break;
				case EPT_TYPE_BLACK_LIST:
					curTypeStaList = bEptFilterList(bEptBlackListFilter);
					break;
				case EPT_TYPE_WHITE_LIST:
					curTypeStaList = bEptFilterList(bEptWhiteListFilter);
					break;
				default:
					break;
			}

			/* 刷新页面 */
			menuRefreshMap[gEptType]();
		}

		function setSpecRouterHostInfo(resp)
		{
			var data;

			if ((resp == null) || (resp[uciHostsInfo.fileName] == null))
			{
				return;
			}

			if (currentRouter == 1)
			{
				data = formatTableData(resp[uciHostsInfo.fileName]["get_cap_host"]);
			}
			else
			{
				data = formatTableData(resp[uciHostsInfo.fileName]["get_ext_host"]);
			}

			if (beEdit || bSavingData)
			{
				return;
			}

			epStaList = data;

			switch (gEptType) {
				case EPT_TYPE_HOST:
					curTypeStaList = bEptFilterList(bEptHostFilter);
					break;
				case EPT_TYPE_GUEST:
					curTypeStaList = bEptFilterList(bEptGuestFilter);
					break;
				default:
					break;
			}

			/* 刷新页面 */
			menuRefreshMap[gEptType]();
		}

		function sortByIP(pre, next)
		{
			var ipPreArr = pre.ip.split(".");
			var ipNextArr = next.ip.split(".");

			for (var i = 0; i < 4; i++)
			{
				if (parseInt(ipPreArr[i], 10) == parseInt(ipNextArr[i], 10))
				{
					continue;
				}

				if (parseInt(ipPreArr[i], 10) > parseInt(ipNextArr[i], 10))
				{
					return 1;
				}
				else
				{
					return -1;
				}
			}

			return 0;
		}

		/* 数据列的过滤函数 */
		function bEptFilterList(callback)
		{
			var resultList = [];
			var meshList = [];
			var blockList = [];
			var item, mac;
			var forbidNum = 0;
			var hostNum = 0;
			var guestNum = 0;
			var totalNum = 0;
			var localItem;

			for (var index in epStaList)
			{
				item = epStaList[index];
				mac = item[MAC];

				if (mac.length == 0 || mac == "00-00-00-00-00-00")
				{
					break;
				}

				/* 允许连接设备并且在线*/
				if (item[BLOCKED] == epTypes.unBlock)
				{
					/* 主人设备 */
					if (item.type == epTypes.inet ||
						item.type == epTypes.wirelessH)
					{
						hostNum++;
					}
					else	/* 访客设备 */
					{
						guestNum++;
					}
				}
				else	/* 禁用设备 */
				{
					forbidNum++;
				}

				bEptLinkBandSearch(item);

				if (typeof callback == "function" && callback(item) == true)
				{
					if (localInfo == mac)
					{
						item[IS_CUR_HOST] = CUR_HOST_YES;
						localItem = item;
					}
					else if (item.is_mesh && item.is_mesh == "1") {
						meshList.push(item);
					}
					else if (item[BLOCKED] == epTypes.block)
					{
						blockList.push(item);
					}
					else
					{
						resultList.push(item);
					}
				}
			}

			if (!gMacFilterSupport ||
				(gMacFilterSupport && gEptType != EPT_TYPE_BLACK_LIST && gEptType != EPT_TYPE_WHITE_LIST && gEptType != EPT_TYPE_LIST_OFF))
			{
				meshList.sort(sortByIP);
				resultList.sort(sortByIP);
			}

			/* 本机信息放在第一列 */
			if (undefined != localItem)
			{
				resultList.unshift(localItem);
			}

			/* Mesh组网设备放在最前面 */
			for (var i = meshList.length - 1; i >= 0; i--) {
				resultList.unshift(meshList[i]);
			}

			/* 禁用设备放在最后面 */
			for (var i = 0; i < blockList.length; i++)
			{
				resultList.push(blockList[i]);
			}

			return resultList;
		}

		function bEquipLinkedNumSet(num)
		{
			if(num > 99){
				routeMgtTag.css("background","url(../web-static/images/hint_long_orange.png");
				routeMgtTag.css("display","inline-block");
				routeMgtTag.css('width','62px');
				routeMgtTag.css('line-height','32px');
				routeMgtTag.css('height','32px');
				routeMgtTag.css('left','132px');
			}
			routeMgtTag.html(num);
		}

		function getSumOfArray(linkEptNumObj)
		{
			var totalNum = 0;

			for (var i = 0; i < linkEptNumObj.length; i++)
			{
				totalNum += (parseInt(linkEptNumObj[i][0]) + parseInt(linkEptNumObj[i][1]));
			}

			return totalNum;
		}

		/* 查询设备的品牌信息 */
		function bEptLinkBandSearch(item)
		{
			var bandArr = MacFactoryArr;
			var len = bandArr.length - 2;
			var macItem, taItem = bandArr[len + 1];
			var mac = (item.mac).substring(0, 8).toUpperCase();
			var re = /:/g;
			var macStr;

			mac = mac.replace(re, "-");
			for (var i = 0; i < len; i++)
			{
				macItem = bandArr[i];

				if (item[TYPE] == epTypes.inet)
				{
					taItem = bandArr[len];
					break;
				}
				else if ((undefined != (macStr = MacBrands[macItem.name])) && (macStr.indexOf(mac) >= 0))
				{
					taItem = macItem;
					break;
				}
			}

			item.posX = taItem.posX + "px";
			item.posY = taItem.posY + "px";
		}

		/* 创建设备管理的列表 */
		function eptListCreate(eptType)
		{
			var item, name, hostName, macFilterMode;
			var divC, divS, p, span, input, logo, logoShade, title, detail, div, qMark;
			var eptsCon = id("eptMngList");

			emptyNodes(eptsCon);

			// 刷新下拉列表
			if (currentRouter != 0)
			{
				routerOptions[currentRouter]['staCount'] = curTypeStaList.length;
			}

			id("routerSel").resetOptions(routerOptions, currentRouter);

			if (gMacFilterSupport)
			{
				if (gEptType == EPT_TYPE_BLACK_LIST)
				{
					macFilterMode = BLACK_LIST_POLICY;
				}
				else if (gEptType == EPT_TYPE_WHITE_LIST)
				{
					macFilterMode = WHITE_LIST_POLICY;
				}
				else
				{
					macFilterMode = NOT_MAC_FILTER_POLICY;
				}

				var head = document.createElement("p");
				head.className = "title";
				eptsCon.appendChild(head);

				if (gEptType == EPT_TYPE_WHITE_LIST)
				{
					var addBtn = $('<input id="addWhiteListDev" type="button" class="btnB subBtn" value="' + label.addWhiteListDev +'">');
					$(head).append(addBtn);
					$("#addWhiteListDev").click(showBlockedWindow);

					var devCount = $('<label id="devCount">' + label.whiteListDevNum + curTypeStaList.length + label.entry + '</label>');
					$(head).append(devCount);
				}
				else if (gEptType == EPT_TYPE_BLACK_LIST)
				{
					var addBtn = $('<input id="addBlackListDev" type="button" class="btnB subBtn" value="' + label.addBlackListDev +'">');
					$(head).append(addBtn);
					$("#addBlackListDev").click(function(){
						showStaWindow(ADD_ONLINE_DEV_TO_BLACK_LIST);
					});

					var devCount = $('<label id="devCount">' + label.blackListDevNum + curTypeStaList.length + label.entry + '</label>');
					$(head).append(devCount);
				}
			}

			for (var i = 0, len = curTypeStaList.length; i < len; i++)
			{
				item = curTypeStaList[i];

				divC = document.createElement("div");
				divC.className = "eptConC";
				eptsCon.appendChild(divC);

				div = document.createElement("div");
				div.className = "eptCon";
				divC.appendChild(div);

				/* title */
				title = document.createElement("pre");
				title.className = "name";

				if (g_cur_host_mac.toUpperCase() == item[MAC].toUpperCase())
				{
					item[IS_CUR_HOST] = true;
				}
				else
				{
					item[IS_CUR_HOST] = false;
				}

				name = "";
				width = 195
				if (EPT_TYPE_FORBID != eptType)
				{
					if (true == item[IS_CUR_HOST])
					{
						if ((parseInt(item[UP_LIMIT]) > 0 || parseInt(item[DOWN_LIMIT]) > 0))
						{
							width -= 95;
							name += label.lBrackets + label.bHost + label.slash + label.bLimit + label.rBrackets;
						}
						else
						{
							width -= 60;
							name = label.lBrackets + label.bHost + label.rBrackets;
						}
					}
					else
					{
						if ((parseInt(item[UP_LIMIT]) > 0 || parseInt(item[DOWN_LIMIT]) > 0))
						{
							width -= 60;
							name = label.lBrackets + label.bLimit + label.rBrackets;
						}
					}
				}

				hostName = item[HOSTNAME];
				if (undefined == hostName ||
					0 == hostName.length)
				{
					hostName = label.anonymousHost;
					item[HOSTNAME] = "";
				}

				title.innerHTML = '<span class="name" style="max-width:'+ width +'px">' +
								   htmlEscape(hostName) + '</span>' +
								  '<span>' + name + '</span>';
				div.appendChild(title);
				$(div).find("span.name").attr("title", hostName);

				/* detail */
				detail = document.createElement("p");
				detail.className = "vs";

				if (gMacFilterSupport)
				{
					if (macFilterMode == NOT_MAC_FILTER_POLICY)
					{
						if (!isHnatOpen)
						{
							detail.innerHTML = label.realTimeSpeed + label.colon + label.upSpeed + netSpeedTrans(item[UP_SPEED])
								+ "<span>" + label.downSpeed + netSpeedTrans(item[DOWN_SPEED]) + "</span>";
						}
					}
					else
					{
						detail.innerHTML = label.mac + label.colon + item[MAC].toUpperCase();
					}
				}
				else
				{
					if (!isHnatOpen)
					{
						if (item[BLOCKED] != BLOCKED_YES)
						{
							detail.innerHTML = label.realTimeSpeed + label.colon + label.upSpeed + netSpeedTrans(item[UP_SPEED])
									+ "<span>" + label.downSpeed + netSpeedTrans(item[DOWN_SPEED]) + "</span>";
						}
						else
						{
							detail.innerHTML = label.mac + label.colon + item[MAC].toUpperCase();
						}
					}
				}

				div.appendChild(detail);

				/* logo and logoShade */
				logo = document.createElement("i");
				if (item.is_mesh && item.is_mesh == "1") {
					logo.className = "logo router";
				} else {
					logo.className = "logo";
					logo.style.backgroundPosition = item.posX + " " + item.posY;
				}
				div.appendChild(logo);

				logoShade = document.createElement("i");
				logoShade.className = "logoShade";
				div.appendChild(logoShade);

				if (item.is_mesh && item.is_mesh == "1") {
					qMark = document.createElement("i");
					qMark.className = "qMark";
					qMark.onclick = function () {
						showConfirm(label.reorganizeNetworkTips, function(choose)
						{
							if (true == choose)
							{
								addChildRt(true);
							}
						}, btn.reorganizeNetwork, btn.notNow);
					};
					div.appendChild(qMark);
				}

				/* buttons con */
				divS = document.createElement("div");
				divS.className = "eptFunc";
				div.appendChild(divS);

				/* button manage */
				input = document.createElement("input");
				input.type = "button";
				input.className = "subBtn";
				input.value = btn.manage;
				if ((gMacFilterSupport && macFilterMode != NOT_MAC_FILTER_POLICY) ||
					(!gMacFilterSupport &&item[BLOCKED] == BLOCKED_YES))
				{
					input.style.display = "none";
				}
				input.onclick = (function(item){
					return function(){
						eptDetailEditClick(item);
					};
				})(item);
				divS.appendChild(input);

				/* func forbid */
				if (true != item[IS_CUR_HOST])
				{
					input = document.createElement("input");
					input.type = "button";
					input.className = "subBtn";
					input.value = btn.disableTile2;
					if ((gMacFilterSupport && (macFilterMode != NOT_MAC_FILTER_POLICY || oldPolicy != BLACK_LIST_POLICY)) ||
						(!gMacFilterSupport && item[BLOCKED] == BLOCKED_YES))
					{
						input.style.display = "none";
					}
					input.onclick = (function(item){
						return function(){
							showConfirm(label.limitPrompt,
								function(isConfirm)
								{
									if (isConfirm)
									{
										bEptBlockClick(item);
									}
								}
							);
						};
					})(item);
					divS.appendChild(input);
				}

				/* func enable */
				input = document.createElement("input");
				input.type = "button";
				input.className = "subBtn";
				input.value = btn.enableTile2;
				if ((gMacFilterSupport && macFilterMode != BLACK_LIST_POLICY) ||
					(!gMacFilterSupport && item[BLOCKED] != BLOCKED_YES))
				{
					input.style.display = "none";
				}
				input.onclick = (function(item){
					return function(){
						bEptHostUnblockClick(item);
					};
				})(item);
				divS.appendChild(input);

				/* func delete */
				if (gMacFilterSupport)
				{
					input = document.createElement("input");
					input.type = "button";
					input.className = "subBtn disNone";
					input.value = btn.del;
					if (item[IS_CUR_HOST] == false &&
						(macFilterMode == WHITE_LIST_POLICY ||
						(macFilterMode == NOT_MAC_FILTER_POLICY && oldPolicy == WHITE_LIST_POLICY)))
					{
						input.style.display = "inline";
					}
					input.onclick = (function(item){
						return function(){
							deleteWhiteListDev(item);
						};
					})(item);
					divS.appendChild(input);
				}
			}
		}

		function netSpeedTrans(speed)
		{
			//var kSpeed = 1024 / 8;
			var kSpeed = 1024;
			var mSpeed = kSpeed * 1024;
			var gSpeed = mSpeed * 1024;

			speed = parseInt(speed);

			if (speed >= gSpeed)
			{
				speed = (speed/gSpeed).toFixed(0) + "GB/s";
			}
			else if (speed >= mSpeed)
			{
				speed = (speed/mSpeed).toFixed(0) + "MB/s";
			}
			else
			{
				speed = (speed/kSpeed).toFixed(0) + "KB/s";
			}

			return speed.toString();
		}

		function setSavingFlg()
		{
			savingFlgSetTimes++;
			bSavingData = true;
		}

		function clrSavingFlg()
		{
			savingFlgSetTimes--;
			if (savingFlgSetTimes <= 0)
			{
				bSavingData = false;
			}
		}

		function isSaving()
		{
			return (savingFlgSetTimes > 0);
		}

		/* 禁用按钮 */
		function bEptBlockClick(item, callback)
		{
			switchHostBlockStatus(item, epTypes.block, callback);
		}

		/* 解禁按钮 */
		function bEptHostUnblockClick(item, callback)
		{
			switchHostBlockStatus(item, epTypes.unBlock, callback);
		}

		/* 白名单设备删除按钮 */
		function deleteWhiteListDev(item)
		{
			var confirmStr = label.deleteWhiteListDev + item.hostname + "？";
			showConfirm(confirmStr, function(result){
				var devKey;
				var data = {};
				if (result) {
					showLoading(statusStr.waiting, undefined, undefined, false);

					devKey = "white_" + item.mac.replace(/-/g, "").toLowerCase();
					data[uciCustomNetwork.fileName] = {};
					data[uciCustomNetwork.fileName][KEY_NAME] = devKey;
					$.del(data, function(result){
						if (result.error_code == ENONE)
						{
							item[".name"] = "";
							menuRefreshMap[gEptType]();
							closeLoading();
						}
					});
				}
			});
		}

		/* 禁用/解禁函数 */
		function switchHostBlockStatus(item, blockStatus, callback)
		{
			if (isSaving())
			{
				return;
			}

			var data = {};

			if (gMacFilterSupport)
			{
				var reqPara = {};

				data[uciCustomNetwork.fileName] = {};
				data[uciCustomNetwork.fileName][KEY_NAME] = "black_" + item.mac.replace(/-/g, "").toLowerCase();

				setSavingFlg();
				showLoading(statusStr.waiting, undefined, undefined, false);
				if (blockStatus == epTypes.unBlock) {
					$.del(data, function(){
						item[".name"] = "";
						menuRefreshMap[gEptType]();
						clrSavingFlg();
						closeLoading();

						if (callback && typeof callback == "function")
						{
							callback();
						}
					});
				}
				else
				{
					data[uciCustomNetwork.fileName][KEY_TABLE] = uciCustomNetwork.dynData.macFilterBlackEntry;
					data[uciCustomNetwork.fileName][KEY_PARA] = reqPara;
					reqPara["hostname"] = item[HOSTNAME];
					reqPara["mac"]  = item[MAC].toUpperCase();
					reqPara["enable"]  = "on";
					reqPara["owner"]  = uciCustomNetwork.optValue.owner.web;
					reqPara[uciCustomNetwork.optName.accessRight] = uciCustomNetwork.optValue.accessRight.allForbid;

					$.add(data, function(){
						item[BLOCKED] = blockStatus;
						menuRefreshMap[gEptType]();
						clrSavingFlg();
						closeLoading();

						if (callback && typeof callback == "function")
						{
							callback();
						}
					});
				}
			}
			else
			{
				var argData = {};

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][uciHostsInfo.dynData.setBlockFlag] = argData;
				argData[MAC] = item[MAC];
				argData[IS_BLOCKED] = blockStatus;
				argData[BNAME] = item[HOSTNAME];
				argData[DOWN_LIMIT] = item[DOWN_LIMIT];
				argData[UP_LIMIT] = item[UP_LIMIT];

				/* 加上时间规则参数和禁用域名参数 */
				argData[uciHostsInfo.optName.forbidDomain] = item[uciHostsInfo.secName.forbidDomain];
				argData[uciHostsInfo.optName.limitTime] = item[uciHostsInfo.optName.limitTime];

				setSavingFlg();
				$.action(data, clrSavingFlg);

				item[BLOCKED] = blockStatus;
				menuRefreshMap[gEptType]();
			}
		}

		function eptDetailEditClick(item)
		{
			gEditItem = item;
			bMenuEptDetail();
		}

		/* 创建设备详细信息 */
		function eptDetailCreate(item)
		{
			var divParent, divTitle, divSpeedInfo, pTitle;
			var divNetP, divTimeDetail, iNode, pNode, labelNode,
				spanNode, ulNode, liNode, inputNode, hostName;
			var doc = document;

			divParent = id("eptMngDetail");
			emptyNodes(divParent);

			/* 填充设备title信息 */
			divTitle = doc.createElement("div");
			divTitle.className = "eptTitle";
			divParent.appendChild(divTitle);

			iNode = doc.createElement("i");
			if (item.is_mesh && item.is_mesh == "1") {
				iNode.className = "router";
			} else {
				iNode.style.backgroundPosition = item.posX + " " + item.posY;
			}
			divTitle.appendChild(iNode);

			pNode = doc.createElement("p");
			divTitle.appendChild(pNode);

			hostName = item[HOSTNAME];
			if (undefined == hostName ||
				0 == hostName.length)
			{
				hostName = label.anonymousHost;
				item[HOSTNAME] = "";
			}

			spanNode = doc.createElement("span");
			spanNode.innerHTML = '<pre>' + htmlEscape(getStrInMax(hostName, bEptNameMaxLen)) + '</pre>';
			spanNode.className = "name";
			spanNode.onclick = bEptNamePencelC;
			spanNode.title = hostName;
			pNode.appendChild(spanNode);

			inputNode = doc.createElement("input");
			inputNode.type = "text";
			inputNode.style.display = "none";
			inputNode.maxLength = bEptNameMax;
			inputNode.value = hostName;
			inputNode.onblur = (function(item){
				return function(){bEptNameInputB(item, this)};
			})(item);
			inputNode.onkeyup = (function(item){
				return function(event){
					event = event || window.event;
					if (event.keyCode == 13)
					{
						bEptNameInputB(item, this);
					}
				};
			})(item);
			pNode.appendChild(inputNode);

			spanNode = doc.createElement("span");

			if (epTypes.inet == item[TYPE] || epTypes.wirelessG == item[TYPE])
			{
				spanNode.innerHTML = "IP" + label.colon + item[IP] + " | MAC" + label.colon + item[MAC].toUpperCase() +
									" | " + epLinkType[item[TYPE]];
			}
			else
			{
				if (item[WIFI_MODE] == epTypes.wireless2G)
				{
					spanNode.innerHTML = "IP" + label.colon + item[IP] + " | MAC" + label.colon + item[MAC].toUpperCase() +
								" | " + label.wireless2GLink;
				}
				else if (item[WIFI_MODE] == epTypes.wireless5G)
				{
					spanNode.innerHTML = "IP" + label.colon + item[IP] + " | MAC" + label.colon + item[MAC].toUpperCase() +
								" | " + label.wireless5GLink;
				}
				else if (item[WIFI_MODE] == epTypes.wireless5G1)
				{
					spanNode.innerHTML = "IP" + label.colon + item[IP] + " | MAC" + label.colon + item[MAC].toUpperCase() +
								" | " + label.wireless5G1Link;
				}
				else
				{
					spanNode.innerHTML = "IP" + label.colon + item[IP] + " | MAC" + label.colon + item[MAC].toUpperCase() +
								" | " + label.wireless5G2Link;
				}
			}

			divTitle.appendChild(spanNode);

			/* 填充网速相关信息 */
			divSpeedInfo = doc.createElement("div");
			divSpeedInfo.className = "eptSpeedInfo";
			divParent.appendChild(divSpeedInfo);

			ulNode = doc.createElement("ul");
			divSpeedInfo.appendChild(ulNode);

			function createSpeedItem(isDown, speed, limitSpeed, limitStr, noLimitStr, keyName)
			{
				var speedShow = true;
				liNode = doc.createElement("li");
				ulNode.appendChild(liNode);

				iNode = doc.createElement("i");
				if (isDown)
				{
					iNode.className = "down";
				}
				else
				{
					iNode.className = "up";
				}

				liNode.appendChild(iNode);

				if (!isHnatOpen) {
					pNode = doc.createElement("p");
					pNode.innerHTML = netSpeedTrans(speed);
					liNode.appendChild(pNode);

					if (limitSpeed == "0")
					{
						speedShow = false;
					}

					spanNode = doc.createElement("span");
					spanNode.className = speedClass + " speedDesc";
					spanNode.innerHTML = limitStr;
					!speedShow && (spanNode.style.display = "none");
					liNode.appendChild(spanNode);

					inputNode = doc.createElement("input");
					inputNode.type = "text";
					inputNode.className = speedClass + " " + inputClass;
					inputNode.value = limitSpeed;
					inputNode.maxLength = MAX_SPEED_LEN;
					inputNode.style.display = "none"
					inputNode.onblur = (function(item, inputNode, keyName){
						return function(){
							bEptLimitSpeedInputB(item, inputNode, keyName);
						}
					})(item, inputNode, keyName);
					inputNode.onkeyup = (function(item, inputNode, keyName){
						return function(event){
							event = event || window.event;
							if (event.keyCode == 13)
							{
								bEptLimitSpeedInputB(item, inputNode, keyName);
							}
						};
					})(item, inputNode, keyName);
					liNode.appendChild(inputNode);

					spanNode = doc.createElement("span");
					spanNode.className = digitClass + " " + speedClass;
					spanNode.innerHTML = limitSpeed;
					spanNode.onclick = binds(bEptSpeedLimitPencelC, spanNode);
					!speedShow && (spanNode.style.display = "none");
					liNode.appendChild(spanNode);

					spanNode = doc.createElement("span");
					spanNode.className = speedClass + " unit";
					spanNode.innerHTML = "KB/s";
					!speedShow && (spanNode.style.display = "none");
					liNode.appendChild(spanNode);

					inputNode = doc.createElement("input");
					inputNode.type = "button";
					inputNode.className = "subBtn eqtBtn " + speedClass;
					inputNode.value = btn.cancelSpeedLimit;
					inputNode.onclick = (function(item, inputNode){
						return function(){
							bEptCancelLimit(item, inputNode, keyName);
						};
					})(item, inputNode, keyName);
					!speedShow && (inputNode.style.display = "none");
					liNode.appendChild(inputNode);

					spanNode = doc.createElement("span");
					spanNode.className = noSpeedClass;
					spanNode.innerHTML = noLimitStr;
					speedShow && (spanNode.style.display = "none");
					liNode.appendChild(spanNode);
				}

				inputNode = doc.createElement("input");
				inputNode.type = "button";
				inputNode.className = "subBtn eqtBtn " + noSpeedClass;
				inputNode.value = btn.speedLimit;
				if (!isHnatOpen) {
					inputNode.onclick = binds(bEptSpeedLimitPencelC, inputNode);
					speedShow && (inputNode.style.display = "none");
				}
				else
				{
					inputNode.onclick = function(obj){
						return function(){
							showConfirm(label.closeHnatNote, function(confirm){
								if (confirm)
								{
									closeHNat();
								}
							});
						}
					}(inputNode);
				}
				liNode.appendChild(inputNode);
			}

			createSpeedItem(false, item[UP_SPEED], item[UP_LIMIT],
							label.upSpeedLimit, label.upNoSpeedLimit, UP_LIMIT);
			createSpeedItem(true, item[DOWN_SPEED], item[DOWN_LIMIT], label.downSpeedLimit,
							label.downNoSpeedLimit, DOWN_LIMIT);

			/*************** 开始站点详细页面上网时间规则列表的显示 ***************/
			pNode = doc.createElement("p");
			pNode.className = "title";
			pNode.innerHTML = label.netTimeLimit;
			divParent.appendChild(pNode);

			divNetP = doc.createElement("div");
			divNetP.className = "netControl";
			divParent.appendChild(divNetP);

			divTimeDetail = doc.createElement("div");
			divTimeDetail.className = "netControlList";
			divTimeDetail.id = "staLimitTimeListId";
			divNetP.appendChild(divTimeDetail);

			gStaLimitTimeSelectedArray = item[uciHostsInfo.optName.limitTime] && item[uciHostsInfo.optName.limitTime].split(",")
					|| [];
			/* 刷新和显示站点下对应应的时间规则列表 */
			showStaLimitTimeList(gStaLimitTimeSelectedArray);

			pNode = doc.createElement("p");
			pNode.className = "newItem";
			divNetP.appendChild(pNode);
			spanNode = doc.createElement("span");
			spanNode.innerHTML = label.enableLimitTime;
			if (isHnatOpen)
			{
				spanNode.onclick = function(){
					showConfirm(label.closeHnatNote, function(confirm){
						if (confirm)
						{
							closeHNat(function () {
								if (gStaLimitTimeSelectedArray.length < MAX_STA_LIMIT_TIME_NUMBER)
								{
									/* 是否这里要放上进度条呢 */
									loadLimitTimeList(function(){
										showLimitTimeWindow(true, gStaLimitTimeSelectedArray);
									});
								}
							});
						}
					});
				};
			} else {
				spanNode.onclick = function () {
					if (gStaLimitTimeSelectedArray.length < MAX_STA_LIMIT_TIME_NUMBER) {
						/* 是否这里要放上进度条呢 */
						loadLimitTimeList(function () {
							showLimitTimeWindow(true, gStaLimitTimeSelectedArray);
						});
					}
				};
			}
			pNode.appendChild(spanNode);

			if (gStaLimitTimeSelectedArray.length >= MAX_STA_LIMIT_TIME_NUMBER)
			{
				spanNode.className = "netControlAddDis";
			}
			else
			{
				spanNode.className = "netControlAdd";
			}
			/*************** 完成站点详细页面上网时间规则列表的显示 ***************/

			/*************** 开始站点详细页面禁止访问域名列表的显示 ***************/
			pNode = doc.createElement("p");
			pNode.className = "title";
			pNode.innerHTML = label.limitDomain;
			divParent.appendChild(pNode);

			divDomainP = doc.createElement("div");
			divDomainP.className = "netControl";
			divParent.appendChild(divDomainP);

			divDomainDetail = doc.createElement("div");
			divDomainDetail.className = "netControlList";
			divDomainDetail.id = "staForbidDomainListId";
			divDomainP.appendChild(divDomainDetail);

			gStaForbidDomainSelectedArray = item[uciHostsInfo.optName.forbidDomain] && item[uciHostsInfo.optName.forbidDomain].split(",")
					|| [];
			/* 刷新和显示站点下对应应的禁用域名列表 */
			showStaForbidDomainList(gStaForbidDomainSelectedArray);

			pNode = doc.createElement("p");
			pNode.className = "newItem";
			divDomainP.appendChild(pNode);

			spanNode = doc.createElement("span");
			spanNode.innerHTML = label.enableForbidDomain;
			spanNode.onclick = function(){
				if (gStaForbidDomainSelectedArray.length < MAX_STA_FORBID_DOMAIN_NUMBER)
				{
					/* 是否这里要放上进度条呢 */
					loadForbidDomainList(function(){showForbidDomainWindow(true, gStaForbidDomainSelectedArray);});
				}
			};
			pNode.appendChild(spanNode);

			if (gStaForbidDomainSelectedArray.length >= MAX_STA_FORBID_DOMAIN_NUMBER)
			{
				spanNode.className = "netControlAddDis";
			}
			else
			{
				spanNode.className = "netControlAdd";
			}
			/*************** 完成站点详细页面禁止访问域名列表的显示 ***************/
		}

		/* 保存设备配置 */
		function saveHostCfg(item, actionName)
		{
			var data = {};
			var argData = {};

			data[uciHostsInfo.fileName] = {};
			data[uciHostsInfo.fileName][actionName] = argData;
			argData[MAC] = item[MAC];
			argData[IS_BLOCKED] = item[BLOCKED];
			argData[BNAME] = item[HOSTNAME];
			argData[DOWN_LIMIT] = item[DOWN_LIMIT];
			argData[UP_LIMIT] = item[UP_LIMIT];
			argData[LINIT_TIME] = item[LINIT_TIME];
			argData[FORBID_DOMAIN] = item[FORBID_DOMAIN];

			setSavingFlg();
			$.action(data, function(){
				clrSavingFlg();
				bEptGetData();
			});
		}

		/* 保存设备名称 */
		function saveHostCfgName(item, name)
		{
			if (isSaving())
			{
				return;
			}

			if (item[HOSTNAME] == name)
			{
				return;
			}

			if (getCNStrLen(name) > bEptNameMax)
			{
				showAlert(errorStr.hostNameLenExceed);
				beEdit = false;
				return;
			}

			item[HOSTNAME] = name;
			saveHostCfg(item, uciHostsInfo.dynData.setName);
		}

		/* 保存设备限制速度 */
		function saveHostCfgSpeedLimit(item, speedLimit, keyName)
		{
			if (isSaving())
			{
				return;
			}

			if (!checkNum(speedLimit))
			{
				return;
			}

			speedLimit = parseInt(speedLimit);
			if (speedLimit > MAX_SPEED_LIMIT) {
				speedLimit = MAX_SPEED_LIMIT;
			}

			if (item[keyName] == speedLimit)
			{
				return;
			}

			item[keyName] = speedLimit + "";
			saveHostCfg(item, uciHostsInfo.dynData.setFluxLimit);
		}

		/* 设备名称点击的响应函数 */
		function bEptNamePencelC()
		{
			if (isSaving())
			{
				return;
			}

			var label;
			label = $(this.parentNode).find("span");
			label.css("display", "none");
			$(this.parentNode).find("input").css("display", "inline").select();
			beEdit = true;
		}

		/* 设备速度限制点击的响应函数 */
		function bEptSpeedLimitPencelC()
		{
			bEptObjPencelC(this, noSpeedClass, speedClass);
			$(this.parentNode).find("." + digitClass).css("display", "none");
			$(this.parentNode).find("." + inputClass).select();
		}

		/* 设备名称的保存函数 */
		function bEptNameInputB(item, input)
		{
			var name = input.value;
			var nameOrg = name;

			input.style.display = "none";
			saveHostCfgName(item, name);

			/* 保存数据 */
			if (name.length == 0)
			{
				name = uciHostsInfo.optValue.name.defname;
				nameOrg = name;
				input.value = name;
			}

			name = '<pre>' + htmlEscape(getStrInMax(name, bEptNameMaxLen)) + '</pre>';
			$(input.parentNode).find("span").css("display", "inline").attr("title", nameOrg).html(name);
			beEdit = false;
		}

		/* 点击取消限速按钮函数 */
		function bEptCancelLimit(item, inputNode, keyName)
		{
			if (isSaving())
			{
				return;
			}

			$(inputNode.parentNode).find("." + inputClass).val("0");
			bEptObjPencelC(inputNode, speedClass, noSpeedClass);
			beEdit = false;
			saveHostCfgSpeedLimit(item, "0", keyName);
		}

		/* 设备限速的保存函数 */
		function bEptLimitSpeedInputB(item, inputNode, keyName)
		{
			if (isSaving())
			{
				return;
			}

			var speedLimit = parseInt(inputNode.value);

			if (checkNum(speedLimit) && parseInt(speedLimit) == 0)
			{
				bEptObjPencelC(inputNode, speedClass, noSpeedClass);
			}
			else
			{
				if (!checkNum(speedLimit))
				{
					speedLimit = item[keyName];
				}
				else
				{
					speedLimit = parseInt(speedLimit);
					if (speedLimit > MAX_SPEED_LIMIT) {
						speedLimit = MAX_SPEED_LIMIT;
					}
				}
				bEptObjPencelC(inputNode, noSpeedClass, speedClass);
				$(inputNode.parentNode).find("." + inputClass).css("display", "none");
				$(inputNode.parentNode).find("." + digitClass).html(speedLimit);
			}

			beEdit = false;
			saveHostCfgSpeedLimit(item, speedLimit, keyName);
		}

		function bEptObjPencelC(obj, hideClass, ShowClass)
		{
			if (isSaving())
			{
				return;
			}

			$(obj.parentNode).find("." + hideClass).css("display", "none");
			$(obj.parentNode).find("." + ShowClass).css("display", "inline");
			beEdit = true;
		}

		function errHandle(errNo, objOrId)
		{

			var showStr = "";

			switch (parseInt(errNo))
			{
			case ENONE:
				return true;
			case ESYSTEM:
				showStr = errStr.systemErr;
				break;
			case ENOMEMORY:
				showStr = errStr.invMemoryOut;
				break;
			case ENOECHO:
				showStr = errStr.invRequestTimeout;
				break;
			case ESYSBUSY:
				showStr = errStr.systemBusy;
				break;
			case EENTRYEXIST:
				showStr = errStr.entryExistErr;
				break;
			case EENTRYNOTEXIST:
				showStr = errStr.entryNoExistErr;
				break;
			case EENTRYCONFLIC:
				showStr = errStr.entryConflicErr;
				break;
			case ETABLEFULL:
				showStr = errStr.tableFullErr;
				break;
			case ELACKARG:
				showStr = errStr.acIncompleteArg;
				break;
			case ETIMEPERIODBLANK:
				objOrId = "netControlName";
				showStr = errStr.timePeriodBlank;
				break;
			case ETIMEPERIODTOOLONG:
				objOrId = "netControlName";
				showStr = errStr.timePeriodTooLong;
				break;
			case EINVTLBEGINTIME:
				objOrId = "beginHour";
				showStr = errStr.invTlBeginTime;
				break;
			case EINVTLEENDTIME:
				objOrId = "endHour";
				showStr = errStr.invTlEndTime;
				break;
			case EINVTLBEGINENDTIME:
				objOrId = "beginHour";
				showStr = errStr.invTlBeginEndTime;
				break;
			case ETLREPEATBLANK:
				objOrId = "netControlWeek";
				showStr = errStr.tlRepeatBlank;
				break;
			default:
				showStr = errStr.invRequestFail;
				break;
			}
			closeLoading();
			showAlert(showStr, objOrId);
			return false;
		}

		/* 显示某个站点下的时间规则列表 */
		function showStaLimitTimeList(selList)
		{
			var divParent = id("staLimitTimeListId");
			var ulNode, liNode, iNode, pNode, spanNode;
			var weekStr = "";
			var tmpArray = [];
			var secNameTmp = "";

			/* 根据当前站点记录的时间规则映射关系，获取该设备已被设置的时间规则列表 */
			for (var k in selList)
			{
				for (var j in gLimitTimeArray)
				{
					if (gLimitTimeArray[j][SEC_NAME] == selList[k] && selList[k] != "")
					{
						tmpArray.push(gLimitTimeArray[j]);
						break;
					}
				}
			}

			emptyNodes(divParent);

			ulNode = document.createElement("ul");
			divParent.appendChild(ulNode);

			for (var i in tmpArray)
			{
				secNameTmp = tmpArray[i][SEC_NAME];

				liNode = document.createElement("li");
				$(liNode).hover(
				function(){
					$(this).find("i").css("visibility", "visible");
				},
				function(){
					$(this).find("i").css("visibility", "hidden");
				});
				ulNode.appendChild(liNode);

				iNode = document.createElement("i");
				iNode.onclick = (function(secNameTmp, tmpArray){
					return function() {
						delLimitTimeItemCallback(secNameTmp, tmpArray);
					}
				})(secNameTmp, tmpArray);
				liNode.appendChild(iNode);

				pNode = document.createElement("pre");
				pNode.innerHTML = htmlEscape(getStrInMax(tmpArray[i][BNAME], 16));
				liNode.appendChild(pNode);

				spanNode = document.createElement("span");
				spanNode.innerHTML = label.limitTime + label.colon +
									 tmpArray[i].start_time + " - " + tmpArray[i].end_time;
				liNode.appendChild(spanNode);

				spanNode = document.createElement("span");
				weekStr = ((tmpArray[i].mon == "1")?label.MonB + " ":"")
						  	+((tmpArray[i].tue == "1")?(label.TueB + " "):"")
							+((tmpArray[i].wed == "1")?(label.WenB + " "):"")
							+((tmpArray[i].thu == "1")?(label.ThuB + " "):"")
							+((tmpArray[i].fri == "1")?(label.FriB + " "):"")
							+((tmpArray[i].sat == "1")?(label.StaB + " "):"")
							+((tmpArray[i].sun == "1")?(label.SunB + " "):"");
				if (weekStr != "")
				{
					spanNode.innerHTML = label.repeat + label.colon + weekStr;
				}
				liNode.appendChild(spanNode);
			}

			function delLimitTimeItemCallback(secNameStr, timeList)
			{
				var data = {};
				var args = {};
				var arr = [];

				if (isSaving())
				{
					return;
				}

				for (var i in timeList)
				{
					if (secNameStr != timeList[i][SEC_NAME])
					{
						arr.push(timeList[i][SEC_NAME]);
					}
				}

				args[MAC] = gEditItem[MAC];
				args[IS_BLOCKED] = gEditItem[BLOCKED];
				args[BNAME] = gEditItem[HOSTNAME];
				args[DOWN_LIMIT] = gEditItem[DOWN_LIMIT];
				args[UP_LIMIT] = gEditItem[UP_LIMIT];
				args[uciHostsInfo.optName.forbidDomain] = gEditItem[uciHostsInfo.optName.forbidDomain];
				args[uciHostsInfo.optName.limitTime] = arr.join(",");

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][uciHostsInfo.dynData.setHostInfo] = args;

				setSavingFlg();
				showLoading(statusStr.delLoading, undefined, undefined, false);
				/* 删除时出现 */
				$.action(data, function(result){
					closeLoading();
					clrSavingFlg();
					if (ENONE == result[ERR_CODE])
					{
						/* 遍历总列表，立刻把对应项的checked状态置为 false */
						for (var index in gStaLimitTimeSelectedArray)
						{
							if (secNameStr == gStaLimitTimeSelectedArray[index])
							{
								gStaLimitTimeSelectedArray.splice(index, 1);
							}
						}

						/* 立刻刷新站点的时间规则列表, 此时是否还需要先加载一下时间规则总表? */
						showStaLimitTimeList(arr);
					}
					else
					{
						errHandle(result[ERR_CODE]);
					}
				});
			}
		}

		/* 显示某个站点下的禁止访问域名列表 */
		function showStaForbidDomainList(selList)
		{
			var divParent = id("staForbidDomainListId");
			var ulNode, liNode, iNode, pNode;
			var tmpArray = [];
			var secNameTmp = "";

			/* 根据当前站点记录的域名映射关系，获取该设备已被设置的禁止域名列表 */
			for (var k in selList)
			{
				for (var j in gForbidDomainArray)
				{
					if (gForbidDomainArray[j][SEC_NAME] == selList[k] && selList[k] != "")
					{
						tmpArray.push(gForbidDomainArray[j]);
						break;
					}
				}
			}

			emptyNodes(divParent); /* 清空里面的子文档对象 */

			ulNode = document.createElement("ul");
			divParent.appendChild(ulNode);

			for (var i in tmpArray)
			{
				secNameTmp = tmpArray[i][SEC_NAME];
				liNode = document.createElement("li");
				liNode.className = "domainLi";
				$(liNode).hover(
				function(){
					$(this).find("i").css("visibility", "visible");
				},
				function(){
					$(this).find("i").css("visibility", "hidden");
				});
				ulNode.appendChild(liNode);

				iNode = document.createElement("i");
				iNode.onclick = (function(secNameTmp, tmpArray){
					return function() {
						delForbidDomainItemCallback(secNameTmp, tmpArray);
					}
				})(secNameTmp, tmpArray);
				liNode.appendChild(iNode);

				pNode = document.createElement("p");
				pNode.innerHTML = tmpArray[i].domain;
				liNode.appendChild(pNode);
			}

			function delForbidDomainItemCallback(secNameStr, domainList)
			{
				var data = {};
				var args = {};
				var arr = [];

				if (isSaving())
				{
					return;
				}

				for (var i in domainList)
				{
					if (secNameStr != domainList[i][SEC_NAME])
					{
						arr.push(domainList[i][SEC_NAME]);
					}
				}

				args[MAC] = gEditItem[MAC];
				args[IS_BLOCKED] = gEditItem[BLOCKED];
				args[BNAME] = gEditItem[HOSTNAME];
				args[DOWN_LIMIT] = gEditItem[DOWN_LIMIT];
				args[UP_LIMIT] = gEditItem[UP_LIMIT];
				args[uciHostsInfo.optName.forbidDomain] = arr.join(",");
				args[uciHostsInfo.optName.limitTime] = gEditItem[uciHostsInfo.optName.limitTime];

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][uciHostsInfo.dynData.setHostInfo] = args;

				setSavingFlg();
				showLoading(statusStr.delLoading, undefined, undefined, false);
				/* 删除时出现 */
				$.action(data, function(result){
					closeLoading();
					clrSavingFlg();
					if (ENONE == result[ERR_CODE])
					{
						/* 遍历总列表，立刻把对应项的checked状态置为 false */
						for (var index in gStaForbidDomainSelectedArray)
						{
							if (secNameStr == gStaForbidDomainSelectedArray[index])
							{
								gStaForbidDomainSelectedArray.splice(index, 1);
							}
						}
						/* 立刻刷新站点的禁用域名列表, 此时是否还需要先加载一下域名总表? */
						showStaForbidDomainList(arr);
					}
					else
					{
						errHandle(result[ERR_CODE]);
					}
				});
			}
		}

		/* 刷新并弹出显示时间规则列表的窗口 */
		function showLimitTimeWindow(isSelecting, selList)
		{
			closeLimitTimeWindow();	/* 清空和关闭以便重建 */
			freshLimitTimeWindow(isSelecting, selList);

			/* 刷新和显示时间规则窗口 */
			function freshLimitTimeWindow(isSelecting, selList)
			{
				var divCon = id("limitTimeDGDivId");
				var eptCon, eptDetail, tableDiv, funcUl, addBtn;
				var tableCon, btnCon, delAllBtn, delSelBtn, closeBtn;
				var confirmBtn, cancelBtn;

				/* 对是否需要显示选中状态进行处理以及新增rule字段 */
				fulfilLimitTimeArray(selList);

				limitTimeDataGridLs = new DataGrid();
				divCon = document.createElement("div");
				divCon.className = "VigNetControlCon";
				divCon.id = "limitTimeDGDivId";	/* 弹出窗口的总DIV容器 */
				document.body.appendChild(divCon);

				eptCon = document.createElement("div");
				eptCon.className = "eptManageCon";
				eptCon.id = "eptAddTimeCon";
				divCon.appendChild(eptCon);

				if (true == isSelecting)
				{
					eptTips = document.createElement("h1");
					eptTips.className = "eptAddTimeTips";
					eptTips.innerHTML = label.addLimitTimeTip;
					eptCon.appendChild(eptTips);
				}

				eptDetail = document.createElement("div");
				eptDetail.className = "eptDetailCon";
				eptDetail.id = "eptLimitTimeDetailCon";
				eptCon.appendChild(eptDetail);

				tableDiv = document.createElement("div");
				tableDiv.className = "blockTable blockTableMT";
				eptDetail.appendChild(tableDiv);

				funcUl = document.createElement("ul");
				funcUl.className = "gridToolBar";
				funcUl.id = "limitTimeFuncUlId";
				tableDiv.appendChild(funcUl);

				addBtn = document.createElement("li");
				addBtn.innerHTML = btn.addLimitTime;
				addBtn.id = "addlimitTimeBtnId"
				funcUl.appendChild(addBtn);

				tableCon = document.createElement("table");
				tableCon.className = "dataGrid1";
				tableCon.id = "limitTimeDGList";
				tableDiv.appendChild(tableCon);

				btnCon = document.createElement("div");
				btnCon.className = "closeManagement";
				btnCon.id = "limitTimeBtnDivId";
				eptCon.appendChild(btnCon);

				if (false == isSelecting)
				{
					delAllBtn = document.createElement("li");
					delAllBtn.onclick = limitTimeClear;
					delAllBtn.id = "showLimitTimeDelAllButton";
					delAllBtn.innerHTML = btn.deleteAll;
					funcUl.appendChild(delAllBtn);

					delSelBtn = document.createElement("li");
					delSelBtn.onclick = null;
					delSelBtn.id = "showLimitTimeDelSelButton";
					delSelBtn.className = "delSelUn";
					delSelBtn.innerHTML = btn.deleteSel;
					funcUl.appendChild(delSelBtn);

					closeBtn = document.createElement("input");
					closeBtn.type = "button";
					closeBtn.className = "btnA subBtn";
					closeBtn.value = btn.close;
					closeBtn.onclick = closeLimitTimeWindow;
					btnCon.appendChild(closeBtn);

					/* 初始化表格控件 */
					limitTimeDataGridLs.init({
						id:"limitTimeDGList",
						data:gLimitTimeArray,
						max:MAX_LIMIT_TIME_NUMBER,
						edit:false,
						hasSelBox:false,
						paging:{num:8, page:1},
						checkIndex:1,
						head:[{field:label.select, width:30},
							  {field:label.description, width:120},
						  	  {field:label.limitTimeRule, width:300}],
						list:[{name:"checked",
							   type:"checkbox",
							   edit:false,
							   checkDis:"checkboxDisabled",
							   func:limitTimeItemHandleOnMainWindow},
							   {name:"name", maxSize:32},
						  	   {name:"rule", maxSize:100}],
						toolBar:{id:"limitTimeFuncUlId",
							asyn:true}
					});

					if (gLimitTimeArray.length > 0)
					{
						delAllBtn.className = "delAll";
						delAllBtn.onclick = limitTimeClear;
					}
					else
					{
						delAllBtn.className = "delAllUn";
						delAllBtn.onclick = null;
					}
				}
				else
				{
					confirmBtn = document.createElement("input");
					confirmBtn.type = "button";
					confirmBtn.className = "btnA subBtn";
					confirmBtn.id = "showLimitTimeConfirmButton";
					confirmBtn.value = btn.ok;
					confirmBtn.onclick = function(){
						limitTimeSelectedSave(selList);
					};
					btnCon.appendChild(confirmBtn);

					cancelBtn = document.createElement("input");
					cancelBtn.type = "button";
					cancelBtn.className = "btnA subBtn";
					cancelBtn.value = btn.cancel;
					cancelBtn.onclick = closeLimitTimeWindow;
					btnCon.appendChild(cancelBtn);

					/* 初始化表格控件 */
					limitTimeDataGridLs.init({
						id:"limitTimeDGList",
						data:gLimitTimeArray,
						max:MAX_LIMIT_TIME_NUMBER,
						edit:false,
						hasSelBox:false,
						paging:{num:8, page:1},
						checkIndex:1,
						head:[{field:label.select, width:30},
							  {field:label.description, width:120},
						  	  {field:label.limitTimeRule, width:300}],
						list:[{name:"checked",
							   type:"checkbox",
							   edit:false,
							   checkDis:"checkboxDisabled",
							   func:limitTimeItemHandleOnSelWindow},
							   {name:"name", maxSize:32},
						  	   {name:"rule", maxSize:100}],
						toolBar:{id:"limitTimeFuncUlId"}
					});
				}
				if (gLimitTimeArray.length < MAX_LIMIT_TIME_NUMBER)
				{
					addBtn.className = "add";
					addBtn.onclick = function(){
						closeLimitTimeWindow();
						setNetControlPanel(	"",
											"00:00",
											"00:00",
										    [ENABLED, ENABLED, ENABLED,
											ENABLED, ENABLED, ENABLED, ENABLED],
											function(){inputTimeSave(isSelecting, selList);},
											null,
											null,
											function(){showLimitTimeWindow(isSelecting, selList);}
											);
						netControlPanelDis(true);
						beEdit = true;
					};
				}
				else
				{
					addBtn.className = "addUn";
					addBtn.onclick = null;
				}

				/* 带背景遮盖的方式显示表格列表窗口 */
				showCoverB(function(){
					divCon.style.visibility = "visible";
					divCon.style.top = "150px";
				});
			}

			/* 关闭时间规则列表窗口 */
			function closeLimitTimeWindow()
			{
				var divCon = id("limitTimeDGDivId");

				if (divCon != undefined)
				{
					hideCoverB(function(){
						divCon.style.visibility = "hidden";
						divCon.style.top = "-9999px";
						document.body.removeChild(divCon);
						limitTimeDataGridLs = null; /* 释放该表格对象 */
					});
				}
			}

			/* 在上网时间规则可选列表上选中时间规则条目时的触发处理函数 */
			function limitTimeItemHandleOnSelWindow(index, obj)
			{
				var selCount = 0;

				if (true == obj.obj.checked)
				{
					for (var i = 0; i < gLimitTimeArray.length; i++)
					{
						if (gLimitTimeArray[i].checked == true)
						{
							selCount++;
						}
					}

					if (selCount > MAX_STA_LIMIT_TIME_NUMBER)
					{
						showAlert(errStr.invLimitTimeSelected);
						gLimitTimeArray[index].checked = false;
						obj.obj.checked = false;
					}
					else
					{
						gLimitTimeArray[index].checked = true;
					}

				}
				else
				{
					gLimitTimeArray[index].checked = false;
				}
			}

			/* 在上网时间规则总表上选中时间规则条目时的触发处理函数 */
			function limitTimeItemHandleOnMainWindow(index, obj)
			{
				var delSelBtn = id("showLimitTimeDelSelButton");

				if (true == obj.obj.checked)
				{
					gLimitTimeArray[index].checked = true;
				}
				else
				{
					gLimitTimeArray[index].checked = false;
				}

				if (delSelBtn != undefined)
				{
					var isSelCss = "delSelUn";
					var isUnChecked = false;
					var clickEvent = null;
					for (var i in gLimitTimeArray)
					{
						if (gLimitTimeArray[i].checked == true)
						{
							isSelCss = "delSel";
							clickEvent = limitTimeDel;
							isUnChecked = true;
							break;
						}
					}
					delSelBtn.className = isSelCss;
					delSelBtn.onclick = clickEvent;
				}
			}

			/* 清空所有时间规则 */
			function limitTimeClear()
			{
				var msg = label.delAllTips;

				if (isDelLimitTimeListUsed(true) == true)
				{
					msg = label.limitTimeUsedTips;
				}

				showConfirm(msg, function(type) {
					if (type == false)
					{
						return;
					}
					else
					{
				var data = {};

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][KEY_TABLE] = uciHostsInfo.secName.limitTime;

				showLoading(statusStr.delLoading, undefined, undefined, false);
				$.del(data, function(result){
					closeLoading();
					errHandle(result[ERR_CODE]);
					/* 重新加载并弹出主表窗口 */
					loadLimitTimeList(function () {
						showLimitTimeWindow(false, []);
					});
				});
			}
				});
			}

			/* 删除已被选中的时间规则条目 */
			function limitTimeDel()
			{
				var msg = label.delSelTips;

				if (isDelLimitTimeListUsed(false) == true)
				{
					msg = label.limitTimeUsedTips;
				}

				showConfirm(msg, function(type) {
					if (type == false)
					{
						return;
					}

					var data = {};
					var moduleName = uciHostsInfo.fileName;
					var optName =  uciHostsInfo.optName.name;

					data[moduleName] = {};
					data[moduleName][optName] = [];

					for (var i in gLimitTimeArray)
					{
						if (true == gLimitTimeArray[i].checked)
						{
							data[moduleName][optName].push(gLimitTimeArray[i][SEC_NAME]);
						}
					}

					showLoading(statusStr.delLoading, undefined, undefined, false);
					$.del(data, function(result){
						closeLoading();
						errHandle(result[ERR_CODE]);
						/* 重新加载并弹出主表窗口 */
						loadLimitTimeList(function(){
							showLimitTimeWindow(false, []);
							});
					});
				});
			}

			/* 站点选中时间规则后的保存操作 */
			function limitTimeSelectedSave(selList)
			{
				var data = {};
				var args = {};
				var limitTimeArray = [];

				for(var i in gLimitTimeArray)
				{
					if (true == gLimitTimeArray[i].checked)
					{
						limitTimeArray.push(gLimitTimeArray[i][SEC_NAME]);
					}
				}

				if (isSaving())
				{
					return;
				}

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][uciHostsInfo.dynData.setHostInfo] = args;
				args[uciHostsInfo.optName.mac] = gEditItem[uciHostsInfo.optName.mac];
				args[uciHostsInfo.optName.isBlocked] = gEditItem[uciHostsInfo.optName.blocked];
				args[uciHostsInfo.optName.name] = gEditItem[uciHostsInfo.optName.hostname];
				args[uciHostsInfo.optName.downLimit] = gEditItem[uciHostsInfo.optName.downLimit];
				args[uciHostsInfo.optName.upLimit] = gEditItem[uciHostsInfo.optName.upLimit];
				args[uciHostsInfo.optName.forbidDomain] = gEditItem[uciHostsInfo.secName.forbidDomain];
				args[uciHostsInfo.optName.limitTime] = limitTimeArray.join(",");

				setSavingFlg();	/* 与站点详细信息保存方式一致, 增加操作计数 */
				showLoading(statusStr.dealLoading, undefined, undefined, false);
				$.action(data, function(result){
					closeLoading();
					clrSavingFlg();
					if (ENONE == result[ERR_CODE])
					{
						/* 更新已选中条目 */
						gStaLimitTimeSelectedArray = limitTimeArray;
						/* 选择完成后要关闭选择表格窗口 */
						closeLimitTimeWindow();
						/* 立刻刷新站点的时间规则信息 */
						showStaLimitTimeList(limitTimeArray);
					}
					else
					{
						errHandle(result[ERR_CODE]);
					}
					bEptGetData();
				});
			}

			/* 保存时间规则，此函数依赖于时间规则输入面板 */
			function inputTimeSave(isSelecting, selList)
			{
				var data = {};
				var args = {};
				var ruleName;
				var name = id("netControlName").value;
				var sHour = id("beginHour").value;
				var sMinute = id("beginMinute").value;
				var eHour = id("endHour").value;
				var eMinute = id("endMinute").value;
				var weekList = blockGrid.getData();

				function checkTime()
				{
					if ((sHour + ":" + sMinute) == (eHour + ":" + eMinute))
					{
						return false;
					}

					if (sHour > eHour || (sHour == eHour && sMinute > eMinute))
					{
						return false;
					}

					return true;
				}

				function checkRepeat()
				{
					var ret = false;
					for (var i in weekList)
					{
						ret = ret || 0 != parseInt(weekList[i]);
					}
					return ret;
				}

				if (name.length <= 0)
				{
					errHandle(ETIMEPERIODBLANK);
					return;
				}

				if (getCNStrLen(name) > 32)
				{
					errHandle(ETIMEPERIODTOOLONG);
					return;
				}

				if (!checkTime())
				{
					errHandle(EINVTLBEGINENDTIME);
					return;
				}

				if (!checkRepeat()) {
					errHandle(ETLREPEATBLANK);
					return;
				}

				for (var i = 0; i < gLimitTimeArray.length; i++)
				{
					if (name == gLimitTimeArray[i].name)
					{
						showAlert(errStr.invLimitTimeDescription);
						return;
					}
				}

				args[uciHostsInfo.optName.name] = name.replace(/^\s+|\s+$/g,"");
				args[uciHostsInfo.optName.mon] = weekList[0];
				args[uciHostsInfo.optName.tue] = weekList[1];
				args[uciHostsInfo.optName.wed] = weekList[2];
				args[uciHostsInfo.optName.thu] = weekList[3];
				args[uciHostsInfo.optName.fri] = weekList[4];
				args[uciHostsInfo.optName.sat] = weekList[5];
				args[uciHostsInfo.optName.sun] = weekList[6];
				args[uciHostsInfo.optName.startTime] = sHour + ":" + sMinute;
				args[uciHostsInfo.optName.endTime] = eHour + ":" + eMinute;

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][KEY_TABLE] = uciHostsInfo.secName.limitTime;
				data[uciHostsInfo.fileName][KEY_NAME] = "limit_time_" + calcNextIndex(gLimitTimeArray);
				data[uciHostsInfo.fileName][KEY_PARA] = args;

				netControlPanelDis(false);
				showLoading(statusStr.addLoading, undefined, undefined, false);
				$.add(data, function(result){
					errHandle(result[ERR_CODE]);
					beEdit = false;
					loadLimitTimeList(function (){
						closeLoading();
						showLimitTimeWindow(isSelecting, selList);
					});
				});
			}

			/* 检查时间规则条目是否存在被引用的关系 */
			function isDelLimitTimeListUsed(type)
			{
				if (type == true)
				{
					for (var i = 0; i < epStaList.length; i++)
					{
						if (epStaList[i].limit_time != "")
						{
							return true;
						}
					}
				}
				else
				{
					var limitTimeNameList = [];
					for (var i = 0; i < gLimitTimeArray.length; i++)
					{
						if (gLimitTimeArray[i].checked == true)
						{
							for (var j = 0; j < epStaList.length; j++)
							{
								limitTimeNameList = epStaList[j].limit_time && epStaList[j].limit_time.split(",")
													|| [];
								for (var k = 0; k < limitTimeNameList.length; k++)
								{
									if (gLimitTimeArray[i][SEC_NAME] == limitTimeNameList[k])
									{
										return true;
									}
								}
								limitTimeNameList.length = 0;
							}
						}
					}
				}

				return false;
			}
		}

		/* 补全时间限制规则 */
		function fulfilLimitTimeArray(selList)
		{
			/* 对是否需要显示选中状态进行处理 */
			for (var i in gLimitTimeArray)
			{
				/* 新增checked字段 */
				gLimitTimeArray[i].checked = false;
				if (selList.length > 0)
				{
					for (var j = 0; j < selList.length; j++)
					{
						if (gLimitTimeArray[i][SEC_NAME] == selList[j] && selList[j] != "")
						{
							gLimitTimeArray[i].checked = true;
							break;
						}
					}
				}
			}

			/* 新增rule字段 */
			for (var i in gLimitTimeArray)
			{
				gLimitTimeArray[i].rule = gLimitTimeArray[i].start_time+" - "
										  +gLimitTimeArray[i].end_time+"  "
										  +((gLimitTimeArray[i].mon == "1")?(label.MonB + " "):"")
										  +((gLimitTimeArray[i].tue == "1")?(label.TueB + " "):"")
										  +((gLimitTimeArray[i].wed == "1")?(label.WenB + " "):"")
										  +((gLimitTimeArray[i].thu == "1")?(label.ThuB + " "):"")
										  +((gLimitTimeArray[i].fri == "1")?(label.FriB + " "):"")
										  +((gLimitTimeArray[i].sat == "1")?(label.StaB + " "):"")
										  +((gLimitTimeArray[i].sun == "1")?(label.SunB + " "):"");
			}
		}

		/* 弹出域名输入面板 */
		function showDomainInputPanel(isSelecting, selList)
		{
			closeInputDomainPanel();
			freshDomainInputPanel(isSelecting, selList);

			/* 刷新和显示域名输入面板 */
			function freshDomainInputPanel(isSelecting, selList)
			{
				var tipStr = label.initDomainTips;
				var divCon, eptCon, inputDiv, divBtns, confirmBtn, cancelBtn;
				var li, labelC, input;

				divCon = document.createElement("div");
				divCon.className = "VigNetControlCon";
				divCon.id = "showDomainInputPanelId";
				document.body.appendChild(divCon);

				eptCon = document.createElement("div");
				eptCon.className = "eptInputDomainCon";
				eptCon.id = "eptInputDomainCon";
				divCon.appendChild(eptCon);

				inputDiv = document.createElement("div");
				inputDiv.className = "domainInputDiv";
				inputDiv.id = "domainInputDiv";
				eptCon.appendChild(inputDiv);

				divBtns = document.createElement("div");
				divBtns.className = "btns";
				eptCon.appendChild(divBtns);

				confirmBtn = document.createElement("input");
				confirmBtn.type = "button";
				confirmBtn.className = "btnA subBtn";
				confirmBtn.id = "domainInputPanelSaveBtn";
				confirmBtn.value = btn.ok;
				confirmBtn.onclick = function(){inputDomainSave(isSelecting, selList);};
				divBtns.appendChild(confirmBtn);

				cancelBtn = document.createElement("input");
				cancelBtn.type = "button";
				cancelBtn.className = "btnA subBtn";
				cancelBtn.id = "domainInputPanelCancelBtn";
				cancelBtn.value = btn.cancel;
				cancelBtn.onclick = function(){inputDomainCancel(isSelecting, selList);};
				divBtns.appendChild(cancelBtn);

				labelC = document.createElement("label");
				labelC.className = "domainConLabel";
				labelC.innerHTML = label.domain + label.colon;
				inputDiv.appendChild(labelC);

				input = document.createElement("input");
				input.className = "domainConInput";
				input.id = "domainInputField";
				input.maxLength = 32;
				input.value = tipStr;
				input.onfocus = function(){
					if (this.value == tipStr)
					{
						this.value = "";
					}
				};
				inputDiv.appendChild(input);

				/* 显示输入面板 */
				showCoverB(function(){
					divCon.style.visibility = "visible";
					divCon.style.top = "150px";
				});
			}

			/* 域名输入面板的确认操作 */
			function inputDomainSave(isSelecting, selList)
			{
				var divCon = id("showDomainInputPanelId");
				var domainId = id("domainInputField");
				var domainValue = "";
				var domainSecName = "";
				var args = {};
				var data = {};
				var domainItem = {};
				var testStr = /[^A-Za-z0-9.-]/;

				if (undefined == divCon || undefined == domainId)
				{
					return;
				}

				domainValue = domainId.value.replace(/^\s+|\s+$/g,""); /* 去掉前后空格 */
				if (domainValue == "")
				{
					showAlert(errStr.invEmptyDomainDescription);
					return;
				}

				if (testStr.test(domainValue))
				{
					showAlert(errStr.invInvalidDomainDescription);
					return;
				}

				for (var i in gForbidDomainArray)
				{
					if (domainValue.toUpperCase() == gForbidDomainArray[i].domain.toUpperCase())
					{
						showAlert(errStr.invExistDomainDescription);
						return;
					}
				}

				/* 发出增加域名的请求 */
				domainSecName = "forbid_domain_" + calcNextIndex(gForbidDomainArray);
				args[uciHostsInfo.optName.domain] = domainValue;
				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][KEY_TABLE] = uciHostsInfo.secName.forbidDomain;
				data[uciHostsInfo.fileName][KEY_NAME] = domainSecName;
				data[uciHostsInfo.fileName][KEY_PARA] = args;

				closeInputDomainPanel(); /* 关闭域名输入面板 */
				showLoading(statusStr.addLoading, undefined, undefined, false);
				$.add(data, function(result){
					errHandle(result[ERR_CODE]);
					loadForbidDomainList(function (){
					closeLoading();
						showForbidDomainWindow(isSelecting, selList);
					});
				});
			}

			/* 域名输入面板上的取消操作 */
			function inputDomainCancel(isSelecting, selList)
			{
				closeInputDomainPanel();
				/* 是否需要加载一下数据再显示 */
				showForbidDomainWindow(isSelecting, selList);
			}

			/* 关闭域名输入面板 */
			function closeInputDomainPanel()
			{
				var divCon = id("showDomainInputPanelId");

				if (undefined != divCon)
				{
					hideCoverB(function(){
						divCon.style.visibility = "hidden";
						divCon.style.top = "-9999px";
						document.body.removeChild(divCon);
					});
				}
			}
		}

		/* 补全禁用域名规则 */
		function fulfilforbidDomainArray(selList)
		{
			/* 对是否需要显示选中状态进行处理 */
			for (var i in gForbidDomainArray)
			{
				/* 新增checked字段 */
				gForbidDomainArray[i].checked = false;
				if (selList.length > 0)
				{
					for (var j = 0; j < selList.length; j++)
					{
						if (gForbidDomainArray[i][SEC_NAME] == selList[j] && selList[j] != "")
						{
							gForbidDomainArray[i].checked = true;
							break;
						}
					}
				}
			}
		}

		/* 刷新并弹出显示域名列表的窗口 */
		function showForbidDomainWindow(isSelecting, selList)
		{
			closeForbidDomainWindow();	/* 清空和关闭以便重建 */
			freshForbidDomainWindow(isSelecting, selList);

			/* 刷新和显示域名列表窗口 */
			function freshForbidDomainWindow(isSelecting, selList)
			{
				var divCon = id("forbidDomainDGDivId");
				var eptCon, eptDetail, tableDiv, funcUl, addBtn;
				var tableCon, btnCon, delAllBtn, delSelBtn, closeBtn;
				var confirmBtn, cancelBtn;

				/* 对是否需要显示选中状态进行处理 */
				fulfilforbidDomainArray(selList);

				forbidDomainDataGridLs = new DataGrid();
				divCon = document.createElement("div");
				divCon.className = "VigNetControlCon";
				divCon.id = "forbidDomainDGDivId";	/* 弹出窗口的总DIV容器 */
				document.body.appendChild(divCon);

				eptCon = document.createElement("div");
				eptCon.className = "eptManageCon";
				eptCon.id = "eptManageDomainCon";
				divCon.appendChild(eptCon);

				if (true == isSelecting)
				{
					eptTips = document.createElement("h1");
					eptTips.className = "eptAddTimeTips";
					eptTips.innerHTML = label.addDomainTip;
					eptCon.appendChild(eptTips);
				}

				eptDetail = document.createElement("div");
				eptDetail.className = "eptDetailCon";
				eptDetail.id = "eptDomainDetailCon";
				eptCon.appendChild(eptDetail);

				tableDiv = document.createElement("div");
				tableDiv.className = "blockTable blockTableMT";
				eptDetail.appendChild(tableDiv);

				funcUl = document.createElement("ul");
				funcUl.className = "gridToolBar";
				funcUl.id = "forbidDomainFuncUlId";
				tableDiv.appendChild(funcUl);

				addBtn = document.createElement("li");
				addBtn.innerHTML = btn.addDomain;
				addBtn.id = "addForbidDomainBtnId"
				funcUl.appendChild(addBtn);

				tableCon = document.createElement("table");
				tableCon.className = "dataGrid1";
				tableCon.id = "forbidDomainDGList";
				tableDiv.appendChild(tableCon);

				btnCon = document.createElement("div");
				btnCon.className = "closeManagement";
				btnCon.id = "forbidDomainBtnDivId";
				eptCon.appendChild(btnCon);

				if (false == isSelecting)
				{
					delAllBtn = document.createElement("li");
					delAllBtn.onclick = null;
					delAllBtn.id = "showForbidDomainDelAllButton";
					delAllBtn.innerHTML = btn.deleteAll;
					funcUl.appendChild(delAllBtn);

					delSelBtn = document.createElement("li");
					delSelBtn.onclick = null;
					delSelBtn.id = "showForbidDomainDelSelButton";
					delSelBtn.className = "delSelUn";
					delSelBtn.innerHTML = btn.deleteSel;
					funcUl.appendChild(delSelBtn);

					closeBtn = document.createElement("input");
					closeBtn.type = "button";
					closeBtn.className = "btnA subBtn";
					closeBtn.value = btn.close;
					closeBtn.onclick = closeForbidDomainWindow;
					btnCon.appendChild(closeBtn);

					/* 初始化表格控件 */
					forbidDomainDataGridLs.init({
						id:"forbidDomainDGList",
						data:gForbidDomainArray,
						max:MAX_FORBID_DOMAIN_NUMBER,
						edit:false,
						hasSelBox:false,
						paging:{num:8, page:1},
						checkIndex:1,
						head:[{field:label.select, width:60},
							  {field:label.domain, width:240}],
						list:[{name:"checked",
							   type:"checkbox",
							   edit:false,
							   checkDis:"checkboxDisabled",
							   func:forbidDomainItemHandleOnMainWindow},
							   {name:"domain"}],
						toolBar:{id:"forbidDomainFuncUlId",
							asyn:true}
					});

					if (gForbidDomainArray.length > 0)
					{
						delAllBtn.className = "delAll";
						delAllBtn.onclick = forbidDomainClear;
					}
					else
					{
						delAllBtn.className = "delAllUn";
					}
				}
				else
				{
					confirmBtn = document.createElement("input");
					confirmBtn.type = "button";
					confirmBtn.className = "btnA subBtn";
					confirmBtn.value = btn.ok;
					confirmBtn.onclick = function () {forbidDomainSelectedSave(selList);};
					btnCon.appendChild(confirmBtn);

					cancelBtn = document.createElement("input");
					cancelBtn.type = "button";
					cancelBtn.className = "btnA subBtn";
					cancelBtn.value = btn.cancel;
					cancelBtn.onclick = closeForbidDomainWindow;
					btnCon.appendChild(cancelBtn);

					/* 初始化表格控件 */
					forbidDomainDataGridLs.init({
						id:"forbidDomainDGList",
						data:gForbidDomainArray,
						max:MAX_FORBID_DOMAIN_NUMBER,
						edit:false,
						hasSelBox:false,
						paging:{num:8, page:1},
						checkIndex:1,
						head:[{field:label.select, width:60},
							  {field:label.domain, width:240}],
						list:[{name:"checked",
							   type:"checkbox",
							   edit:false,
							   checkDis:"checkboxDisabled",
							   func:forbidDomainItemHandleOnSelWindow},
							   {name:"domain"}],
						toolBar:{id:"forbidDomainFuncUlId"}
					});
				}

				if (gForbidDomainArray.length < MAX_FORBID_DOMAIN_NUMBER)
				{
					addBtn.className = "add";
					addBtn.onclick = function(){
						closeForbidDomainWindow();
						showDomainInputPanel(isSelecting, selList);	/* 弹出输入域名的面板 */
					};
				}
				else
				{
					addBtn.className = "addUn";
					addBtn.onclick = null;
				}

				/* 带背景遮盖的方式显示表格列表窗口 */
				showCoverB(function(){
					divCon.style.visibility = "visible";
					divCon.style.top = "150px";
				});
			}

			/* 关闭域名列表窗口 */
			function closeForbidDomainWindow()
			{
				var divCon = id("forbidDomainDGDivId");

				if (divCon != undefined)
				{
					hideCoverB(function(){
						divCon.style.visibility = "hidden";
						divCon.style.top = "-9999px";
						document.body.removeChild(divCon);
						forbidDomainDataGridLs = null; /* 释放该表格对象 */
					});
				}
			}

			/* 在域名可选列表中选中域名条目时的出发函数 */
			function forbidDomainItemHandleOnSelWindow(index, obj)
			{
				var selCount = 0;

				if (true == obj.obj.checked)
				{
					for (var i = 0; i < gForbidDomainArray.length; i++)
					{
						if (gForbidDomainArray[i].checked == true)
						{
							selCount++;
						}
					}

					if (selCount > MAX_STA_FORBID_DOMAIN_NUMBER)
					{
						showAlert(errStr.invDomainSelected);
						gForbidDomainArray[index].checked = false;
						obj.obj.checked = false;
					}
					else
					{
						gForbidDomainArray[index].checked = true;
					}

				}
				else
				{
					gForbidDomain[index].checked = false;
				}
			}

			/* 在域名管理总表中选中域名条目时的触发处理函数 */
			function forbidDomainItemHandleOnMainWindow(index, obj)
			{
				var delSelBtn = id("showForbidDomainDelSelButton");

				if (true == obj.obj.checked)
				{
					gForbidDomainArray[index].checked = true;
				}
				else
				{
					gForbidDomainArray[index].checked = false;
				}

				/* debug */
				/* showAlert(JSON.stringify(gForbidDomainArray)); */
				if (delSelBtn != undefined)
				{
					var isSelCss = "delSelUn";
					var clickEvent = null;
					for (var i in gForbidDomainArray)
					{
						if (gForbidDomainArray[i].checked == true)
						{
							isSelCss = "delSel";
							clickEvent = forbidDomainDel;
							break;
						}
					}
					delSelBtn.className = isSelCss;
					delSelBtn.onclick = forbidDomainDel;
				}
			}

			/* 清空所有域名 */
			function forbidDomainClear()
			{
				var msg = label.delAllTips;

				if (isDelForbidDomainListUsed(true) == true)
				{
					msg = label.forbidDomainUsedTips;
				}

				showConfirm(msg, function(type){
					if (type == false)
					{
						return;
					}
					else
					{
				var data = {};

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][KEY_TABLE] = uciHostsInfo.secName.forbidDomain;

				showLoading(statusStr.delLoading, undefined, undefined, false);
				$.del(data, function(result){
					closeLoading();
					errHandle(result[ERR_CODE]);
					/* 重新加载并弹出主表窗口 */
					loadForbidDomainList(function () {showForbidDomainWindow(false, []);
					});
				});

					}
				});

			}

			/* 删除已被选中的域名条目 */
			function forbidDomainDel()
			{
				var msg = label.delSelTips;

				if (isDelForbidDomainListUsed(false) == true)
				{
					msg = label.forbidDomainUsedTips;
				}

				showConfirm(msg, function(type){
					if (type == false)
					{
						return;
					}

					var data = {};
					var moduleName = uciHostsInfo.fileName;
					var optName =  uciHostsInfo.optName.name;

					data[moduleName] = {};
					data[moduleName][optName] = [];

					for (var i in gForbidDomainArray)
					{
						if (true == gForbidDomainArray[i].checked)
						{
							data[moduleName][optName].push(gForbidDomainArray[i][SEC_NAME]);
						}
					}

					showLoading(statusStr.delLoading, undefined, undefined, false);
					$.del(data, function(result){
						closeLoading();
						errHandle(result[ERR_CODE]);
						/* 重新加载并弹出主表窗口 */
						loadForbidDomainList(function () {showForbidDomainWindow(false, []);
						});
					});
				});
			}

			/* 站点选中域名后的保存操作 */
			function forbidDomainSelectedSave(selList)
			{
				var data = {};
				var args = {};
				var forbidDomainArray = [];

				for(var i = 0; i < gForbidDomainArray.length; i++)
				{
					for(var j = 0; j < gStaForbidDomainSelectedArray.length; j++)
					{
						if(gForbidDomainArray[i][SEC_NAME] == gStaForbidDomainSelectedArray[j])
						{
							if(!gForbidDomainArray[i].checked)
							{
								gStaForbidDomainSelectedArray.splice(j,1);	// 删除原选中域名中被取消的域名项
							}
							else
							{
								gForbidDomainArray[i].checked = false;	// 修改gForbidDomainArray中原来就为选中状态的项的checked值为false,使得修改后数组中选中状态的项全部为新增域名项
							}
						}
					}
				}

				forbidDomainArray = gStaForbidDomainSelectedArray.slice(0);

				/* 新增的域名放在表头首先显示 */
				for(var i = 0; i < gForbidDomainArray.length; i++)
				{
					if (gForbidDomainArray[i].checked)
					{
						forbidDomainArray.unshift(gForbidDomainArray[i][SEC_NAME]);
					}
				}

				if (isSaving())
				{
					return;
				}

				data[uciHostsInfo.fileName] = {};
				data[uciHostsInfo.fileName][uciHostsInfo.dynData.setHostInfo] = args;
				args[uciHostsInfo.optName.mac] = gEditItem[uciHostsInfo.optName.mac];
				args[uciHostsInfo.optName.isBlocked] = gEditItem[uciHostsInfo.optName.blocked];
				args[uciHostsInfo.optName.name] = gEditItem[uciHostsInfo.optName.hostname];
				args[uciHostsInfo.optName.downLimit] = gEditItem[uciHostsInfo.optName.downLimit];
				args[uciHostsInfo.optName.upLimit] = gEditItem[uciHostsInfo.optName.upLimit];
				args[uciHostsInfo.optName.limitTime] = gEditItem[uciHostsInfo.secName.limitTime];
				args[uciHostsInfo.optName.forbidDomain] = forbidDomainArray.join(",");

				setSavingFlg();	/* 与站点详细信息保存方式一致, 增加操作计数 */
				showLoading(statusStr.dealLoading, undefined, undefined, false);
				$.action(data, function(result){
					closeLoading();
					clrSavingFlg();
					if (ENONE == result[ERR_CODE])
					{
						/* 更新已选中条目 */
						gStaForbidDomainSelectedArray = forbidDomainArray;
						/* 选择完成后要关闭选择表格窗口 */
						closeForbidDomainWindow();
						/* 立刻刷新站点的域名信息列表 */
						showStaForbidDomainList(forbidDomainArray);
					}
					else
					{
						errHandle(result[ERR_CODE]);
					}
					bEptGetData();
				});
			}

			/* 检查禁止访问域名条目是否存在被引用关系 */
			function isDelForbidDomainListUsed(delType)
			{
				/* 当选择删除所有操作 */
				if (delType == true)
				{
					for (var i = 0; i < epStaList.length; i++)
					{
						if (epStaList[i].forbid_domain != "")
						{
							return true;
						}
					}
				}
				else
				{
					var forbidDomainNameList = [];

					for (var i = 0; i < gForbidDomainArray.length; i++)
					{
						if (gForbidDomainArray[i].checked == true)
						{
							for (var j = 0; j < epStaList.length; j++)
							{
								forbidDomainNameList = epStaList[j].forbid_domain && epStaList[j].forbid_domain.split(",") || [];
								for (var k = 0; k < forbidDomainNameList.length; k++)
								{
									if (gForbidDomainArray[i][SEC_NAME] == forbidDomainNameList[k])
									{
										return true;
									}
								}
								forbidDomainNameList.length = 0;
							}
						}
					}
				}

				return false;
			}
		}

		/* 从后台加载总的时间规则列表 */
		function loadLimitTimeList(callback)
		{
			var data = {};
			var moduleStr = uciHostsInfo.fileName;
			var limitTimeStr = uciHostsInfo.dynData.limitTime;

			data[moduleStr] = {};
			data[moduleStr][KEY_TABLE] = limitTimeStr;

			$.query(data, function(result){
				/* 是否要判断一下是否正确收到...*/
				gLimitTimeArray = formatTableData(result[moduleStr][limitTimeStr]) || [];
				typeof callback == "function" && callback();
			});
		}

		/* 从后台加载总的域名列表 */
		function loadForbidDomainList(callback)
		{
			var data = {};
			var moduleStr = uciHostsInfo.fileName;
			var forbidDomainStr = uciHostsInfo.dynData.forbidDomain;

			data[moduleStr] = {};
			data[moduleStr][KEY_TABLE] = forbidDomainStr;

			$.query(data, function(result){
				/* 是否要判断一下是否正确收到...*/
				gForbidDomainArray = formatTableData(result[moduleStr][forbidDomainStr]) || [];
				typeof callback == "function" && callback();
			});
		}

		/*  初始化域名和时间规则 */
		function initNetControl()
		{
			loadLimitTimeList(null);
			loadForbidDomainList(null);
		}

		function getHostName() {
			$.query({"protocol":{"name":"dhcp"}}, function (result) {
				if (ENONE == result.error_code) {
					capRouterName = result.protocol.dhcp.hostname;
				}
			});
		}

		function resetNetControlEvt(isHnatOpen)
		{
			id("addForbidDomainLinkLabel").onclick = function() {
				loadForbidDomainList(function () {showForbidDomainWindow(false, []);});
			};

			if (isHnatOpen)
			{
				id("addLimitTimeLinkLabel").onclick = function() {
					showConfirm(label.closeHnatNote, function(confirm){
						if (confirm)
						{
							closeHNat(loadLimitTimeList(function () {showLimitTimeWindow(false, []);}));
						}
					});
				};
			}
			else
			{
				id("addLimitTimeLinkLabel").onclick = function() {
					loadLimitTimeList(function () {showLimitTimeWindow(false, []);});
				};
			}

		}

		function closeHNat(cb)
		{
			var reqData = {};
			var argData = {};
			reqData[FILE_HNAT] = {};
			argData[KEY_ENABLE] = DISABLE;
			reqData[FILE_HNAT][SEC_HNAT] = argData;
			$.modify(reqData, function(result){
				if (result[ERR_CODE] == ENONE) {
					isHnatOpen = false;
					resetNetControlEvt(isHnatOpen);
					cb && cb();
				} else {
					showAlert("关闭硬件NAT失败");
				}
			});
		}

		function getHnatInfo()
		{
			var reqData = {};
			reqData[FILE_HNAT] = {};
			reqData[FILE_HNAT][KEY_NAME] = [SEC_HNAT];

			$.query(reqData, function(result){
				if (result[ERR_CODE] == ENONE) {
					isHnatOpen = result[FILE_HNAT][SEC_HNAT][KEY_ENABLE] == ENABLE;
				}
				menuInit_Ept();
				resetNetControlEvt(isHnatOpen);
			});
		}

		if (gHnatSupport) {
			getHnatInfo();
		} else {
			menuInit_Ept();
			resetNetControlEvt(false);
		}
		getHostName();

		if (gMacFilterSupport)
		{
			$("#blackListOn").change(onRadioChange);
			$("#whiteListOn").change(onRadioChange);
			$("#off").change(onRadioChange);
		}
	}
	init();
</script>
<div class="bConfL bConfLBC"></div>
<div class="bConfR bConfRBC"></div>
<div id="bConCnt">
	<div class="bConfLCnt bConfLBC positionRel">
		<h1 class="bMdelTitle">{%label.eptManagement%}</h1>
		<div id="appsLMenuCon" class="menuCon">
			<ul id="menuBEptMngUl"></ul>
		</div>
	</div>
	<div class="bConfRCnt bConfRBC">
		<div id="eptMngConTitle" class="title">
			<label id="deviceNum" class="title">{%label.linkedEpt%}</label>
			<li class="textCon" id="routerSelLi">
				<span id="routerSel" class="select">
					<span class="value hsValue"></span>
					<i class="arrow"></i>
				</span>
			</li>
			<span id="addLabelSpan">
				<a id="addLimitTimeLinkLabel">{%label.limitTimeManagement%}</a>
				<a id="addForbidDomainLinkLabel">{%label.forbidDomainManagement%}</a>
			</span>
		</div>
		<div id="eptMngCon">
			<div id="eptMngRCon" class="bcRCon">
				<div id="blackWhiteListSwitchBlock" class="switchBlock disNone">
					<div class="block">
						<ul class="gridLine gridLineA">
							<label class="desLblA">{%label.currentMode%}</label>
							<input id="blackListOn" name="blackWhiteListSwitch" class="switchRadio" type="radio" /><label class="noteLbl" for="blackListOn">{%label.blackList%}</label>
							<input id="whiteListOn" name="blackWhiteListSwitch" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="whiteListOn">{%label.whiteList%}</label>
							<input id="off" name="blackWhiteListSwitch" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="off">{%label.off%}</label>
						</ul>
					</div>
				</div>
				<div id="eptMngListTitle" class="title disNone">
					<label class="title">{%label.blackListTitle%}</label>
				</div>
				<div id="eptMngList"></div>
				<div id="eptMngDetail"></div>
			</div>
		</div>
	</div>
</div>