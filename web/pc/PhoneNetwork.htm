<script type="text/javascript">
	function init()
	{
		var uciFile = uciProto.fileName;
		var uciWan = uciProto.secName.wan;
		var uciStatic = uciProto.secName.sta;
		var uciPppoe = uciProto.secName.pppoe;
		var uciDynIp = uciProto.secName.dhcp;
		var wanDetectWaitHd = null;
		var wanDetectHd = null;

		function initWanCfg(result)
		{
			if (ENONE == result[ERR_CODE])
			{
				var info = result[uciDeviceInfo.fileName][uciDeviceInfo.secName.info];
				var version = (info[uciDeviceInfo.optName.swVer].split(" "))[0];

				gNetworkCfg[uciProto.optName.type] = result[uciFile][uciWan][uciProto.optName.type];
				gNetworkCfg[uciProto.optValue.proto.pppoe] = result[uciFile][uciPppoe];
				gNetworkCfg[uciProto.optValue.proto.staticIp] = result[uciFile][uciStatic];
				gNetworkCfg[uciProto.optValue.proto.dynIp] = result[uciFile][uciDynIp];
				gNetworkCfg["lanIp"] = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ip];
				gOldLanIP = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ip];
				gLanIP = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ip];
				gLanIPMode = result[uciNetwork.fileName][uciNetwork.secName.lan][uciNetwork.optName.ipMode];
				if (gSupportWanPortSwap) {
					gWanPortSelCfg = result[uciFile][uciWan][uciProto.optName.port];
				}

				id("softVersionWzd").innerHTML += version;
				gCloudAccountBR["softVersion"] = info[uciDeviceInfo.optName.swVer];
			}
		}

		function getWanCfg()
		{
			var data = {};

			data[uciFile] = {};
			data[uciFile][KEY_NAME] = [uciWan, uciStatic, uciPppoe, uciDynIp];
			data[uciDeviceInfo.fileName] = {};
			data[uciDeviceInfo.fileName][KEY_NAME] = uciDeviceInfo.secName.info;
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = uciNetwork.secName.lan;

			$.query(data, initWanCfg);
		}

		id("skipWanDetect").onclick = function(){
			wzdNetWorkModeChange(WAN_TYPE_PPPOE);
		};

		function continueDetect()
		{
			var data = {};

			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][uciNetwork.action.wanDetect] = null;
			$.action(data, function(result){
				var wanType = parseInt(result[uciNetwork.optName.proto]);

				switch(wanType)
				{
				case ERROR_INTERNEL_ERROR:
				case ERROR_INPUT_PARA_ERROR:
				case WAN_IFACE_NOT_LINK:
					$.setTimeout(continueDetect, 1000);
					break;
				case WAN_TYPE_DETECTING:
				case WAN_TYPE_STATIC:
				case WAN_TYPE_DHCP:
				case WAN_TYPE_PPPOE:
				default:
					$("#detecting").css("display", "block");
					$("#detectErr").css("display", "none");
					$.setTimeout(function(){
						wanDetectWaitHd = $.setTimeout(function(){
							$("#detecting").css("display", "none");
							$("#detectErr").css("display", "block");
							continueDetect();
						}, 10*1000);
						wzdWanDetect();
					}, 2000);
					break;
				}
			});
		}

		function wzdWanDetect()
		{
			var data = {};

			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][uciNetwork.action.wanDetect] = null;

			function wzdWanDetectResult()
			{
				$.action(data, function(resp){
					var wanType = parseInt(resp[uciNetwork.optName.proto]);

					if (true == $.local)
					{
						wanType = WAN_TYPE_PPPOE;
					}

					switch(wanType)
					{
					case ERROR_INTERNEL_ERROR:
					case ERROR_INPUT_PARA_ERROR:
					case WAN_IFACE_NOT_LINK:
						$("#detecting").css("display", "none");
						$("#detectErr").css("display", "block");
						clearTimeout(wanDetectWaitHd);
						continueDetect();
						break;
					case WAN_TYPE_DETECTING:
						wanDetectHd = $.setTimeout(wzdWanDetectResult, 1000);
						break;
					case WAN_TYPE_STATIC:
					case WAN_TYPE_DHCP:
					case WAN_TYPE_PPPOE:
					default:
						clearTimeout(wanDetectWaitHd);
						bWzdWanTypeDetected = true;
						wzdNetWorkModeChange(wanType);
						break;
					}
				});
			}

			wzdWanDetectResult();
		}

		function getMeshCfg() {
			var data = {"mesh":{"name":"config"}};
			$.query(data, function(result) {
				if (ENONE == result[ERR_CODE]) {
					gPcbEnable = result.mesh.config.pcb_enable;
				}
			});
		}

		function getPortManage() {
			var WANNUM = 2;
			$.query({"port_manage":{"table":"mwan"}},function(res) {
				gMultiWanOpen = true;
				for (var i = 0; i < WANNUM; i++) {
					if (parseInt(res.port_manage.mwan[i]["mwan_"+(i+1)].enable) == 0) {
						gMultiWanOpen = false;
					}
				}

				if (gMultiWanOpen) {
					$(".wdsConfig").css("display", "none");
				}
			});
		}

		function getIPv6Info() {
			$.query({"protocol":{"name":"ipv6_info"}},function(res) {
				if ('on' == res.protocol.ipv6_info.enable) {
					gIpv6Enable = true;
					$(".wdsConfig").css("display", "none");
				}
			});
		}

		id("meshHelp").onclick = function() {
			loadPage("PhoneMeshHelp.htm", "phCon");
		};

		id("phWlanWDS").onclick = function() {
			loadPage("PhoneWDS.htm", "phCon");
		};

		id("reDetect").onclick = function() {
			loadPage("PhoneNetwork.htm", "phCon");
		};

		if (gSysModeSupport) {
			$(".wdsConfig").css("display", "inline-block");
		}

		try
		{
			getWanCfg();
			if (gMeshSupport) {
				getMeshCfg();
			}
			if (gSupportPortManage) {
				getPortManage();
			}
			if (gIpv6Support) {
				getIPv6Info();
			}
		}catch(ex){}

		wanDetectWaitHd = $.setTimeout(function(){
			clearTimeout(wanDetectHd);
			$("#detecting").css("display", "none");
			$("#detectErr").css("display", "block");
			continueDetect();
		}, 10*1000);
		wzdWanDetect();
	}
	init();
</script>
<style type="text/css">
	img.detectingGif{
		height:30px;
		margin:120px auto 0;
		width:30px;
	}
	p.detectTip{
		color:#ffffff;
		font-size:14px;
		text-align:center;
	}
	p.leftTip{
		color:#ffffff;
		font-size:14px;
		text-align:left;
	}
	.textCenter{
		text-align:center;
	}
	.bold{
		font-weight:bold;
	}
	p.detecting{
		margin-top:20px;
	}
	p.wanLinkDown{
		margin-top:30px;
	}
	img.detectErr{
		margin:40px auto 0;
	}
	a.skip{
		color:#feeb1a;
		font-size:14px;
		margin:20px auto 0;
		width:150px;
		display:block;
	}
	span.wds{
		color:#feeb1a;
		font-size:14px;
	}
	.ib{
		display: inline-block;
	}
	.wdsConfig{
		margin:40px 36px auto;
		width:280px;
		padding-top:12px;
		border-top:0.5px solid;
		border-color:rgba(255, 255, 255, 0.4);
	}
	i.meshHelp{
		background:url(../web-static/images/help_white.png) no-repeat;
		height:18px;
		width:18px;
		background-size:cover;
		vertical-align:top;
		margin-top:1px;
		margin-left:4px;
	}
</style>
<div class="textCenter" id="detecting">
	<img class="detectingGif" src="../web-static/images/wzdDetecting.gif" />
	<p class="detectTip detecting">{%label.checkingWait%}</p>
</div>
<div class="textCenter disNone" id="detectErr">
	<img class="detectErr" src="../web-static/images/connect_fail.png" />
	<p class="detectTip wanLinkDown bold">{%errStr.phCableUnlink%}</p>
	<ul class="phInputUl">
		<p class="leftTip" style="margin-top:20px;">{%label.phCheckWan%}</p>
		<p class="leftTip">{%label.phCheckLightFlash%}</p>
		<p class="leftTip">{%label.phContactNetProvider%}</p>
	</ul>
	<div class="phFunc">
		<label id="reDetect" class="phOneBtn">{%label.phReDetect%}</label>
	</div>
	<a id="skipWanDetect" class="skip bold" href="javascript:void(0);">{%label.phSkipDetect%}</a>
	<div class="wdsConfig">
		<p class="leftTip" style="margin-top:8px;">{%label.phExtendWDS%}</p>
		<p class="leftTip" style="margin-top:8px;">{%label.phRecommandMesh%}
			<i id="meshHelp" class="meshHelp ib"></i>
		</p>
		<p class="leftTip" style="margin-left:0;margin-top:8px;">{%label.phOrUse%}
			<span id="phWlanWDS" class="wds bold">{%label.phWDS%}</span>
		</p>
	</div>
</div>