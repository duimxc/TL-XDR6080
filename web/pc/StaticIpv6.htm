<style type="text/css">
	li.macCloneLi{
		color:#FFFFFF;
		font-size:12px;
		line-height:20px !important;
	}
</style>
<div class="block">
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.netMode%}</label>
		<li class="textConA textCon">
			<span id="wanSel" class="select">
				<span class="value hsValueA"></span>
				<i class="arrow"></i>
			</span>
		</li>
	</ul>
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.ipv6Addr%}</label>
		<li class="textConA textCon"><input id="ip" class="textA text hoverBd" maxLength="71" /><i class="tip"></i></li>
	</ul>
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.ipv6PrefixLen%}</label>
		<li class="textConA textCon "><input class="textA text hoverBd disable" disabled="disabled" maxLength="71" value="64"/><i class="tip"></i></li>
	</ul>
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.gateway%}</label>
		<li class="textConA textCon"><input id="gateway" class="textA text hoverBd" maxLength="71" /><i class="tip"></i></li>
	</ul>
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.dns0%}</label>
		<li class="textConA textCon"><input id="pri_dns" class="textA text hoverBd" maxLength="71" /><i class="tip"></i></li>
	</ul>
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.dns1%}</label>
		<li class="textConA textCon"><input id="snd_dns" class="textA text hoverBd" maxLength="71" /><i class="tip"></i></li>
		<label class="noteLbl">{%label.optional%}</label>
	</ul>
	<div class="blockFuncA">
		<input id="save" type="button" value="{%btn.save%}" class="btnA subBtn" />
	</div>
	<ul id="wanStatus" class="gridLine gridLineA gridStatus">
		<i></i>
		<label id="wanStatusLbl" class="noteLbl"></label>
	</ul>
</div>
<div class="title">
	<label class="title">{%label.highSet%}</label>
	<i class="helpBtn" helpStr="staticIpv6AdvHelp"></i>
</div>
<div class="block">
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.mtu%}</label>
		<li class="textConB textCon"><input id="mtu" class="textB text hoverBd" maxLength="4" /></li>
		<label class="noteLbl">{%label.mtuComment%}</label>
	</ul>
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.wanMac%}</label>
		<li class="textConA textCon">
			<span id="wanMacSel" class="select">
				<span class="value hsValueA"></span>
				<i class="arrow"></i>
			</span>
		</li>
	</ul>
	<ul id="macCloneUl" class="gridLine gridLineA">
		<li class="textConAL textCon"><input id="wanMac" class="textA text hoverBd" maxLength="17" /><i class="tip"></i></li>
		<li class="textConAL macCloneLi"></li>
	</ul>
	<div class="blockFuncA">
		<input id="saveHighSet" type="button" value="{%btn.save%}" class="btnA subBtn" />
	</div>
</div>
<script type="text/javascript">
	function init(currentWanPortIdx)
	{
		var uciFile = "protocol";
		var uciWan = "wan";
		var uciWanType = uciProto.optName.type;
		var uciIpaddr = "ip6addr";
		var uciGateway = "ip6gw";
		var uciPriDns = "pri_dns";
		var uciSndDns = "snd_dns";
		var uciMtu = uciProto.optName.mtu;
		var uciWanMac = uciProto.optName.macaddr;

		var currentProto;

		function errHandle(errNo, objOrId)
		{
			var showStr = "";

			switch (errNo)
			{
			case ENONE:
				return false;
			case EIPV6INVIP:
				showStr = errStr.ipv6AddrErr;
				break;
			case EIPV6INVIPFMT:
				showStr = errStr.ipv6AddrFmtErr;
				break;
			case EIPV6INVGROUPIP:
				showStr = errStr.ipv6AddrGroupErr;
				break;
			case EIPV6LOOP:
				showStr = errStr.ipv6AddrLoopErr;
				break;
			case EIPV6INVGTW:
				showStr = errStr.gatewayErr;
				break;
			case EIPV66TO4ADDR:
				showStr = errStr.ipv6Addr6To4Err;
				break;
			case EINVMTU:
				showStr = errStr.stcMtuErr;
				break;
			case EIPV6INVFDNSVR:
				showStr = errStr.primDnsErr;
				break;
			case EIPV6INVSDNSVR:
				showStr = errStr.seDnsErr;
				break;
			case EIPV6LINKLOCAL:
				showStr = errStr.ipv6LinkLoaclErr;
				break;
			/*
			case ECONFLICTGATEWAY:
				showStr = errStr.ipAddrLanGatewayConflict;
				break;
			case ECONFLICTFDNS:
				showStr = errStr.ipAddrLanFDNSConflict;
				break;
			case ECONFLICTSDNS:
				showStr = errStr.ipAddrLanSDNSConflict;
				break;
			*/
			case ECONFLICTLANMAC:
				showStr = errStr.lanWanMacConflict;
				break;
			case ECONFLICTWANMAC:
				showStr = errStr.mulWanMacConflict;
				break;
			default:
				showStr = errStr.invRequestFail;
				break;
			}

			showAlert(showStr, objOrId);
			return true;
		}

		function onSave(currentWanPortIdx)
		{
			wanCheckWDS(function(){
				var cfg = {}, cfgProto = {}, cfgStaic = {}, cfgWan = {};
				cfg[uciFile] = cfgProto;
				if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
					cfgProto[WAN_NAME] = cfgWan;
					cfgProto[STATIC_NAME] = cfgStaic;
				}else{
					cfgProto[WAN_NAME + "_" + currentWanPortIdx] = cfgWan;
					cfgProto[STATIC_NAME + "_" + currentWanPortIdx] = cfgStaic;
				}

				var ipVal = id("ip").value, gatewayVal = id("gateway").value;
				var primDnsVal = id("pri_dns").value, seDnsVal = id("snd_dns").value;

				/* 检查合法性 */
				if (errHandle(checkIPv6(ipVal), "ip") ||
					errHandle(checkGatewayV6(gatewayVal), "gateway") ||
					errHandle(checkPriDnsV6(primDnsVal), "pri_dns") ||
					errHandle(checkSeDnsV6(seDnsVal), "snd_dns"))
				{
					return;
				}

				/* 不需要去掉前导0，但要替换中文冒号 */
				ipVal = ipVal.replace(/：/g, ":");
				$("#ip").val(ipVal);
				gatewayVal = gatewayVal.replace(/：/g, ":");
				$("#gateway").val(gatewayVal);
				primDnsVal = primDnsVal.replace(/：/g, ":");
				$("#pri_dns").val(primDnsVal);
				seDnsVal = seDnsVal.replace(/：/g, ":");
				$("#snd_dns").val(seDnsVal);

				/* protocol.staticv6 */
				cfgStaic[uciIpaddr] = ipVal;
				cfgStaic[uciGateway] = gatewayVal;
				cfgStaic[uciPriDns] = primDnsVal;
				cfgStaic[uciSndDns] = seDnsVal;

				/* protocol.wan */
				cfgWan[uciWanType] = STATIC_NAME;

				setLoadingId("save");
				hsLoading(true);

				$.modify(cfg, function(result){
					currentProto = STATIC_NAME;

					hsLoading(false);
					//刷新WAN口状态
					setTimeout(function(){
						lanPrefixChange(false);
						preDelgOnFlag = false;
					}, 2000);

					updateTimerHandle = $.setTimeout(function(){
						refreshWanStatus(currentWanPortIdx);
					}, 0);
					return errHandle(result[ERR_CODE]);
				});
			});
		}

		function saveHighSet(currentWanPortIdx)
		{
			wanCheckWDS(function(){
				var cfg = {}, cfgProto = {}, cfgStaic = {}, cfgWan = {};
				cfg[uciFile] = cfgProto;
				if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
					cfgProto[uciWan] = cfgWan;
					cfgProto[STATIC_NAME] = cfgStaic;
				}else{
					cfgProto[uciWan + "_" + currentWanPortIdx] = cfgWan;
					cfgProto[STATIC_NAME + "_" + currentWanPortIdx] = cfgStaic;
				}
				var mtuVal = id("mtu").value;
				var wanMac = id("wanMac");
				var wanMacVal = wanMac.value;

				if (errHandle(checkMtu(mtuVal), "mtu") ||
					wanMacErrHandle(checkMac(wanMacVal), wanMac))
				{
					return;
				}

				mtuVal = hideLeadingZeros(mtuVal);
				id("mtu").value = mtuVal;
				cfgStaic[uciMtu] = mtuVal;

				cfgWan[uciWanMac] = wanMacVal;

				setLoadingId("saveHighSet");
				hsLoading(true);

				$.modify(cfg, function(result){
					hsLoading(false);
					getStaIpData(currentWanPortIdx);
					return errHandle(result[ERR_CODE]);
				});

				//刷新WAN口状态
				updateTimerHandle = $.setTimeout(function(){
					refreshWanStatus(currentWanPortIdx);
				}, 2000);
			});
		}

		function setStaicWanStatus(data,currentWanPortIdx)
		{
			var wanStatus;
			if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
				wanStatus = data[uciNetwork.fileName][WAN_STATUS_NAME];
			}else{
				wanStatus = data[uciNetwork.fileName][WAN_STATUS_NAME + "_" + currentWanPortIdx];
			}
			var errCode;

			if (wanStatus["proto"] != STATIC_NAME)
			{
				clearTimeout(updateTimerHandle);
				return;
			}

			switch(parseInt(wanStatus["link_status"]))
			{
			case LINK_DOWN:
				errCode = wanStatus[uciNetwork.optName.code];

				/* 异常断开连接的，加注错误提示 */
				if ((LINK_CODE_MANUAL != errCode) &&
					(LINK_CODE_NORMAL != errCode) &&
					(LINK_CODE_INET_ERR != errCode))
				{
					hsStatSet("error", linkStatus[LINK_DOWN] + label.lBrackets + linkCode[errCode] + label.rBrackets);
					break;
				}

				hsStatSet("error", linkStatus[LINK_DOWN]);
				break;
			case LINK_UP:
				hsStatSet("correct", linkStatus[LINK_UP]);
				break;
			default:
				hsStatSet("link", linkStatus[status.status]);
				break;
			}
		}

		refreshWanStatus = function(currentWanPortIdx)
		{
			var data = {};
			data[uciNetwork.fileName] = {};
			if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
				data[uciNetwork.fileName][KEY_NAME] = [WAN_STATUS_NAME];
			}else{
				data[uciNetwork.fileName][KEY_NAME] = [WAN_STATUS_NAME + "_" + currentWanPortIdx];
			}
			if (updateTimerHandle)
			{
				clearTimeout(updateTimerHandle);
			}

			$.query(data, function(res){
				setStaicWanStatus(res,currentWanPortIdx);
				updateTimerHandle = $.setTimeout(function(){
					refreshWanStatus(currentWanPortIdx);
				}, 2000);
			});
		}

		function setStaIpCfg(ALL_DATA,currentWanPortIdx)
		{
			var data = ALL_DATA[uciFile];
			var wanv6Cfg,staCfg;
			if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
				wanv6Cfg = data[WAN_NAME];
				staCfg = data[STATIC_NAME];
				currentProto = ALL_DATA[uciNetwork.fileName][WAN_STATUS_NAME]["proto"];
			}else{
				wanv6Cfg = data[WAN_NAME + "_" + currentWanPortIdx];
				staCfg = data[STATIC_NAME + "_" + currentWanPortIdx];
				currentProto = ALL_DATA[uciNetwork.fileName][WAN_STATUS_NAME + "_" + currentWanPortIdx]["proto"];
			}

			$("#ip").val(staCfg[uciIpaddr]);
			$("#gateway").val(staCfg[uciGateway]);
			$("#pri_dns").val(staCfg[uciPriDns]);
			$("#snd_dns").val(staCfg[uciSndDns]);
			$("#mtu").val(staCfg[uciMtu]);

			setMacInfo(ALL_DATA,currentWanPortIdx);

			/* 固态IP没有前缀授权 */
			if (currentProto == STATIC_NAME)
			{
				lanPrefixChange(false);
			}
			if(currentWanPortIdx >= 2 && typeof currentWanPortIdx != "undefined"){
				disableBtn("PreDelgOn",true);
				disableBtn("PreDelgOff",true);
			}else{
				disableBtn("PreDelgOn",false);
				disableBtn("PreDelgOff",false);
			}

			setStaicWanStatus(ALL_DATA,currentWanPortIdx);
		}

		function getStaIpData(currentWanPortIdx)
		{
			var data = {};
			data[uciFile] = {};
			if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
				data[uciFile][KEY_NAME] = [WAN_NAME, STATIC_NAME,"wan"];
				data[uciNetwork.fileName] = {};
				data[uciNetwork.fileName][KEY_NAME] = [WAN_STATUS_NAME, uciNetwork.dynData.ifaceMac];
			}else{
				data[uciFile][KEY_NAME] = [WAN_NAME + "_" + currentWanPortIdx, STATIC_NAME + "_" + currentWanPortIdx,"wan_"+ currentWanPortIdx];
				data[uciNetwork.fileName] = {};
				data[uciNetwork.fileName][KEY_NAME] = [WAN_STATUS_NAME + "_" + currentWanPortIdx, uciNetwork.dynData.ifaceMac];
			}
			$.query(data, function(res){
				setStaIpCfg(res,currentWanPortIdx);
			});
		}
		if(typeof currentWanPortIdx == "undefined"){
			selectInit("wanSel", wanOptions, LINK_TYPE_STATIC_IP, wanSelectChange);
		}else{
			// 多WAN开启时不支持桥模式选择
			var wanNewOptions = wanOptions.slice(0,wanOptions.length - 1);
			selectInit("wanSel", wanNewOptions, LINK_TYPE_STATIC_IP, wanSelectChange);
		}

		getStaIpData(currentWanPortIdx);
		refreshWanStatus(currentWanPortIdx);
		refreshLanStatus(currentWanPortIdx);

		id("save").onclick = function(){
			onSave(currentWanPortIdx);
		};
		id("saveHighSet").onclick = function(){
			saveHighSet(currentWanPortIdx);
		}

		if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
			id("wanSel").disable(true);
			disableInput("ip", true);
			disableInput("mtu", true);
			disableInput("wanMac",true);
			disableInput("gateway", true);
			disableInput("pri_dns", true);
			disableInput("snd_dns", true);
			disableBtn("save", true);
			disableBtn("saveHighSet", true);
		}
	}

	function initWanPortSel(){
		if($("#dualWanIpv6Wrapper").is(":hidden")){
			// 多WAN未开启
			init();
		}else{
			var currentSelPort = $("#dualWanIpv6Wrapper").find("label.selected").index();
			var currentWanPortIdx = currentSelPort + 1;
			init(currentWanPortIdx);
		}
	}
	initWanPortSel();
</script>