<script type="text/javascript">
	function init()
	{
		var uciFile = uciWireless.fileName;
		var uciSecWifi2G = uciWireless.dynData.host_2g;
		var optSsid = uciWireless.dynOptName.ssid;
		var optEncrypt = uciWireless.dynOptName.encryption;
		var optKey = uciWireless.dynOptName.key;

		var wzdWirelessName2G = id("wzdWirelessName2G");
		var wzdWirelessPwd2G = id("wzdWirelessPwd2G");
		var INLINE_BLOCK = ((isIESix || isIESeven) ? "inline":"inline-block");
		var oriWifiCfg = {};

		gIsWifiDevice = false;	/* 是无线设备连接管理页面 */

		function wzdWirelessPwdConfirm()
		{
			var tipStr = label.confirmNoWirelessPwd;
			var onYesCbk = function(){wzdWirelessPwd2G.focus();};
			var onNoCbk = saveCfgHandle;

			showWzdConfirm(tipStr, onYesCbk, onNoCbk, btn.toPwd, btn.unPwd);
		}

		function wzdWirelessSsidConfirm()
		{
			var tipStr = label.confirmSsidHasCnStr;
			var onYesCbk = function(){wzdWirelessName2G.select();};
			var onNoCbk = checkWlanPwdHandle;

			showWzdConfirm(tipStr, onYesCbk, onNoCbk);
		}

		function checkSsidInput2G()
		{
			var ssid = wzdWirelessName2G.value;

			closeNote("wzdAntNote2G");

			/* 检查合法性 */
			if (0 == ssid.length)
			{
				showNote("wzdAntNote2G", errStr.wlanSsidErr);
				return false;
			}

			if (/^ +$/gi.test(ssid) == true)
			{
				showNote("wzdAntNote2G", errStr.wlanSsidBlank);
				return false;
			}

			/* 检查合法性 */
			if(!checkWifiName(ssid, 32, 1))
		    {
				showNote("wzdAntNote2G", errStr.wlanSsidLenErr);
				return false;
		    }

			return true;
		}

		function pwdCheckMixChars(str)
		{
			var hasNum = false;
			var hasLetter = false;
			var hasSymbol = false;

			hasNum = /\d/g.test(str);
			hasLetter = /[a-zA-Z]/g.test(str);
			hasSymbol = /[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]/g.test(str);

			return (hasNum && hasSymbol && hasLetter);
		}

		function checkWlanPwdInput2G()
		{
			closeNote("wzdPwdNote2G");
			closeNote("pwdDepNote2G");

			var errorNo = checkWlanPwd(wzdWirelessPwd2G.value);
			if (EINVWLANPWD == errorNo)
			{
				showNote("wzdPwdNote2G", errStr.wlanPwdInvalid);
				return false;
			}
			else if (EINVPSKLEN == errorNo)
			{
				showNote("wzdPwdNote2G", errStr.wlanWzdPwdLenValid);
				return false;
			}

			closeNote("wzdPwdNote2G");
			return true;
		}

		function checkWlanPwdDep2G()
		{
			var width = 24, tip = "";
			var lgPwdlessTip = "none";
			var pwdValue = wzdWirelessPwd2G.value;
			var len = pwdValue.length;
			var lgPwdNoteVi = "visible";
			var iClass = "warn";
			var errorNo = checkWlanPwd(wzdWirelessPwd2G.value);

			if (EINVWLANPWD == errorNo)
			{
				closeNote("pwdDepNote2G");
				showNote("wzdPwdNote2G", errStr.wlanPwdInvalid);
				return false;
			}

			if (len >= 0 && len < 8)
			{
				lgPwdNoteVi = "hidden";
				lgPwdlessTip = INLINE_BLOCK;
			}
			else if (/^\d+$/.test(pwdValue) ||
					/^[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]+$/.test(pwdValue) ||
					/^[a-zA-Z]+$/.test(pwdValue))
			{
				if (len <= 12)
				{
					tip = label.weak;
					width = width;
				}
				else
				{
					tip = label.media;
					width = width*2;
				}
			}
			else if (true == pwdCheckMixChars(pwdValue))
			{
				tip = label.strong;
				iClass = "correct";
				width = width*3;
			}
			else
			{
				if (len <= 12)
				{
					tip = label.media;
					width = width*2;
				}
				else
				{
					tip = label.strong;
					iClass = "correct";
					width = width*3;
				}
			}

			id("pwdDepNote2G").style.visibility = lgPwdNoteVi;
			id("wzdPwdNote2G").style.display = lgPwdlessTip;
			id("pwdDep2G").innerHTML = tip;
			id("chgPwdDep2G").style.width = width + "px";
			id("pwdDepI").className = iClass;
		}

		function checkStrHasCN(str)
		{
			var len = str.length;
			for (var i = 0; i < len; i++)
			{
				if (str.charCodeAt(i) > 127)
				{
					return true;
				}
			}

			return false;
		}

		function initWifiCfg()
		{
			var nameVal2G = wzdWirelessName2G.value;
			var pswVal2G  = wzdWirelessPwd2G.value;

			/* 全局变量：标志无线配置是否更改 */
			gIsWifiCfgChged = ((nameVal2G != oriWifiCfg[optSsid]) || (pswVal2G != oriWifiCfg[optKey]));;

			if (gIsWifiCfgChged)
			{
				/* 全局变量：临时保存无线配置 */
				gWifiCfgToSave = {};
				gWifiCfgToSave[uciFile] = {};
				gWifiCfgToSave[uciFile][uciSecWifi2G] = {};
				gWifiCfgToSave[uciFile][uciSecWifi2G][optSsid] = nameVal2G;

				if (pswVal2G.length > 0)
				{
					gWifiCfgToSave[uciFile][uciSecWifi2G][optEncrypt] = uciWireless.dynOptValue.encryption.on;
					gWifiCfgToSave[uciFile][uciSecWifi2G][optKey] = pswVal2G;
				}
				else
				{
					gWifiCfgToSave[uciFile][uciSecWifi2G][optEncrypt] = uciWireless.dynOptValue.encryption.off;
				}
			}
		}

		function saveCfgHandle()
		{
			/* 初始化需要保存的无线配置信息 */
			initWifiCfg();

			loadPage('WizardEnd.htm', "wizardCon");
		}

		function checkWlanPwdHandle()
		{
			if (0 == wzdWirelessPwd2G.value.length)
			{
				showCover(wzdWirelessPwdConfirm);
				return;
			}

			var errNo = checkWlanPwd(wzdWirelessPwd2G.value);
			switch(errNo)
			{
			case EINVWLANPWD:
				showNote("wzdPwdNote2G", errStr.wlanWzdPwdValid);
				return;
			case EINVPSKLEN:
				showNote("wzdPwdNote2G", errStr.wlanWzdPwdLenValid);
				return;
			case EWLANPWDBLANK:
			default:
				break;
			}

			saveCfgHandle();
		}

		function onSave()
		{
			if(!checkSsidInput2G())
			{
				return;
			}

			/* 检查SSID中是否包含非ASCII字符*/
			if (checkStrHasCN(wzdWirelessName2G.value))
			{
				showCover(wzdWirelessSsidConfirm);
				return;
			}

			checkWlanPwdHandle();
		}

		function getCfgCbk(ALL_DATA)
		{
			var hostObj;
			var oriWifiCfg = ALL_DATA[uciFile][uciSecWifi2G];

			g_cur_host_mac = ALL_DATA[uciNetwork.fileName][uciNetwork.dynData.ifaceMac][uciNetwork.optValue.ifname.host];
			wzdWirelessName2G.value = oriWifiCfg[optSsid];
			wzdWirelessPwd2G.value = oriWifiCfg[optKey];

			/* 初始化当前登录的是否是无线设备 */
			var hostsInfo = formatTableData(ALL_DATA[uciHostsInfo.fileName][uciHostsInfo.dynData.online_host]);
			for (var i = 0; i < hostsInfo.length; i++)
			{
				hostObj = hostsInfo[i];
				if (hostObj[uciHostsInfo.optName.mac].toUpperCase() == g_cur_host_mac.toUpperCase())
				{
					type = hostObj[uciHostsInfo.optName.type];
					if (type == uciHostsInfo.optValue.linkType.hostWireless ||
						type == uciHostsInfo.optValue.linkType.guestWireless)
					{
						gIsWifiDevice = true;
					}

					break;
				}
			}
		}

		function getCfg()
		{
			var data = {};
			data[uciFile] = {};
			data[uciFile][KEY_NAME] = [uciSecWifi2G];

			data[uciHostsInfo.fileName] = {};
			data[uciHostsInfo.fileName][KEY_TABLE] = [uciHostsInfo.dynData.online_host];
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = uciNetwork.dynData.ifaceMac;

			$.query(data, getCfgCbk);
		}

		/* 设置导航栏颜色 */
		wzdNavSet(2);
		wzdConSet({"height":"480px"});
		wzdWirelessName2G.focus();
		id("pre").onclick = function(){wzdNetWorkModeChange(gNetworkCfg[uciProto.optName.type]);};
		id("sub").onclick = onSave;

		wzdWirelessName2G.onblur = checkSsidInput2G;
		wzdWirelessName2G.onkeyup = checkSsidInput2G;
		wzdWirelessPwd2G.onblur = checkWlanPwdInput2G;
		wzdWirelessPwd2G.onkeyup = checkWlanPwdDep2G;

		getCfg();
	}
	init();
</script>
<style type="text/css">
	li.wzdSubLi input{
		width:85px;
	}
	ul.inputUlF{
		overflow:hidden;
	}
</style>
<ul class="wzdConTitleUl">
	<p class="wzdConTitle">{%label.wifiSet%}</p>
	<p class="wzdConTitleDes">{%label.wifiSetTip%}</p>
</ul>
<ul class="inputUl">
	<li class="inputLi">
		<label for="wzdWirelessName2G">{%label.wirelessName%}</label>
		<input id="wzdWirelessName2G" type="text" maxLength="32" />
	</li>
	<li id="wzdAntNote2G" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%errStr.wlanSsidErr%}</p>
		</div>
	</li>
</ul>
<ul class="inputUl inputUlF">
	<li class="inputLi">
		<label for="wzdWirelessPwd2G">{%label.wirelessPwd%}</label>
		<input id="wzdWirelessPwd2G" type="text" class="imeModeN" maxLength="63" />
	</li>
	<li id="wzdPwdNote2G" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%label.netPwdTip%}</p>
		</div>
	</li>
	<li id="pwdDepNote2G" class="note">
		<i id="pwdDepI" class="warn"></i>
		<div class="noteCon">
			<p class="pwdDepC twoLine">{%label.chgPwdDep%}{%label.colon%}<label id="pwdDep2G">{%label.weak%}</label></p>
			<div class="pwdDepL"><label id="chgPwdDep2G"></label></div>
		</div>
	</li>
</ul>
<p class="wzdDesP">{%label.wifiPwdTip%}</p>
<ul>
	<li class="wzdSubLi">
		<input id="pre" type="button" class="btnL" value="{%btn.preStep%}" />
		<input id="sub" type="button" value="{%btn.ok%}" />
	</li>
</ul>