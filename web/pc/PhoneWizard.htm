<script type="text/javascript">
	var wzOptions = [{str:label.pppoe, value:WAN_TYPE_PPPOE},
					 {str:label.staticIp, value:WAN_TYPE_STATIC},
					 {str:label.dhcp, value:WAN_TYPE_DHCP}];

	var gNetworkCfg = {};
	var gWifiCfgToSave = {};
	var bWzdWanTypeDetected = false;
	var gIsWifiCfgChged = false;
	var gIsWifiCfgChged = false;
	var gIsWifiCfg2GChged = false;
	var gIsWifiCfg5GChged = false;
	var gIsWifiCfg5G4Chged = false;
	var gIsWifiCfgBsChged = false;
	var gModeSwitchSupport = false;
	var gMultiWanOpen = false;
	var gIpv6Enable = false;
	var gPcbEnable = 0;
	var gSysMode = 0;
	var gLanIPMode;
	var gLanIP, gOldLanIP;
	var gLanMask;
	var gIsLanIpChanged = false;

	/* 有线中继全局变量 */
	var gOpenBS = false;
	var FREQ_2G = 0;
	var FREQ_5G = 1;
	var FREQ_5G1 = 2;
	var FREQ_5G4 = 3;
	var FREQ_BS  = 4;
	var gWireRepeaterCfg = {};

	/* WAN口选择配置 */
	var gWanPortSelCfg;

	/* 有线中继配置 */
	gWireRepeaterCfg[FREQ_2G] = {"ssid":"", "encryption":"", "key":""};
	gWireRepeaterCfg[FREQ_5G] = {"ssid":"", "encryption":"", "key":""};
	gWireRepeaterCfg[FREQ_5G1] = {"ssid":"", "encryption":"", "key":""};
	gWireRepeaterCfg[FREQ_5G4] = {"ssid":"", "encryption":"", "key":""};
	gWireRepeaterCfg[FREQ_BS] = {"ssid":"", "encryption":"", "key":"", "bs_enable":""};

	/* WAN口上网类型配置 */
	gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.pppoe;

	/* PPPoE临时配置 */
	gNetworkCfg[uciProto.optValue.proto.pppoe] = {};
	gNetworkCfg[uciProto.optValue.proto.pppoe][uciProto.optName.pppoeUsr] = "";
	gNetworkCfg[uciProto.optValue.proto.pppoe][uciProto.optName.pppoePwd] = "";

	/* 静态IP临时配置 */
	gNetworkCfg[uciProto.optValue.proto.staticIp] = {};
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.ip] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.netmask] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.gateway] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.priDns] = "";
	gNetworkCfg[uciProto.optValue.proto.staticIp][uciProto.optName.sndDns] = "";

	/* 自动获取IP临时配置 */
	gNetworkCfg[uciProto.optValue.proto.dynIp] = {};

	/* 页面input元素id和uci配置的映射关系 */
	var keyMap = {};
	keyMap[uciProto.optValue.proto.pppoe] = [{id:"pppoeAccount", uciKey:uciProto.optName.pppoeUsr},
											 {id:"pppoePasswd", uciKey:uciProto.optName.pppoePwd}];
	keyMap[uciProto.optValue.proto.staticIp] = [{id:"ipAddrIn", uciKey:uciProto.optName.ip},
											 {id:"netMaskIn", uciKey:uciProto.optName.netmask},
											 {id:"gatewayIn", uciKey:uciProto.optName.gateway},
											 {id:"dns0In", uciKey:uciProto.optName.priDns},
											 {id:"dns1In", uciKey:uciProto.optName.sndDns}];
	keyMap[uciProto.optValue.proto.dynIp] = [];

	function getWanPortTipsText(currentPort)
	{
		var text = "";
		$.each(wanPortDescList, function(desc, value){
			if (currentPort != value)
			{
				text = text == "" ? desc : "、" + desc;
			}
		});

		return text;
	}

	/* 将上网设置临时配置显示到对应页面 */
	function showNetworkCfg(wanType)
	{
		for (var i = 0; i < keyMap[wanType].length; i++)
		{
			var idStr = keyMap[wanType][i]["id"];
			var uciKeyStr = keyMap[wanType][i]["uciKey"];

			gNetworkCfg[wanType][uciKeyStr] = gNetworkCfg[wanType][uciKeyStr] ? gNetworkCfg[wanType][uciKeyStr] : "";

			id(idStr).value = gNetworkCfg[wanType][uciKeyStr];
		}
	}

	/* 将页面的配置生成要保存的接口格式 */
	function saveNetworkCfg(wanType, callBack)
	{
		var cfgToSave = {}, cfgFile = {}, cfgProto = {}, cfgWan = {};

		gNetworkCfg[uciProto.optName.type] = wanType;

		cfgToSave[uciProto.fileName] = cfgFile;
		cfgFile[uciProto.secName.wan] = cfgWan;
		cfgWan[uciProto.optName.type] = wanType

		var cfgSec = uciProto.secName.pppoe;
		switch(wanType)
		{
		case uciProto.optValue.proto.staticIp:
			cfgSec = uciProto.secName.sta;
			break;
		case uciProto.optValue.proto.dynIp:
			cfgSec = uciProto.secName.dhcp;
			break;
		default:
			cfgSec = uciProto.secName.pppoe;
			break;
		}

		cfgFile[cfgSec] = cfgProto;

		for (var i = 0; i < keyMap[wanType].length; i++)
		{
			var idStr = keyMap[wanType][i]["id"];
			var uciKeyStr = keyMap[wanType][i]["uciKey"];

			gNetworkCfg[wanType][uciKeyStr] = id(idStr).value;
			cfgProto[uciKeyStr] = gNetworkCfg[wanType][uciKeyStr];
		}

		if (gSysModeSupport) {
			cfgToSave.system = {"sys_mode":{"mode":uciSystem.optValue.sysMode.routerMode}};
			gSysMode = uciSystem.optValue.sysMode.routerMode;
		}

		/* 保存配置 */
		$.modify(cfgToSave, callBack);
	}

	function wzdWanPortChange(value)
	{
		var self = this;
		if (value == gWanPortSelCfg)
		{
			return;
		}

		var data = {}, args = {};;
		data[uciProto.fileName] = {};
		data[uciProto.fileName][uciProto.secName.wan] = args;
		args[uciProto.optName.port] = value ;

		showCover(function(){
			phWanLoadingCover.style.visibility = "visible";
			phWanLoadingCover.style.top = "150px";
		});
		$.modify(data, function(result){
			if (result[ERR_CODE] == ENONE)
			{
				gWanPortSelCfg = value;
				var waitTime = result["wait_time"] || 0;
				waitTime = parseInt(waitTime);

				if (waitTime == 0)
				{
					hideCover(function(){
						phWanLoadingCover.style.visibility = "hidden";
						phWanLoadingCover.style.top = "-9999px";
						loadPage("PhoneNetwork.htm", "phCon");
					});
				}
				else
				{
					$.setTimeout(function(){
						hideCover(function(){
							phWanLoadingCover.style.visibility = "hidden";
							phWanLoadingCover.style.top = "-9999px";
							loadPage("PhoneNetwork.htm", "phCon");
						});
					}, waitTime * 1000);
				}
			}
			else
			{
				hideCover(function(){
					phWanLoadingCover.style.visibility = "hidden";
					phWanLoadingCover.style.top = "-9999px";
					id("wanPortSel").changeSel(gWanPortSelCfg);
					$("#wanPortSelected").html(getWanPortTipsText(gWanPortSelCfg));
				});
			}
		});
	}

	function wzdNetWorkModeChange(value)
	{
		switch(value)
		{
		case WAN_TYPE_STATIC:
		case uciProto.optValue.proto.staticIp:
			gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.staticIp;
			loadPage("PhoneStaticIp.htm", "phCon");
			break;
		case WAN_TYPE_DHCP:
		case uciProto.optValue.proto.dynIp:
			gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.dynIp;
			loadPage("PhoneDynamicIp.htm", "phCon");
			break;
		case LINK_TYPE_WIRED_REPEATER:
			loadPage("PhoneWireRepeater.htm", "phCon");
			break;
		case WAN_TYPE_PPPOE:
		case uciProto.optValue.proto.pppoe:
		default:
			gNetworkCfg[uciProto.optName.type] = uciProto.optValue.proto.pppoe;
			loadPage("PhonePPPoE.htm", "phCon");
			break;
		}
	}

	function wzdConSet(styles)
	{
		setStyle(id("wizardCon"), styles);
	}

	function wzdNavSet(step)
	{
		var wzdNavList = $("ul.wzdNav li");
		for (var i = 0; i < wzdNavList.length; i++)
		{
			wzdNavList[i].className = (i == step) ? "select" : "";
		}
	}

	/* 禁用/启用设置向导页面中的sub button */
	function disSubBtn(target, disable, btnStr)
	{
		var input = (typeof target == "object" ? target : id(target));
		var className = input.className;

		if (input.disabled == disable)
		{
			return;
		}

		input.disabled = disable ? true : false;
		input.className = disable ? className.replace("", "subBtnDis") : className.replace("subBtnDis", "");
		input.value = (btnStr != undefined) ? btnStr : input.value;
	}

	/* 在设置向导中显示弹出框 */
	function showWzdConfirm(tipStr, onYesCbk, onNoCbk, btnOkStr, btnNoStr)
	{
		var i, input, p, divFunc;

		var divCon = document.createElement("div");
		divCon.className = "confirmCon";
		document.body.appendChild(divCon);

		var div = document.createElement("div");
		div.className = "confirm";
		divCon.appendChild(div);

		i = document.createElement("i");
		i.className = "confirmLogo";
		div.appendChild(i);

		p = document.createElement("p");
		p.className = "confirmQuestion";
		p.innerHTML = tipStr;
		div.appendChild(p);

		divFunc = document.createElement("div");
		divFunc.className = "confirmFuncCon";
		div.appendChild(divFunc);

		input = document.createElement("input");
		input.className = "subBtn subBtnL";
		input.value = (btnOkStr != undefined) ? btnOkStr : btn.btnY;
		input.type = "button";
		input.onclick = function(){
			hideCover(function(){
				if (typeof onYesCbk != "undefined"){
					onYesCbk();
				}

				document.body.removeChild(divCon);
			});
		};
		divFunc.appendChild(input);

		input = document.createElement("input");
		input.className = "subBtn subBtnR";
		input.value = (btnNoStr != undefined) ? btnNoStr : btn.btnN;
		input.type = "button";
		input.onclick = function(){
			hideCover(function(){
				if (typeof onNoCbk != "undefined"){
					onNoCbk();
				}

				document.body.removeChild(divCon);
			});
		};
		divFunc.appendChild(input);
	}

	function wzdSelectInit(idStr, options, value, callback)
	{
		var classObj = {
			className:"wzdSelOptsUl",
			colorN:"#FFFFFF",
			colorC:"#FFEA55",
			fontColorN:"#3C3E43",
			fontColorC:"#3C3E43",
			valueColor:"#FFFFFF",
			valueDisColor:"#9EBE1D"
		};

		selectInit(idStr, options, value, callback, 30, classObj);
	}

	function wzdDone()
	{
		var data = {};

		data[uciSystem.fileName] = {};
		data[uciSystem.fileName][uciSystem.secName.sys] = {};
		data[uciSystem.fileName][uciSystem.secName.sys][uciSystem.optName.isFactory] = uciSystem.optValue.isFactory.no;

		$.modify(data);
	}

	function showPhoneNote(labelForStr, noteIdStr, showStr)
	{
		$('label[for="'+ labelForStr + '"]').css("color", "#FF3D00");
		id(noteIdStr).style.display = "block";
		$("#" + noteIdStr + " span").html(showStr);
	}

	function closePhoneNote(labelForStr, noteIdStr)
	{
		$('label[for="'+ labelForStr + '"]').css("color", "#333333");
		id(noteIdStr).style.display = "none";
	}

	function checkWlanName(val)
		{
			if (val.length == 0)
			{
				return EINVSSIDEMPTY;
			}

			if (val.replace(/\s/g, "").length == 0)
			{
				return EINVSSIDBLANK;
			}

			return checkWifiName(val, 32, 1) ? ENONE : EINVSSIDLEN;
		}

	function init()
	{
		loadPage("PhoneNetwork.htm", "phCon");
	}

	var reqData = {};
	reqData[uciFunction.fileName] = {};
	reqData[uciFunction.fileName][KEY_NAME] = uciFunction.secName.newModuleSpec;
	$.query(reqData, function (result) {
		if (ENONE == result[ERR_CODE]) {
			gModeSwitchSupport = result[uciFunction.fileName][uciFunction.secName.newModuleSpec]["mode_switch"] == uciFunction.optValue.enable;
		}
	});
	init();
</script>
<style type="text/css">
li.phInputLi i.pwdShowOff{
	width:24px;
	height:24px;
	display:inline-block;
	background:url(../web-static/images/show_off@1x.png);
	vertical-align:middle;
}
li.phInputLi i.pwdShowOn{
	width:24px;
	height:24px;
	display:inline-block;
	background:url(../web-static/images/show_on@1x.png);
	vertical-align:middle;
}
div.switchCon{
	width:48px;
	height:24px;
	cursor:pointer;
	position:relative;
	vertical-align:middle;
	display:inline-block;
	*display:inline;
	*zoom:1;
}
div.switchConNetState{
	font-size:12px;
	margin:0 0 0 5px;
}
i.switchBg{
	width:48px;
	height:24px;
	display:inline-block;
	background:url(../web-static/images/switchbase_on@1x.png) no-repeat;
	vertical-align:top;
}
i.switchBgOff{
	width:48px;
	height:24px;
	display:inline-block;
	background:url(../web-static/images/switchbase_off@1x.png) no-repeat;
	vertical-align:top;
}
i.switchBall{
	width:24px;
	height:24px;
	top:0 !important;
	left:17px;
	position:absolute;
	display:inline-block;
	cursor:pointer;
	z-index:1;
	background:url(../web-static/images/switchknob_normal@1x.png) no-repeat !important;
}
.phLoadConClass{
	font-size:12px;
	height:0px;
	width:250px;
	margin:0px auto;
	margin-top:190px;
	position:relative;
}
.phLoadClass{
	width:250px;
	height:220px;
	background:#FFFFFF;
	box-shadow:0 0 2px rgba(210, 210, 210, 1);
	position:absolute;
	top:0px;
	text-align:center;
}
.phCoverLoadingClass{
	width:85px;
	height:85px;
	margin-top:20px;
	display:inline-block;
	background:url(../web-static/images/loadingRouteSet.gif) no-repeat;
	background-size: 100% 100%;
}
</style>
<div class="phoneCon">
	<div id="phCon"></div>
	<img class="phoneLogo" src="../web-static/images/logo.png" />
</div>