<script type="text/javascript">
	function init()
	{
		var uciFile = uciDhcpd.fileName;
		var uciUdhcpd = uciDhcpd.secName.udhcpd;
		var uciEnable = uciDhcpd.optName.enable;
		var uciStart = uciDhcpd.optName.poolStart;
		var uciEnd = uciDhcpd.optName.poolEnd;
		var uciLeaseTime = uciDhcpd.optName.leaseTime;
		var uciGateway = uciDhcpd.optName.gateway;
		var uciPriDns = uciDhcpd.optName.priDns;
		var uciSndDns = uciDhcpd.optName.sndDns;

		var lanIpaddr, lanNetmask, dhcpSvrCfg;
		var dataGridLs, dataGridLsList = new Array();
		var FIRST_LOAD_PAGE = true;

		var isMesh = false;
		var NORMAL_CAPACITY_MODE = 0,MASSIVE_CAPACITY_MODE = 1;
		var currentCapabilityMode = NORMAL_CAPACITY_MODE;
		var DHCPMINSIZE = 256; // 高带机量模式下支持设置的最小地址池大小
		var lanMask;

		var curSysMode = uciSystem.optValue.sysMode.routerMode;

		var LAN_DETECT_WAIT_TIME = 120000;
		var LAN_DETECT_TIME_DELAY = 4000;
		var lanDetectTimeHd, lanLoadingTimeHd;
		var isDomain = false, localPort = 80;

		function errHandle(errNo, objOrId)
		{
			var showStr = "";

			switch (errNo)
			{
			case ENONE:
				return true;
			case EINVSTARTADDRPOOL:
				objOrId = "dhcpIpStart";
				showStr = errStr.dhcpsStrtAddrPoolErr;
				break;
			case EINVENDADDRPOOL:
				objOrId = "dhcpIpEnd";
				showStr = errStr.dhcpsEndAddrPoolErr;
				break;
			case EINVCAPABILITYSMALL:
				showStr = errStr.dhcpsAddrSmall;
				break;
			case EINVLEASETIME:
				objOrId = "dhcpLsTime";
				showStr = errStr.dhcpsLeaseErr;
				break;
			case EDHCPDGTW:
				objOrId = "dhcpGateway";
				showStr = errStr.gatewayErr;
				break;
			case EGTWNOTLANSUBNET:
				objOrId = "dhcpGateway";
				showStr = errStr.dhcpsGateWayErr;
				break;
			case EDHCPDPRIDNS:
				objOrId = "dhcpDnsPri";
				showStr = errStr.primDnsErr;
				break;
			case EDHCPDSNDDNS:
				objOrId = "dhcpDnsBak";
				showStr = errStr.seDnsErr;
				break;
			case EINVIP:
				showStr = errStr.ipAddrErr;
				break;
			case EINVIPFMT:
				showStr = errStr.ipAddrFmtErr;
				break;
			case EINVGROUPIP:
				showStr = errStr.ipAddrGroupErr;
				break;
			case EINVLOOPIP:
				showStr = errStr.ipAddrLoopErr;
				break;
			case EINVMACFMT:
				showStr = errStr.macFmtErr;
				break;
			case EINVMACZERO:
				showStr = errStr.macZeroErr;
				break;
			case EINVMACBROAD:
				showStr = errStr.macBroadErr;
				break;
			case EINVMACGROUP:
				showStr = errStr.macGroupErr;
				break;
			case EMULTIWANENABLE:
				showStr = errStr.dhcpsCloseConflict;
				break;
			case EWDSMODEOPEN:
				showStr = errStr.wdsOnDhcpsOpen;
				break;
			case EAPMODEOPEN:
				showStr = errStr.apOnDhcpsOpen;
				break;
			case EWDSMODECLOSE:
				showStr = errStr.wdsOnDhcpsClose;
				break;
			case EAPMODECLOSE:
				showStr = errStr.apOnDhcpsClose;
				break;
			default:
				showStr = errStr.invRequestFail;
				break;
			}

			showAlert(showStr, objOrId);
			return false;
		}

		function dhcpLeaseInit(list)
		{
			dataGridLs = new DataGrid();
			dataGridLs.init({
				id:"dhcpLeaseTbl",									// table ID
				data:list,											// 数据源
				hasSelBox:false,
				edit:false,
				head:[{field:label.host, width:180},				// 表头选项
					  {field:label.mac, width:205},
					  {field:label.ipAddr, width:134},
					  {field:label.availTime, width:98}],
				list:[{edit:false, name:uciDhcpd.optName.hostName, type:"str"},
					  {edit:false, name:uciDhcpd.optName.mac, type:"mac"},
					  {edit:false, name:uciDhcpd.optName.ip, type:"ip"},
					  {edit:false, name:uciDhcpd.optName.expires, type:"timeP"}],
				niceScroll:gBasicRouteSetRNiceScroll,
				toolBar:{id:"dhcpLsUl", refresh:getDhcpClient}
			});
		}

		/* transform ip from intenger to string */
		function intToIp(num)
		{
			var str;
			var array = new Array();
			array[0] = (num >>> 24) & 0xff;
			array[1] = (num >>> 16) & 0xff;
			array[2] = (num >>> 8) & 0xff;
			array[3] = (num >>> 0) & 0xff;

			str = String(array[0]) + "." + String(array[1]) + "." + String(array[2]) + "." + String(array[3]);
			return str;
		}

		function dhcpStateSet(enable, auto)
		{
			id("dhcpSwitchOn").checked = enable;
			id("dhcpSwitchOff").checked = !enable;
			id("dhcpSwitchAuto").checked = auto;
			id("dhcpStatusSpn").innerHTML = auto ? (enable ? label.autoOpen : label.autoClose) : (enable ? label.wlanOn : label.wlanOff);
		}

		function showDhcpCfg(ALL_DATA)
		{
			var dhcpSvrCfg = ALL_DATA[uciFile][uciUdhcpd];
			/* show Switch */
			var enable = (dhcpSvrCfg[uciEnable] == "0" ? false : true);
			var auto = (dhcpSvrCfg["auto"] == "0" ? false : true);
			if (gModeSwitchSupport) {
				var bridge = (1 == parseInt(ALL_DATA.custom_network.bridge_status.enable));

				/* 桥模式下，不允许配置DHCP开关，若上联网关DHCP关闭，则本地DHCP自动开且用户可配置，若上联网关DHCP启用，则本地DHCP切换为自动关且不可编辑 */
				if(bridge)
				{
					disableDhcpsSwitch(true);
					if (auto && !enable)
					{
						disableDhcpsConfig(true);
					}
				}
			}

			dhcpStateSet(enable, auto);
			id("dhcpIpStart").value = dhcpSvrCfg[uciStart];
			id("dhcpIpEnd").value = dhcpSvrCfg[uciEnd];
			id("dhcpLsTime").value = parseInt(parseInt(dhcpSvrCfg[uciLeaseTime]) / 60);
			id("dhcpGateway").value = dhcpSvrCfg[uciGateway] || "0.0.0.0";
			id("dhcpDnsPri").value = dhcpSvrCfg[uciPriDns] || "0.0.0.0";
			id("dhcpDnsBak").value = dhcpSvrCfg[uciSndDns] || "0.0.0.0";
		}

		function showDhcpClient(ALL_DATA)
		{
			dataGridLsList = formatTableData(ALL_DATA[uciFile][uciDhcpd.dynData.dhcpClient]) || [];

			/* 给主机名为空的主机命名为“匿名主机” */
			for (var i in dataGridLsList)
			{
				if (dataGridLsList[i].hostname.length == 0)
				{
					dataGridLsList[i].hostname = label.anonymousHost;
				}
			}

			dataGridLs.setDataSource(dataGridLsList);
			dataGridLs.refresh(dataGridLs.getPageNum());
		}

		function showDhcpInfo(ALL_DATA)
		{
			var moduleSpecInfo = ALL_DATA[uciFunction.fileName][uciFunction.secName.newModuleSpec];
			isMesh = moduleSpecInfo[uciFunction.optName.wifisonMesh] && (moduleSpecInfo[uciFunction.optName.wifisonMesh] == "1");

			if (gSysModeSupport) {
				curSysMode = ALL_DATA.system.sys_mode.mode;
			}
			/*初始化LAN口设置信息*/
			var lan = ALL_DATA[uciNetwork.fileName][uciNetwork.secName.lan];
			lanIpaddr = lan[uciNetwork.optName.ip];
			lanNetmask = lan[uciNetwork.optName.netmask];
			lanMask = JSON.parse(JSON.stringify(lanNetmask));
			if(gSupportStaCapability){
				$("#lanIpAddr").html(lanIpaddr);
				isDomain = ((location.href.toString()).indexOf(lanIpaddr) == -1);
				localPort = window.location.port || 80;
				var staNumMode = ALL_DATA["network"]["massive_sta_capacity"]["enable"];
				if(staNumMode == MASSIVE_CAPACITY_MODE){
					//  高带机量模式
					changeMassCapSel();
				}else{
					// 普通模式
					changeCommonSel();
				}
			}
			/* 显示DHCP服务器配置 */
//			var dhcpdCfg = ALL_DATA[uciFile][uciUdhcpd];
			showDhcpCfg(ALL_DATA);

			/* 显示客户端列表 */
			showDhcpClient(ALL_DATA);

			if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
				disableInput("commonStaNum", true);
				disableInput("highStaNum", true);
				disableInput("dhcpSwitchOn", true);
				disableInput("dhcpSwitchOff", true);
				disableInput("dhcpSwitchAuto", true);
				disableInput("dhcpIpStart", true);
				disableInput("dhcpIpEnd", true);
				disableInput("dhcpLsTime", true);
				disableInput("dhcpGateway", true);
				disableInput("dhcpDnsPri", true);
				disableInput("dhcpDnsBak", true);
				disableBtn("save",true);
				$('#dhcpLsUl li.refresh')[0].className="refreshUn";
				disableBtn($('ul.gridToolBar input[type="button"]')[0], true);

				$("#relayTip").css("display","inline-block");
				if (uciSystem.optValue.sysMode.apMode == curSysMode) {
					$("#relayTipText").text("上网方式为AP（有线中继）时，DHCP服务器默认自动，不可修改");
				} else {
					$("#relayTipText").text("上网方式为桥接（无线中继）时，DHCP服务器默认自动，不可修改");
				}
			}
		}

		function getDhcpInfo()
		{
			var data = {};
			data[uciFile] = {};
			data[uciFile][KEY_NAME] = [uciUdhcpd];
			data[uciFile][KEY_TABLE] = [uciDhcpd.dynData.dhcpClient];
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = [uciNetwork.secName.lan];
			if(gSupportStaCapability){
				data[uciNetwork.fileName][KEY_NAME].push(uciNetwork.secName.massiveSta);
			}
			data[uciFunction.fileName] = {};
			data[uciFunction.fileName][KEY_NAME] = [uciFunction.secName.newModuleSpec];
			if (gModeSwitchSupport) {
				data[uciCustomNetwork.fileName] = {};
				data[uciCustomNetwork.fileName][KEY_NAME] = [uciCustomNetwork.dynData.bridgestatus];
			}
			if (gSysModeSupport) {
				data.system = {"name":"sys_mode"};
			}

			$.query(data, showDhcpInfo);
		}

		function getDhcpClient()
		{
			var data = {};
			data[uciFile] = {};
			data[uciFile][KEY_TABLE] = [uciDhcpd.dynData.dhcpClient];

			$.query(data, showDhcpClient);
		}

		function checkInLanNet(ipaddr)
		{
			var iLanIpaddr = transIp(lanIpaddr), iNetmask = transIp(lanNetmask), iIpaddr = transIp(ipaddr);
			return (0 == ((iLanIpaddr ^ iIpaddr) & iNetmask)) ? true : false;
		}

		function filterZeroInIp(ip, idStr)
		{
			var ipaddr = intToIp(transIp(ip));
			id(idStr).value = ipaddr;

			return ipaddr;
		}

		function checkTime(value, max, min)
		{
			if ((false == checkNum(value)) ||
				(false == checkNumRange(parseInt(value, 10), max, min)))
			{
				return false;
			}
			return true;
		}

		function checkIPSameNet(orIp, taIp, mask)
		{
			return (0 == ((transIp(orIp) & transIp(mask)) ^ (transIp(taIp) & transIp(mask))));
		}
		function disableDhcpsSwitch(disabled)
		{
			disableInput("dhcpSwitchOn", disabled);
			disableInput("dhcpSwitchOff", disabled);
			disableInput("dhcpSwitchAuto", disabled);
		}

		function disableDhcpsConfig(disabled)
		{
			disableInput("dhcpIpStart", disabled);
			disableInput("dhcpIpEnd", disabled);
			disableInput("dhcpLsTime", disabled);
			disableInput("dhcpGateway", disabled);
			disableInput("dhcpDnsPri", disabled);
			disableInput("dhcpDnsBak", disabled);
			disableBtn("save", disabled);
			id("save").onclick = disabled ? null : onSave;
		}

		/* save DHCP config */
		function onSave()
		{
			function sendData() {
				cfg[uciFile] = cfgDhcpd;
				cfgDhcpd[uciUdhcpd] = cfgUdhcpd;

				if (0 == dhcpsAuto)
				{
					cfgUdhcpd[uciEnable] = dhcpsEnable;
				}

				cfgUdhcpd["auto"] = dhcpsAuto;

				/* 合法性检查 */
				if (("" == startIp) || (ENONE != checkIp(startIp)) || !checkIPSameNet(startIp, lanIpaddr, lanNetmask))
				{
					return errHandle(EINVSTARTADDRPOOL);
				}

				if (("" == endIp) || checkIp(endIp) != ENONE || !checkIPSameNet(endIp, lanIpaddr, lanNetmask))
				{
					return errHandle(EINVENDADDRPOOL);
				}

				/* 开始地址大于结束地址时对调起始地址 */
				ipStart = transIp(startIp);
				ipEnd = transIp(endIp);
				if (ipStart > ipEnd)
				{
					id("dhcpIpStart").value = endIp;
					id("dhcpIpEnd").value = startIp;
				}

				if( gSupportStaCapability && id("highStaNum").checked && !$(".dhcpServerSetWrap").hasClass("opacityCover") && ipEnd - ipStart < DHCPMINSIZE && ipEnd - ipStart < DHCPMINSIZE ){
					return errHandle(EINVCAPABILITYSMALL);
				}

				if (("" == dhcpLsTime) || (!checkTime(dhcpLsTime, 2880, 1)))
				{
					return errHandle(EINVLEASETIME);
				}

				if (("" != gatewayVal) && ("0.0.0.0" != gatewayVal) && (ENONE != checkIp(gatewayVal)))
				{
					return errHandle(EDHCPDGTW);
				}

				if (("" != gatewayVal) && ("0.0.0.0" != gatewayVal) && !checkIPSameNet(gatewayVal, lanIpaddr, lanNetmask))
				{
					return errHandle(EGTWNOTLANSUBNET);
				}

				if (("" != dnsPriVal) && ("0.0.0.0" != dnsPriVal) && (ENONE != checkIp(dnsPriVal)))
				{
					return errHandle(EDHCPDPRIDNS);
				}

				if (("" != dnsBakVal) && ("0.0.0.0" != dnsBakVal) && (ENONE != checkIp(dnsBakVal)))
				{
					return errHandle(EDHCPDSNDDNS);
				}

				var leaseTime = parseInt(dhcpLsTime, 10);
				id("dhcpLsTime").value = leaseTime;

				gatewayVal = hideLeadingZeros(gatewayVal);
				id("dhcpGateway").value = gatewayVal;
				dnsPriVal = hideLeadingZeros(dnsPriVal);
				id("dhcpDnsPri").value = dnsPriVal;
				dnsBakVal = hideLeadingZeros(dnsBakVal);
				id("dhcpDnsBak").value = dnsBakVal;
				startIp = hideLeadingZeros(startIp);
				id("dhcpIpStart").value = startIp;
				endIp = hideLeadingZeros(endIp);
				id("dhcpIpEnd").value = endIp;

				cfgUdhcpd[uciStart] = startIp;
				cfgUdhcpd[uciEnd] = endIp;
				cfgUdhcpd[uciLeaseTime] = leaseTime * 60;
				cfgUdhcpd[uciGateway] = gatewayVal;

				if ("0.0.0.0" == dnsPriVal && "0.0.0.0" != dnsBakVal && "" != dnsBakVal)
				{
					id("dhcpDnsPri").value = dnsBakVal;
					id("dhcpDnsBak").value = dnsPriVal;
					dnsPriVal = id("dhcpDnsPri").value;
					dnsBakVal = id("dhcpDnsBak").value;
				}

				cfgUdhcpd[uciPriDns] = dnsPriVal;
				cfgUdhcpd[uciSndDns] = dnsBakVal;

				setLoadingId("save");
				hsLoading(true);
				$.modify(cfg, function(result){
					hsLoading(false, result[ERR_CODE]);
					if (true == errHandle(result[ERR_CODE]))
					{
						getDhcpInfo();
					}
				});
			}

			var cfg = {}, cfgDhcpd = {}, cfgUdhcpd = {};
			var gatewayVal = id("dhcpGateway").value, dnsPriVal = id("dhcpDnsPri").value, dnsBakVal = id("dhcpDnsBak").value;
			var dhcpLsTime = id("dhcpLsTime").value, startIp = id("dhcpIpStart").value, endIp = id("dhcpIpEnd").value;
			var dhcpsEnable = (true == id("dhcpSwitchOn").checked) ? 1 : 0;
			var dhcpsAuto = (true == id("dhcpSwitchAuto").checked) ? 1 : 0;

			if (0 == dhcpsAuto && 0 == dhcpsEnable && isMesh) {
				showConfirm("关闭DHCP功能，路由器的所有网口都将变为LAN口，IP地址也会从前端路由自动获取，可采用域名登录进入管理页面，请确定是否关闭?", function (result) {
					if (result) {
						sendData();
					}
				});
			} else {
				if(gSupportStaCapability){
					if(id("highStaNum").checked && $(".dhcpServerSetWrap").hasClass("opacityCover")){
						// 点击高带机量后计算新LAN口IP
						confirmMassiveIp(MASSIVE_CAPACITY_MODE);
					}else if(id("highStaNum").checked && !$(".dhcpServerSetWrap").hasClass("opacityCover")){
						// 高带机量模式下设置保存
						sendData();
					}else if(id("commonStaNum").checked && $(".dhcpServerSetWrap").hasClass("opacityCover")){
						// 点击普通模式后计算新LAN口IP
						confirmMassiveIp(NORMAL_CAPACITY_MODE);
					}else{
						sendData();
					}
				}else{
					// 普通模式下设置保存
					sendData();
				}
			}
		}


		dhcpLeaseInit(dataGridLsList);
		getDhcpInfo();
		id("save").onclick = onSave;

		function lanCfgChgReload(ipAddr)
		{
			/* IP地址登录的，要转到新的地址，域名登录或远程登录则直接刷新 */
			if (false == isDomain)
			{
				window.location.href = "http://" + ipAddr + ":" + localPort;
			}
			else
			{
				window.location.reload();
			}
		}
		function lanCloseLoading()
		{
			clearTimeout(lanDetectTimeHd);
			clearTimeout(lanLoadingTimeHd);
			lanDetectTimeHd = null;
			lanLoadingTimeHd = null;
		}
		function changeLanIp(ipAddr){
			$.changeDomain(ipAddr);
			showLoading(label.lanCfgChgTip, lanCloseLoading);
			lanLoadingTimeHd = $.setTimeout(function(){
				lanCfgChgReload(ipAddr);
			}, LAN_DETECT_WAIT_TIME);
			$.setTimeout(function(){
				lanDetecting(function(){
					lanCloseLoading();
					$.setTimeout(function(){
						lanCfgChgReload(ipAddr);
					}, LAN_DETECT_TIME);
				})
			}, LAN_DETECT_TIME_DELAY);
		}
		function changeCommonSel(){
			currentCapabilityMode = NORMAL_CAPACITY_MODE;
			id("commonStaNum").checked = true;
			id("highStaNum").checked = false;
		}
		function changeMassCapSel(){
			currentCapabilityMode = MASSIVE_CAPACITY_MODE;
			id("commonStaNum").checked = false;
			id("highStaNum").checked = true;
		}
		function disableDhcpSetWrap(){
			// 切换模式禁止设置服务器
			disableBtn("dhcpSwitchOff",true);
			disableBtn("dhcpSwitchOn",true);
			disableBtn("dhcpSwitchAuto",true);
			$("#dhcpIpStart").prop("readOnly",true);
			$("#dhcpIpEnd").prop("readOnly",true);
			$("#dhcpLsTime").prop("readOnly",true);
			$("#dhcpGateway").prop("readOnly",true);
			$("#dhcpDnsPri").prop("readOnly",true);
			$("#dhcpDnsBak").prop("readOnly",true);
			$(".dhcpServerSetWrap").addClass("opacityCover");
		}
		function activeDhcpSetWrap(){
			disableBtn("dhcpSwitchOff",false);
			disableBtn("dhcpSwitchOn",false);
			disableBtn("dhcpSwitchAuto",false);
			$("#dhcpIpStart").removeProp("readOnly");
			$("#dhcpIpEnd").removeProp("readOnly");
			$("#dhcpLsTime").removeProp("readOnly");
			$("#dhcpGateway").removeProp("readOnly");
			$("#dhcpDnsPri").removeProp("readOnly");
			$("#dhcpDnsBak").removeProp("readOnly");
			$(".dhcpServerSetWrap").removeClass("opacityCover");
		}
		function getNewLanIp(mode,callback){
			$.action({"network":{"gen_massive_sta_capacity_ip":{"enable": mode}}},function(res){
				if(res.error_code == ENONE){
					var lanIp = res.lan_ip;
					lanMask = res.lan_mask;
					$("#lanIpAddr").html(lanIp);
					typeof callback != "undefined" && callback();
				}else{
					if(mode == NORMAL_CAPACITY_MODE){
						// 切换普通模式时计算LAN口IP失败
						showAlert(label.ipCalFailed);
						activeDhcpSetWrap();
						changeMassCapSel();
					}else{
						// 切换高带机量时计算LAN口IP失败
						showAlert(label.ipCalFailed);
						activeDhcpSetWrap();
						changeCommonSel();
					}
				}
			});
		}
		function changeCommonCapMode(){
			if(currentCapabilityMode == MASSIVE_CAPACITY_MODE && !$(".dhcpServerSetWrap").hasClass("opacityCover")){
				getNewLanIp(NORMAL_CAPACITY_MODE,function(){
					disableDhcpSetWrap();
					changeCommonSel();
				})
			}else if(currentCapabilityMode == MASSIVE_CAPACITY_MODE && $(".dhcpServerSetWrap").hasClass("opacityCover")){
				$("#lanIpAddr").html(lanIpaddr);
				activeDhcpSetWrap();
				changeCommonSel();
			}else{
				return;
			}
		}
		function changeMassCapMode(){
			if(currentCapabilityMode == NORMAL_CAPACITY_MODE && !$(".dhcpServerSetWrap").hasClass("opacityCover")){
				getNewLanIp(MASSIVE_CAPACITY_MODE,function(){
					disableDhcpSetWrap();
					changeMassCapSel();
				})
			}
			else if(currentCapabilityMode == NORMAL_CAPACITY_MODE && $(".dhcpServerSetWrap").hasClass("opacityCover")){
				$("#lanIpAddr").html(lanIpaddr);
				activeDhcpSetWrap();
				changeMassCapSel();
			}else{
				return;
			}
		}
		function confirmMassiveIp(modeEnable,cancelCallback){
			var lanIp = $("#lanIpAddr").html();
			if(modeEnable == MASSIVE_CAPACITY_MODE){
				showConfirm(label.highCapabilityInfo + lanIp + label.confirmChangeInfo, function (result) {
					if (result) {
						$.action({"network":{"config_massive_sta_capacity_ip":{"lan_ip":lanIp,"lan_mask":lanMask,"enable":modeEnable}}},function(res){
							if(res.error_code == ELANIPCONFLICT){
								// LAN IP冲突
								setTimeout(function(){
									getNewLanIp(modeEnable,function(){
										confirmMassiveIp(modeEnable);
									})
								},500);
							}else{
								changeMassCapSel();
								activeDhcpSetWrap();
								changeLanIp(lanIp);
							}
						});
					}else{
						typeof cancelCallback != "undefined" && cancelCallback();
					}
				});
			}else{
				showConfirm(label.normalCapabilityInfo + lanIp + label.confirmChangeInfo, function (result) {
					if (result) {
						$.action({"network":{"config_massive_sta_capacity_ip":{"lan_ip":lanIp,"lan_mask":lanMask,"enable":modeEnable}}},function(res){
							if(res.error_code == ELANIPCONFLICT){
								// IP地址冲突
								setTimeout(function(){
									getNewLanIp(modeEnable,function(){
										confirmMassiveIp(modeEnable);
									})
								},500);
							}else{
								changeCommonSel();
								activeDhcpSetWrap();
								changeLanIp(lanIp);
							}
						});
					}else{
						typeof cancelCallback != "undefined" && cancelCallback();
					}
				});
			}
		}
		id("commonStaNum").onclick = changeCommonCapMode;
		id("highStaNum").onclick = changeMassCapMode;
		if(!gSupportStaCapability){
			$("#lanIpAddrWrap").hide();
			$("#staCapabilityWrap").hide();
			$("#staCapabilityHelp").hide();
		}
	}
	init();
</script>
<style type="text/css">
	#dhcpStatus{
		visibility:visible !important;
	}
	#highStaNum{
		margin-left: 10px;
	}
	#lanIpAddrWrap{
		padding-left: 260px;
	}
	.opacityCover{
		opacity: 0.5;
	}
	div.hsTip p.detail {
		width: 293px;
	}
	ul.gridToolBar li.refreshUn input {
		background: 0 0 !important;
		border: 1px solid #fff;
		color: #fff;
		padding-left: 18px;
		padding-right: 18px;
	}
	ul.gridLineTips{
		margin-top:8px !important;
		height:auto;
		display:none;
		line-height: unset;
	}
	ul.gridLineTips span{
		color:#FFF;
		line-height:18px;
		font-size:12px;
	}
	div.warnCon {
		width: 16px;
		height: 16px;
		overflow: hidden;
		display: inline-block;
		vertical-align: top;
		margin-left: 246px;
	}
	div.warnCon img {
		margin-top: -187px;
		margin-left: -467px;
	}
</style>
<div id="hcCo" class="hcCo">
	<div class="title">
		<label class="title">{%menuStr.DHCPServer%}</label>
		<i class="helpBtn" helpStr="dhcpServerHelp"></i>
	</div>
	<div class="block">
		<ul class="gridLine gridLineA" id="staCapabilityWrap">
			<label class="desLblA">{%label.staCapability%}</label>
			<input id="commonStaNum" class="switchRadio" type="radio"/><label class="noteLbl" for="commonStaNum">{%label.normalCapability%}</label>
			<input id="highStaNum" class="switchRadio switchRadio" type="radio"/><label class="noteLbl" for="highStaNum">{%label.highCapability%}</label>
		</ul>
		<ul id="lanIpAddrWrap" class="gridLine gridLineA2">
			<label class="noteLbl">{%label.lanPortAddr%}{%label.colon%}<span id="lanIpAddr"></span></label>
		</ul>
		<div class = "dhcpServerSetWrap">
			<ul class="gridLine gridLineA gridLineA2">
				<label class="desLblA">{%menuStr.DHCPServer%}</label>
				<input id="dhcpSwitchOn" name="dhcpSwitch" class="switchRadio" type="radio" /><label class="noteLbl" for="dhcpSwitchOn">{%label.openStr%}</label>
				<input id="dhcpSwitchOff" name="dhcpSwitch" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="dhcpSwitchOff">{%label.closeStr%}</label>
				<input id="dhcpSwitchAuto" name="dhcpSwitch" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="dhcpSwitchAuto">{%label.wirelessAuto%}</label>
			</ul>
			<ul class="gridLine gridLineA gridLineTips" id="relayTip">
				<div class="warnCon">
					<img src="../web-static/images/routerBg.png" />
				</div>
				<span id="relayTipText"></span>
			</ul>
			<ul class="gridLine gridLineA gridLineA2">
				<label class="desLblA">{%label.addrPoolStart%}</label>
				<li class="textConA textCon"><input id="dhcpIpStart" class="textA text hoverBd imeModeN" maxLength="15" /><i class="tip"></i></li>
			</ul>
			<ul class="gridLine gridLineA">
				<label class="desLblA">{%label.addrPoolEnd%}</label>
				<li class="textConA textCon"><input id="dhcpIpEnd" class="textA text hoverBd imeModeN" maxLength="15" /><i class="tip"></i></li>
			</ul>
			<ul class="gridLine gridLineA">
				<label class="desLblA">{%label.addrLease%}</label>
				<li class="textConB textCon"><input id="dhcpLsTime" class="textB text hoverBd imeModeN" maxLength="4" /></li>
				<label class="noteLbl">{%label.DHCPMin%}</label>
			</ul>
			<ul class="gridLine gridLineA">
				<label class="desLblA">{%label.gateway%}</label>
				<li class="textConA textCon"><input id="dhcpGateway" class="textA text hoverBd imeModeN" maxLength="15" /><i class="tip"></i></li>
			</ul>
			<ul class="gridLine gridLineA">
				<label class="desLblA">{%label.dns0%}</label>
				<li class="textConA textCon"><input id="dhcpDnsPri" class="textA text hoverBd imeModeN" maxLength="15" /><i class="tip"></i></li>
			</ul>
			<ul class="gridLine gridLineA">
				<label class="desLblA">{%label.dns1%}</label>
				<li class="textConA textCon"><input id="dhcpDnsBak" class="textA text hoverBd imeModeN" maxLength="15" /><i class="tip"></i></li>
			</ul>
		</div>
		<div class="blockFuncA">
			<input id="save" type="button" value="{%btn.save%}" class="btnA subBtn" />
		</div>
		<ul id="dhcpStatus" class="gridLine gridLineA gridStatus">
			<label class="noteLbl">{%label.dhcpServerState%}{%label.colon%}<span id="dhcpStatusSpn"></span></label>
		</ul>
	</div>

	<div class="title">
		<label class="title">{%label.dhcpEquipment%}</label>
	</div>
	<div class="blockTable">
		<ul id="dhcpLsUl" class="gridToolBar">
			<li gridType="refresh">{%btn.refresh%}</li>
		</ul>
		<table id="dhcpLeaseTbl" class="dataGrid"></table>
	</div>
</div>
