<script type="text/javascript">
	function init()
	{
		var uciFile = uciProto.fileName;
		var uciTypeIface = uciProto.secType.iface;
		var uciTypeProto = uciProto.secType.proto;
		var uciWan = uciProto.secName.wan;
		var uciPppoe = uciProto.secName.pppoe;
		var uciDnsMode = uciProto.optName.dnsMode;
		var uciPriDns = uciProto.optName.priDns;
		var uciSndDns = uciProto.optName.sndDns;
		var uciMtu = uciProto.optName.mtu;
		var uciSpeed = uciProto.optName.speed;
		var uciWanType = uciProto.optName.type;
		var uciWanProto = uciProto.optName.proto;
		var uciUsrName = uciProto.optName.pppoeUsr;
		var uciPwd = uciProto.optName.pppoePwd;
		var uciDialMode = uciProto.optName.dialMode;
		var uciConnMode = uciProto.optName.connMode;
		var uciDemand = uciProto.optName.demand;
		var uciManual = uciProto.optName.manual;
		var uciAc = uciProto.optName.acName;
		var uciSrv = uciProto.optName.svcName;
		var uciIpMode = uciProto.optName.ipMode;
		var uciISPIp = uciProto.optName.ISPIp;
		var uciConnect = uciProto.optName.connect;
		var uciWanMac = uciProto.optName.macaddr;

		var DNS_MODE_DYNAMIC = uciProto.optValue.dnsMode.dynamic;
		var DNS_MODE_MANUAL = uciProto.optValue.dnsMode.manual;
		var CONN_MODE_AUTO = uciProto.optValue.connMode.auto;
		var CONN_MODE_DEMAND = uciProto.optValue.connMode.demand;
		var CONN_MODE_MANUAL = uciProto.optValue.connMode.manual;
		var IP_MODE_STATIC = uciProto.optValue.ispMode.sta;
		var IP_MODE_DHCP = uciProto.optValue.ispMode.dhcp;

		var demandTime = 10, manualTime = 0;

		var linkOptions = [{str:label.demand, value:CONN_MODE_DEMAND},
					   {str:label.auto, value:CONN_MODE_AUTO},
					   {str:label.manual, value:CONN_MODE_MANUAL}];

		var dialOptions = [{str:label.autoDial, value:"auto"}, {str:label.normDial, value:"normal"}];
		var updateTimerHandle;

		var wanPortSelCfg;
		var wanPortSelCon;

		var wanDisplayPort; // 固定WAN口可选时对应的端口对象
		var wanDisplayData; // 固定WAN口可选时对应的端口数据
		var powerPosition;    // 当前机型电源位置 (左/右)
		var powerIndex;		  // 电源相对端口偏移
		var wanPortNum;     // 当前机型端口数量

		if(dualWanOpen && currentSelectedWan != 1){
			uciWan += "_" + currentSelectedWan;
			uciPppoe += "_" + currentSelectedWan;
		}

		function errHandle(errNo, objOrId)
		{
			var showStr = "";

			switch (errNo)
			{
			case ENONE:
				return false;
			case EPPPOEUSER:
				showStr = errStr.pppoeUserErr;
				break;
			case EPPPOEPWD:
				showStr = errStr.pppoePwdErr;
				break;
			case EINVMTU:
				showStr = errStr.pppoeMtuErr;
				break;
			case EINVNET:
				showStr = errStr.ipAddrNetErr;
				break;
			case EINVIP:
				showStr = errStr.ipAddrErr;
				break;
			case EINVIPFMT:
				showStr = errStr.ipAddrFmtErr;
				break;
			case EINVGROUPIP:
				showStr = errStr.ipAddrGroupErr;
				break;
			case EINVLOOPIP:
				showStr = errStr.ipAddrLoopErr;
				break;
			case ECOMFLICTNET:
				showStr = errStr.ispIpLanConflict;
				break;
			case EINVFDNSVR:
				showStr = errStr.primDnsErr;
				break;
			case EINVSDNSVR:
				showStr = errStr.seDnsErr;
				break;
			case EINVTIME:
				showStr = errStr.pppoeOffTimeErr;
				break;
			case ENOLINK:
				showStr = errStr.wanLinkDown;
				break;
			case ECONFLICTLANMAC:
				showStr = errStr.lanWanMacConflict;
				break;
			case ECONFLICTWANMAC:
				showStr = errStr.mulWanMacConflict;
				break;
			case ECONFLICTWANGATEWAY:
				showStr = errStr.wanIpGateConflict;
				break;
			case ECONFLICTIPWANDNS:
				showStr = errStr.wanIpDnsConflict;
				break;
			case ECONFLICTGATEWAYWANIP:
				showStr = errStr.gateIpConflict;
				break;
			case ECONFLICTDNSWANIP:
				showStr = errStr.dnsIpConflict;
				break;
			default:
				showStr = errStr.invRequestFail;
				break;
			}

			showAlert(showStr, objOrId);
			return true;
		}

		for(var i = 1; i < 8; i++)
		{
			dialOptions.push({str:label.specDial+i, value:"special" + i});
		}

		function showConnectTime(secs)
		{
			var MIN = 60;
			var HOU = MIN * 60;
			var DAY = HOU * 24;
			var days, hours, mins;
			var dayTimeStr = "";

			days = parseInt(secs / DAY);
			hours = parseInt((secs % DAY) / HOU);
			mins = parseInt((secs % HOU) / MIN);

			if (days > 0)
			{
				dayTimeStr = days + label.dayT;
			}

			dayTimeStr += hours + label.lHour + mins + label.minuteT;

			return dayTimeStr;
		}

		function setPPPoEStatusValue(data)
		{
			var wanStatus = null;
			if(dualWanOpen && currentSelectedWan != 1){
				wanStatus = data[uciNetwork.fileName][uciNetwork.dynData.wanStatus + "_" + currentSelectedWan];
			}else{
				wanStatus = data[uciNetwork.fileName][uciNetwork.dynData.wanStatus];
			}

			if (wanStatus["proto"] != uciProto.optValue.proto.pppoe)
			{
				clearTimeout(updateTimerHandle);
				return;
			}

			var dis = "none", advPPPoeHelp = id("pppoeSolution");
			var onlineTimeDis = "none", onlineTimeUl = id("onlineTimeUl");
			var code = wanStatus["error_code"];
			var ip = wanStatus[uciNetwork.optName.ip] || "0.0.0.0";
			var priDns = wanStatus[uciNetwork.optName.priDns] || "0.0.0.0";
			var sndDns = wanStatus[uciNetwork.optName.sndDns] || "0.0.0.0";
			var connectTime = wanStatus[uciNetwork.optName.upTime] || 0;
			var wanLinkStatus = parseInt(wanStatus["link_status"]);

			switch(wanLinkStatus)
			{
			case LINK_DOWN:
			case LINKING_UP:
				disableBtn("disconnect", (LINK_DOWN == wanLinkStatus));
				onlineTimeDis = "none";

				id("wanIpLbl").innerHTML = "0.0.0.0";
				id("wanDnsLbl").innerHTML = "0.0.0.0";

				var linkTipType = (LINK_DOWN == wanLinkStatus) ? "error" : "link";

				if (0 == parseInt(wanStatus[uciNetwork.optName.phyStatus]))
				{
					code = LINK_CODE_PHYDOWN;
				}

				if ((LINK_CODE_MANUAL != code) &&
					(LINK_CODE_NORMAL != code) &&
					(LINK_CODE_INET_ERR != code))
				{
					dis = "inline-block";
					hsStatSet(linkTipType, linkStatus[wanLinkStatus] + label.lBrackets + linkCode[code] + label.rBrackets);

					switch(code)
					{
					case LINK_CODE_NOECHO:
						helpBind(advPPPoeHelp, "PPPoEServerDeadHelp");
						break;
					case LINK_CODE_AUTH_ERR:
						helpBind(advPPPoeHelp, "PPPoENPErrHelp");
						break;
					case LINK_CODE_UNKNOWN:
					case LINK_CODE_DENY:
					case LINK_CODE_SRVDOWN:
					case LINK_CODE_OPT_UNSUPPORT:
					case LINK_CODE_AUTH_UNSUPPORT:
						helpBind(advPPPoeHelp, "PPPoEOtherErrHelp");
						break;
					case LINK_CODE_PHYDOWN:
					default:
						advPPPoeHelp.onclick = null;
						dis = "none";
						break;
					}
				}
				else
				{
					hsStatSet(linkTipType, linkStatus[wanLinkStatus]);
				}
				break;
			case LINK_UP:
				id("wanIpLbl").innerHTML = ip;
				if ("0.0.0.0" == priDns && "0.0.0.0" == sndDns)
				{
					id("wanDnsLbl").innerHTML = (" " + label.dnsException);
				}
				else
				{
					id("wanDnsLbl").innerHTML = priDns + " , " + sndDns;
				}

				disableBtn("disconnect", false);
				id("onlineTimeLbl").innerHTML = showConnectTime(connectTime);
				onlineTimeDis = "block";
				hsStatSet("correct", linkStatus[LINK_UP]);

				break;
			case LINKING_DOWN:
				id("wanIpLbl").innerHTML = "0.0.0.0";
				id("wanDnsLbl").innerHTML = "0.0.0.0";
				disableBtn("disconnect", true);
				id("onlineTimeLbl").innerHTML = showConnectTime(connectTime);
				onlineTimeDis = "block";
				hsStatSet("link", linkStatus[LINKING_DOWN]);
				break;
			default:
				break;
			}

			advPPPoeHelp.style.display = dis;
			onlineTimeUl.style.display = onlineTimeDis;
		}

		function onSave()
		{
			function toSave() {
				if (!gSupportWanPortSwap || gWanPortDetectSupport) {
					onSaveBasicSet();
				} else {
					var wanPortselVal = id("wanPortSel").value;

					if (wanPortselVal == wanPortSelCfg)
					{
						onSaveBasicSet();
					}
					else
					{
						var data = {}, args = {};
						data[uciProto.fileName] = {};
						data[uciProto.fileName][uciProto.secName.wan] = args;
						args[uciProto.optName.port] = wanPortselVal;

						var curRateVal = id("wanRateSel").value;

						if (checkIfWanRateShouldChange(wanPortselVal, curRateVal))
						{
							args[uciProto.optName.rate] = "auto";
							curRateVal = "auto"
						}

						showLoading(label.switchWanPortAndWait, null, undefined, false);
						$.modify(data, function(result){
							if (result[ERR_CODE] == ENONE)
							{
								wanPortSelCfg = wanPortselVal;
								var waitTime = result["wait_time"] || 0;
								waitTime = parseInt(waitTime);

								var portRateOptions = initDynamicPortRate(wanPortselVal,devicePowerPos);
								id("wanRateSel").resetOptions(portRateOptions, curRateVal);

								if (waitTime == 0)
								{
									closeLoading();
									onSaveBasicSet();
								}
								else
								{
									$.setTimeout(function(){
										closeLoading();
										onSaveBasicSet();
									}, waitTime * 1000);
								}
							}
							else
							{
								closeLoading();
								id("wanPortSel").changeSel(wanPortSelCfg);
								wanPortSelectChange(wanPortSelCfg);
								showAlert(errStr.systemErr);
							}
						});
					}
				}
			}
			if (gSysModeSupport) {
				if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
					changeSysModeAlert("switch", uciSystem.optValue.sysMode.routerMode, function(){
						toSave();
					});
				} else {
					toSave();
				}				
			} else {
				wanCheckWDS(toSave);
			}
		}

		function onSaveBasicSet()
		{
			var cfg = {}, cfgProto = {}, cfgPppoe = {}, cfgWan = {};
			cfg[uciFile] = cfgProto;
			cfgProto[uciWan] = cfgWan;
			cfgProto[uciPppoe] = cfgPppoe;

			var nameVal = id("name").value;
			var pswVal = id("psw").value;

			cfgWan[uciWanType] = uciProto.optValue.proto.pppoe;

			cfgPppoe[uciUsrName] = nameVal;
			cfgPppoe[uciPwd] = pswVal;

			if (gSysModeSupport && !dualWanOpen) {
				cfg.system = {"sys_mode":{"mode": uciSystem.optValue.sysMode.routerMode}};
				switch (gBandNum) {
				case BAND_1:
					cfg.wireless = {"wlan_wds_2g":{"enable":"0"}};
					break;
				case BAND_2:
					cfg.wireless = {"wlan_wds_2g":{"enable":"0"},"wlan_wds_5g":{"enable":"0"}};
					break;
				case BAND_3:
					cfg.wireless = {"wlan_wds_2g":{"enable":"0"},"wlan_wds_5g_1":{"enable":"0"},"wlan_wds_5g_4":{"enable":"0"}};
					break;
				}
			}

			setLoadingId("save");
			hsLoading(true);

			$.modify(cfg, function(result){
				var code = result[ERR_CODE];
				if (ENONE == code)
				{
					curSysMode = uciSystem.optValue.sysMode.routerMode;
					onclickConnect();
				}
				else
				{
					//刷新WAN口状态
					updateTimerHandle = $.setTimeout(refreshWanStatus, 0);
				}
				return errHandle(code);
			});
		}

		function onSaveHighSet()
		{
			function toSaveHighSet() {
				var cfg = {}, cfgProto = {}, cfgPppoe = {}, cfgWan = {};
				cfg[uciFile] = cfgProto;
				cfgProto[uciWan] = cfgWan;
				cfgProto[uciPppoe] = cfgPppoe;

				var diagModeVal = id("wanDialSel").value;
				var connModeVal = id("wanLinkSel").value;
				var mtuVal = id("mtu").value, acNameVal = id("acName").value, svcNameVal = id("svcName").value;
				var wanSpeedVal = id("wanRateSel").value;
				var wanMac = id("wanMac");
				var wanMacVal = wanMac.value;

				cfgPppoe[uciDialMode] = diagModeVal;
				cfgPppoe[uciConnMode] = connModeVal;

				if ((errHandle(checkMtu(mtuVal, 1492, 576), "mtu")) ||
					(wanMacErrHandle(checkMac(wanMacVal), wanMac)))
				{
					return;
				}

				/* 去掉前导0 */
				mtuVal = hideLeadingZeros(mtuVal);
				id("mtu").value = mtuVal;

				cfgPppoe[uciMtu] = mtuVal;
				cfgPppoe[uciAc] = acNameVal;
				cfgPppoe[uciSrv] = svcNameVal;

				cfgPppoe[uciIpMode] = IP_MODE_DHCP;
				cfgPppoe[uciDnsMode] = DNS_MODE_DYNAMIC;

				cfgWan[uciWanMac] = wanMacVal;
				if(!$("#wanRateSelUl").is(":hidden")){
					cfgWan[uciSpeed] = wanSpeedVal;
				}

				cfgPppoe[uciWanProto] = uciProto.optValue.proto.none;

				clearTimeout(updateTimerHandle);
				disableBtn("save", true);
				disableBtn("disconnect", true);
				setLoadingId("saveHighSet");
				hsLoading(true);

				$.modify(cfg,function(result){
					hsLoading(false, function(){
						disableBtn("save", false);
						disableBtn("disconnect", false);
					});
					updateTimerHandle = $.setTimeout(refreshWanStatus, 0);
					if(result[ERR_CODE] == ENONE){
						getPppoeData();
					}else{
						return errHandle(result[ERR_CODE]);
					}
				});
			}
			if (gSysModeSupport && !dualWanOpen) {
				toSaveHighSet();
			} else {
				wanCheckWDS(toSaveHighSet);
			}
		}

		function setPppoeData(ALL_DATA)
		{
			var data = ALL_DATA[uciFile];
			var wanCfg = data[uciWan];
			var pppoeCfg = data[uciPppoe];
			var wanPortDetectCfg;
			if (gWanPortDetectSupport) {
				wanPortDetectCfg = ALL_DATA[uciWanPortDetect.fileName][uciWanPortDetect.secName.config];
			}

			if (!gSupportWanPortSwap) {
				if (wanPortDetectCfg[uciWanPortDetect.optName.fixWanPort] != -1){
					wanPortSelCfg = wanPortDetectCfg[uciWanPortDetect.optName.fixWanPort];
					wanPortSelTmp = wanPortDetectCfg[uciWanPortDetect.optName.fixWanPort];
				}else{
					wanPortSelCfg = -1;
					wanPortSelTmp = -1;
				}
				selectInit("wanRateSel", rateOptions, getWanRateOption(wanCfg[uciSpeed]));
			} else {
				if (gWanPortDetectSupport) {
					if (wanPortDetectCfg[uciWanPortDetect.optName.fixWanPort] == -1) {
						// fix_wan_port未指定固定WAN口时，则指定wan_port_list中第一个可选口为固定WAN口
						wanPortSelCfg = wanPortIndexList[0];
						wanPortSelTmp = wanPortIndexList[0];
					} else {
						wanPortSelCfg = wanPortDetectCfg[uciWanPortDetect.optName.fixWanPort];
						wanPortSelTmp = wanPortDetectCfg[uciWanPortDetect.optName.fixWanPort];
					}
				} else {
					wanPortSelCfg = wanCfg[uciProto.optName.port];
					wanPortSelCon = selectInit("wanPortSel", wanPortDisplayList, wanPortSelCfg, wanPortSelectChange);
					wanPortSelectChange(wanPortSelCfg);
				}

				var wanSpeed = wanCfg[uciSpeed] ? wanCfg[uciSpeed] : "auto";
				var portRateOptions;
				if(!dualWanOpen){
					portRateOptions = initDynamicPortRate(wanPortSelCfg,devicePowerPos);
					wanSpeed = refreshWanRateNoExist(portRateOptions,wanSpeed);
					selectInit("wanRateSel", portRateOptions, wanSpeed);
					if(currentSelectHardType[wanPortSelCfg]){
						$("#wanRateSelUl").hide();
					}else{
						$("#wanRateSelUl").show();
					}
				}else{
					var wanPortPos = currentSelectPos[currentSelectedWan -1];
					portRateOptions = initDynamicPortRate(wanPortPos,devicePowerPos);
					if(currentSelectHardType[wanPortPos]){
						$("#wanRateSelUl").hide();
					}else{
						$("#wanRateSelUl").show();
					}
					wanSpeed = refreshWanRateNoExist(portRateOptions,wanSpeed);
					selectInit("wanRateSel", portRateOptions, wanSpeed);
				}
			}

			if (gWanPortDetectSupport && !dualWanOpen) {
				var wanPortEnable = wanPortDetectCfg[uciWanPortDetect.optName.enable];
				if (wanPortEnable == "1") {
					id("wanSetAuto").click();
				} else {
					id("wanSetFixed").click();
				}
			}

			$("#" + "name").val(pppoeCfg[uciUsrName]);
			$("#" + "psw").val(pppoeCfg[uciPwd]);
			$("#" + "mtu").val(pppoeCfg[uciMtu]);
			$("#" + "acName").val(pppoeCfg[uciAc]);
			$("#" + "svcName").val(pppoeCfg[uciSrv]);

			var connModeCfg = pppoeCfg[uciConnMode] ? pppoeCfg[uciConnMode] : CONN_MODE_AUTO;
			selectInit("wanLinkSel", linkOptions, connModeCfg);

			var uciDialModeCfg = pppoeCfg[uciDialMode] ? pppoeCfg[uciDialMode] : "normal";
			selectInit("wanDialSel", dialOptions, uciDialModeCfg);

			setMacInfo(ALL_DATA);
			//设置WAN口状态
			setPPPoEStatusValue(ALL_DATA);
		}

		function refreshWanRateNoExist(portRateOptions,wanSpeed){
			var wanRateExist = false;
			for(var i=0;i<portRateOptions.length;i++){
				if(portRateOptions[i].value == wanSpeed){
					wanRateExist = true;
				}
			}
			if(!wanRateExist){
				wanSpeed = "auto";
			}
			return wanSpeed;
		}

		function getPppoeData()
		{
			var data = {};
			data[uciFile] = {};
			data[uciFile][KEY_NAME] = [uciWan, uciPppoe];
			data[uciNetwork.fileName] = {};
			if(dualWanOpen && currentSelectedWan != 1){
				data[uciNetwork.fileName][KEY_NAME] = [uciNetwork.dynData.wanStatus + "_" + currentSelectedWan, uciNetwork.dynData.ifaceMac];
			}else{
				data[uciNetwork.fileName][KEY_NAME] = [uciNetwork.dynData.wanStatus, uciNetwork.dynData.ifaceMac];
			}
			if (gWanPortDetectSupport) {
				data[uciWanPortDetect.fileName] = {};
				data[uciWanPortDetect.fileName][KEY_NAME] = uciWanPortDetect.secName.config;
			}

			$.query(data, setPppoeData);
		}

		function onclickConnect()
		{
			if(dualWanOpen && currentSelectedWan != 1){
				data = {"network":{"change_wan_status":{"proto":"pppoe" + "_" + currentSelectedWan,"operate":"connect"}}};
			}else{
				data = {"network":{"change_wan_status":{"proto":"pppoe", "operate":"connect"}}};
			}
			clearTimeout(updateTimerHandle);
			disableBtn("disconnect", true);
			disableBtn("saveHighSet", true);

			$.action(data,function(result){
				hsLoading(false, function(){
					disableBtn("disconnect", false);
					disableBtn("saveHighSet", false);
				});
				updateTimerHandle = $.setTimeout(refreshWanStatus, 2000);
			});
		}

		function onclickDisconnect()
		{
			var data = null;
			if(dualWanOpen && currentSelectedWan != 1){
				data = {"network":{"change_wan_status":{"proto":"pppoe" + "_" + currentSelectedWan,"operate":"disconnect"}}};
			}else{
				data = {"network":{"change_wan_status":{"proto":"pppoe", "operate":"disconnect"}}};
			}

			clearTimeout(updateTimerHandle);
			disableBtn("save", true);
			disableBtn("saveHighSet", true);
			setLoadingId("disconnect");
			hsLoading(true);

			$.action(data, function(result){
				hsLoading(false, function(){
					disableBtn("save", false);
					disableBtn("saveHighSet", false);
				});
				updateTimerHandle = $.setTimeout(refreshWanStatus, 2000);
			});
		}

		function refreshWanStatus()
		{
			var data = {};
			data[uciNetwork.fileName] = {};
			if(dualWanOpen && currentSelectedWan != 1){
				data[uciNetwork.fileName][KEY_NAME] = [uciNetwork.dynData.wanStatus + "_" + currentSelectedWan];
			}else{
				data[uciNetwork.fileName][KEY_NAME] = [uciNetwork.dynData.wanStatus];
			}

			clearTimeout(updateTimerHandle);
			$.query(data, function(data){
				setPPPoEStatusValue(data);
				updateTimerHandle = $.setTimeout(refreshWanStatus, 2000);
			});
		}

		function onSaveWanPortStatus() {
			var data = {}, config = {};
			data[uciWanPortDetect.fileName] = {};
			data[uciWanPortDetect.fileName][uciWanPortDetect.secName.config] = config;
			config[uciWanPortDetect.optName.enable] = id("wanSetAuto").checked ? uciWanPortDetect.optValue.enable.on : uciWanPortDetect.optValue.enable.off;

			if (!id("wanSetAuto").checked && (gSupportWanPortSwap || gSupportPortManage) ) {
				// WAN口固定位置可选时请求构造
				var index = -1;
				for(var i=0;i<wanDisplayData.length;i++){
					if(wanDisplayData[i].state == "active" ){
						index = i;
						break;
					}
				}
				wanPortSelTmp = index;
				if(index != -1){
					config[uciWanPortDetect.optName.fixWanPort] = index;
				}
				var curRateVal = id("wanRateSel").value;
				if (checkIfWanRateShouldChange(wanPortSelTmp, curRateVal))
				{
					curRateVal = "auto";
					data[uciProto.fileName] = {};
					data[uciProto.fileName][uciProto.secName.wan] = {};
					data[uciProto.fileName][uciProto.secName.wan][uciProto.optName.rate] = "auto";
				}
			}

			setLoadingId("wanSetBtn");
			hsLoading(true);
			$.modify(data, function (res) {
				if(res[ERR_CODE] == ENONE){
					hsLoading(false);
					if (!id("wanSetAuto").checked && gSupportWanPortSwap) {
						wanPortSelCfg = wanPortSelTmp;
						var portRateOptions = initDynamicPortRate(wanPortSelTmp,devicePowerPos);
						id("wanRateSel").resetOptions(portRateOptions, curRateVal);
					}
					getPppoeData();
				}else{
					showAlert(errStr.invRequestFailTrylater);
				}
			});
		}
		// 可选固定WAN端口方法绑定(不改变端口名称)
		function wanClickNoNameChange(portInfo){
			switch (portInfo.state) {
				case 'disable':
					return;
				case 'normal':
					return;
				case 'active':
					for(var i=0;i<wanDisplayData.length;i++){
						if(wanDisplayData[i].state == "active" && i != portInfo.index){
							wanDisplayData[i].state = "normal";
						}
					}
					wanDisplayPort.refresh();
					break;
			}
		}
		// 可选固定WAN端口方法绑定
		function wanClickHandler(portInfo){
			switch (portInfo.state) {
				case 'disable':
					return;
				case 'normal':
					wanDisplayData[portInfo.index].name = "LAN";
					wanDisplayPort.refresh();
					break;
				case 'active':
					for(var i=0;i<wanDisplayData.length;i++){
						if(wanDisplayData[i].state == "active" && i != portInfo.index){
							wanDisplayData[i].state = "normal";
							wanDisplayData[i].name  = "LAN";
						}
					}
					wanDisplayData[portInfo.index].name = "WAN";
					wanDisplayPort.refresh();
					break;
			}
		}

		function getEthLayoutInfo(index){
			var ethLayoutArray = ethLayoutList.split("-");
			var ethLayoutShow = ethLayoutArray.slice(0,ethLayoutArray.length);
			var portRate = "";
			switch(ethLayoutShow[index]){
				case "0":
					break;
				case "1":
					portRate = "10M";
					break;
				case "2":
					portRate = "100M";
					break;
				case "3":
					portRate = "GE";
					break;
				case "4":
					portRate = "2.5GE";
					break;
				case "5":
					portRate = "10GE";
					break;
			}
			return portRate;
		}

		// 从端口管理初始化当前端口信息
		function initFixedPortManage(auto){
			$.query({"port_manage":{"table":"dev_info"}},function(resCap){
				var currentWanDetected = false;
				var deviceList = resCap.port_manage.dev_info;
				for(var i=0;i<deviceList.length;i++){
					if(deviceList[i]["cap"] == 1){
						powerPosition = deviceList[i]["power_pos"];
						powerIndex = deviceList[i][uciPortConfig.dynOptName.powerIdx];
						wanPortNum = deviceList[i]["phy_num"];
						wanDisplayData = new Array(wanPortNum);
						for(var t=0;t<wanPortNum;t++){
							wanDisplayData[t] = {};
						}
						for(var j=0;j<deviceList[i]["phy_info"].length;j++){
							var currentPortIdx = j;
							var currentPortRateIndex = powerPosition == "left"? currentPortIdx : wanPortNum-currentPortIdx-1;
							switch(deviceList[i]["phy_info"][j]["role"].slice(0,3).toUpperCase()) {
								case "LAN":
									wanDisplayData[currentPortIdx].name = "LAN";
									wanDisplayData[currentPortIdx].state = "normal";
									wanDisplayData[currentPortIdx].rate = getEthLayoutInfo(currentPortRateIndex);
									wanDisplayData[currentPortIdx].isSfp = deviceList[i]["phy_info"][j]["type"].toUpperCase() == "SFP";
									break;
								case "WAN":
									currentWanDetected = true;
									wanDisplayData[currentPortIdx].name = "WAN";
									wanDisplayData[currentPortIdx].state = "active";
									wanDisplayData[currentPortIdx].rate = getEthLayoutInfo(currentPortRateIndex);
									wanDisplayData[currentPortIdx].isSfp = deviceList[i]["phy_info"][j]["type"].toUpperCase() == "SFP";
									break;
								case "GAM":
									wanDisplayData[currentPortIdx].name = label.gamePort;
									wanDisplayData[currentPortIdx].state = "disable";
									wanDisplayData[currentPortIdx].rate = getEthLayoutInfo(currentPortRateIndex);
									wanDisplayData[currentPortIdx].isSfp = deviceList[i]["phy_info"][j]["type"].toUpperCase() == "SFP";
									break;
								case "UPL":
									wanDisplayData[currentPortIdx].name = label.iptvUp;
									wanDisplayData[currentPortIdx].state = "disable";
									wanDisplayData[currentPortIdx].rate = getEthLayoutInfo(currentPortRateIndex);
									wanDisplayData[currentPortIdx].isSfp = deviceList[i]["phy_info"][j]["type"].toUpperCase() == "SFP";
									break;
								case "DOW":
									wanDisplayData[currentPortIdx].name = label.iptvDown;
									wanDisplayData[currentPortIdx].state = "disable";
									wanDisplayData[currentPortIdx].rate = getEthLayoutInfo(currentPortRateIndex);
									wanDisplayData[currentPortIdx].isSfp = deviceList[i]["phy_info"][j]["type"].toUpperCase() == "SFP";
									break;
								case "LAG":
									wanDisplayData[currentPortIdx].name = label.lagPort;
									wanDisplayData[currentPortIdx].state = "disable";
									wanDisplayData[currentPortIdx].rate = getEthLayoutInfo(currentPortRateIndex);
									wanDisplayData[currentPortIdx].isSfp = deviceList[i]["phy_info"][j]["type"].toUpperCase() == "SFP";
									break;
							}
						}
					}
				}
				if(wanPortSelCfg != -1 && !currentWanDetected && !auto){
					setCurrentFixPort(wanDisplayData,wanPortSelCfg);
				}
				if(auto){
					for(var i=0;i<wanDisplayData.length;i++){
						if(wanDisplayData[i].name == "WAN" || wanDisplayData[i].name == "LAN"){
							wanDisplayData[i].name = "WAN/LAN";
							wanDisplayData[i].state = "active";
						}
					}
				}
				wanDisplayPort = new PortConfig();
				var wanDisplayInitData = {
					element: $('.wanDisplayContainer')[0],
					type: 'display',
					port: wanDisplayData,
					powerPos: powerPosition,
					powerIdx: powerIndex,
					displayClickable: auto == false,
					callback:wanClickHandler
				};
				wanDisplayPort.init(wanDisplayInitData);
			})
		}
		// 根据固定WAN的设置显示WAN口状态(处理与端口自定义的冲突)
		function setCurrentFixPort(displayData,wanPortCfg){
			if(displayData[wanPortCfg].state == "disable"){
				// 之前设置的固定WAN与当前端口自定义冲突
				var currentPortIdx = calNextUnusedPort(displayData);
				if(currentPortIdx == -1){
					//无可定义端口
					showAlert("固定WAN口设置失效且当前无可定义端口，请在端口自定义中关闭相关端口定义");
				}else{
					displayData[currentPortIdx].name = "WAN";
					displayData[currentPortIdx].state = "active";
				}
			}else{
				displayData[wanPortCfg].name = "WAN";
				displayData[wanPortCfg].state = "active";
			}
			function calNextUnusedPort(displayData){
				var index = -1;
				for(var i =0;i<displayData.length;i++){
					if(displayData[i].state == "normal"){
						index = i;
						break;
					}
				}
				return index;
			}
		}
		// 从module_spec初始化当前端口信息
		function initFixedPortSpec(auto){
			var ethLayoutArray = ethLayoutList.split("-");
			var ethLayoutShow;
			ethLayoutShow = ethLayoutArray.slice(0,ethLayoutArray.length);
			wanPortNum = ethLayoutArray.length;
			if(typeof devicePowerPos != "undefined"){
				powerPosition = devicePowerPos;
			}else{
				powerPosition = "left";
			}
			wanDisplayData = new Array(wanPortNum);
			for(var t=0;t<wanPortNum;t++){
				wanDisplayData[t] = {};
			}
			for(var i = 0;i<ethLayoutShow.length;i++){
				if(powerPosition == "left"){
					switch(ethLayoutShow[i]){
						case "0":
							break;
						case "1":
							wanDisplayData[i].name = "10M";
							wanDisplayData[i].state = "disable";
							wanDisplayData[i].rate = "10M";
							break;
						case "2":
							wanDisplayData[i].name = "100M";
							wanDisplayData[i].state = "disable";
							wanDisplayData[i].rate = "100M";
							break;
						case "3":
							wanDisplayData[i].name = "GE";
							wanDisplayData[i].state = "disable";
							wanDisplayData[i].rate = "GE";
							break;
						case "4":
							wanDisplayData[i].name = "2.5GE";
							wanDisplayData[i].state = "disable";
							wanDisplayData[i].rate = "2.5GE";
							break;
						case "5":
							wanDisplayData[i].name = "10GE";
							wanDisplayData[i].state = "disable";
							wanDisplayData[i].rate = "10GE";
							break;
					}
				}else{
					switch(ethLayoutShow[i]){
						case "0":
							break;
						case "1":
							wanDisplayData[wanPortNum-i-1].name = "10M";
							wanDisplayData[wanPortNum-i-1].state = "disable";
							wanDisplayData[wanPortNum-i-1].rate = "10M";
							break;
						case "2":
							wanDisplayData[wanPortNum-i-1].name = "100M";
							wanDisplayData[wanPortNum-i-1].state = "disable";
							wanDisplayData[wanPortNum-i-1].rate = "100M";
							break;
						case "3":
							wanDisplayData[wanPortNum-i-1].name = "GE";
							wanDisplayData[wanPortNum-i-1].state = "disable";
							wanDisplayData[wanPortNum-i-1].rate = "GE";
							break;
						case "4":
							wanDisplayData[wanPortNum-i-1].name = "2.5GE";
							wanDisplayData[wanPortNum-i-1].state = "disable";
							wanDisplayData[wanPortNum-i-1].name = "2.5GE";
							break;
						case "5":
							wanDisplayData[wanPortNum-i-1].name = "10GE";
							wanDisplayData[wanPortNum-i-1].state = "disable";
							wanDisplayData[wanPortNum-i-1].name = "10GE";
							break;
					}
				}
			}
			for(var i=0;i<wanPortIndexList.length;i++){
				wanDisplayData[wanPortIndexList[i]].state = "normal";
			}
			if(wanPortSelCfg != -1){
				wanDisplayData[wanPortSelCfg].state = "active";
			}
			if(auto){
				for(var i=0;i<wanDisplayData.length;i++){
					if(wanDisplayData[i].state != "disable"){
						wanDisplayData[i].state = "active";
					}
				}
			}
			wanDisplayPort = new PortConfig();
			var wanDisplayInitData = {
				element: $('.wanDisplayContainer')[0],
				type: 'display',
				port: wanDisplayData,
				powerPos: powerPosition,
				powerIdx: typeof POWER_IDX !== "undefined" ? POWER_IDX : 0,
				displayClickable: auto == false,
				callback:wanClickNoNameChange
			};
			wanDisplayPort.init(wanDisplayInitData);
		}

		gSupportWanPortSwap && !gWanPortDetectSupport && $("#wanPortSelDiv").removeClass("disNone");

		selectInit("wanSel", wanOptions, LINK_TYPE_PPPOE, wanSelectChange);
		updateTimerHandle = $.setTimeout(refreshWanStatus, 2000);
		disableBtn("disconnect", true);

		id("disconnect").onclick = onclickDisconnect;
		id("save").onclick = onSave;
		id("saveHighSet").onclick = onSaveHighSet;

		if (gWanPortDetectSupport && !dualWanOpen) {
			$("#wanSetDiv").removeClass("disNone");
			id("wanSetFixedTip").innerHTML = label.wanSetFixedSelTip;
			$('input[name="wanSetRadio"]').on("click", function(){
				if ("wanSetAuto" == this.id) {
					// 自动选择WAN口时页面显示
					$("#selectWanPort").hide();
					if (gSupportPortManage) {
						$(".sampleImgCon").hide();
						initFixedPortManage(true);
						$(".wanDisplayContainer").show();
					}else{
						if(gSupportWanPortSwap){
							$(".sampleImgCon").hide();
							initFixedPortSpec(true);
							$(".wanDisplayContainer").show();
						}else{
							id("wanSetFixedTip").innerHTML = label.wanSetFixedTips;
							$(".sampleImgCon").show();
							id("sampleImg").src = "../web-static/images/wanSetAuto.png";
							id("sampleImg").useMap = "";
							$(".wanDisplayContainer").hide();
							$("#selectWanPort").hide();
						}
					}
					$("#wanRateSel span")[0].innerHTML = label.dupAuto;
					id("wanRateSel").disable(true);
					$("#wanRateSelUl").show();
				} else {
					id("wanRateSel").disable(false);
					if (gSupportPortManage) {
						$(".sampleImgCon").hide();
						initFixedPortManage(false);
						$(".wanDisplayContainer").show();
						$("#selectWanPort").show();
					}else{
						if(gSupportWanPortSwap){
							$(".sampleImgCon").hide();
							initFixedPortSpec(false);
							$(".wanDisplayContainer").show();
							$("#selectWanPort").show();
						}else{
							$(".sampleImgCon").show();
							id("sampleImg").src = "../web-static/images/wanSetFixed.png";
							id("sampleImg").useMap = "";
							var curRateVal = id("wanRateSel").value;
							id("wanRateSel").resetOptions(rateOptions, curRateVal);
							$(".wanDisplayContainer").hide();
							$("#selectWanPort").hide();
							id("wanSetFixedTip").innerHTML = label.wanSetFixedTips;
							return;
						}
					}
					// 当前端口速率设置统一使用moduleSpec中字段
					var curRateVal = id("wanRateSel").value;
					var portRateOptions = initDynamicPortRate(wanPortSelCfg,devicePowerPos);
					id("wanRateSel").resetOptions(portRateOptions, curRateVal);
				}
			});
			id("wanSetBtn").onclick = onSaveWanPortStatus;
		}
		getPppoeData();
	}

	init();
</script>
<style type="text/css">
	#pppoeSolution{
		color:#005FB8;
		font-size:12px;
		margin-left:10px;
		text-indent:0px;
		vertical-align:middle;
	}
	li.wanLinkLi{
		margin-left:86px;
	}
	#save{
		margin-left:25px !important;
	}
	#onlineTimeUl{
		display:none;
	}
	li.macCloneLi{
		color:#FFFFFF;
		font-size:12px;
		line-height:20px !important;
	}
	#wanStatus i{
		display:inline-block;
		height:13px;
		width:13px;
		vertical-align:middle;
		line-height:0px;
	}
	div.block p.tips {
		font-size: 12px;
		color: #FFFFFF;
		letter-spacing: 0;
		line-height: 12px;
		text-align: left;
	}
	div.block div.wanSetCon {
		margin-top: 40px;
		color: #fff;
		text-align: left;
	}
	div.wanSetTitle, div.radioBtnCon {
		display: inline-block;
	}
	div.wanSetTitle {
		font-size: 14px;
		color: #FFFFFF;
		letter-spacing: -0.43px;
		text-align: right;
		margin-left: 100px;
		margin-right: 14px;
		vertical-align: top;
	}
	div.radioBtnCon label.radioLbl {
		font-size: 14px;
		color: #FFFFFF;
		letter-spacing: -0.43px;
		vertical-align: middle;
		margin-left: 4px;
	}
	div.radioBtnCon p.des {
		font-size: 12px;
		color: #FFFFFF;
		letter-spacing: 0;
		line-height: 12px;
		margin: 8px 17px 25px;
	}
	div.sampleImgCon {
		margin-top: 15px;
		text-align: center;
	}
	ul.wanSel{
		margin-bottom:0px !important;
	}
	ul.wanSelTips{
		margin-top:10px;
		margin-bottom:0px;
		height:14px;
		line-height:14px;
	}
	ul.wanSelTips label{
		height:14px;
		line-height:14px;
	}
	ul.wanSelTips span{
		font-size:14px;
		color:#FFF;
	}
	.wanPortWrapper{
		text-align:left;
		display:inline-block;
	}
	.wanPortTopWrapper{
		text-align:center;
	}
	#selectWanPort{
		padding-bottom: 8px;
		font-size: 14px;
		color: #FFFFFF;
		letter-spacing: -0.43px;
		vertical-align: middle;
	}
	#wanSetDiv .blockFuncA{
		padding-right:150px;
	}
</style>
<div id="hcCo" class="hcCo">
	<div class="title">
		<label class="title">{%label.basicSet%}</label>
		<i class="helpBtn" helpStr="PPPoEHelp"></i>
	</div>
	<div class="block">
		<div id="wanPortSelDiv" class="disNone">
			<ul class="gridLine gridLineA wanSel">
				<label class="desLblA">{%label.wanPortSel%}</label>
				<li class="textConA textCon">
					<span id="wanPortSel" class="select">
						<span class="value hsValueA"></span>
						<i class="arrow"></i>
					</span>
				</li>
			</ul>
			<ul class="gridLine gridLineA wanSelTips">
				<label class="desLblA"></label><span>此时<span id="wanPortSelected"></span>作为LAN1口</span>
			</ul>
		</div>
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.netMode%}</label>
			<li class="textConA textCon">
				<span id="wanSel" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
			</li>
		</ul>
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.netAccount%}</label>
			<li class="textConA textCon"><input id="name" class="textA text hoverBd" maxLength="118" /><i class="tip"></i></li>
		</ul>
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.netPwd%}</label>
			<li class="textConA textCon"><input id="psw" class="textA text hoverBd" type="text" maxLength="118" /><i class="tip"></i></li>
		</ul>
		<ul class="gridLine gridLineA mpPhoneRgt15">
			<label class="desLblA">{%label.ipAddr%}</label>
			<label id="wanIpLbl" class="noteLbl">0.0.0.0</label>
		</ul>
		<ul class="gridLine gridLineA mpPhoneRgt10">
			<label class="desLblA">{%label.dns%}</label>
			<label id="wanDnsLbl" class="noteLbl">0.0.0.0</label>
		</ul>
		<ul id="onlineTimeUl" class="gridLine gridLineA mpPhoneRgt10">
			<label class="desLblA">{%label.onlineTime%}</label>
			<label id="onlineTimeLbl" class="noteLbl"></label>
		</ul>
		<div class="blockFuncA">
			<input id="disconnect" type="button" value="{%btn.disconnect%}" class="btnA subBtn" />
			<input id="save" type="button" value="{%btn.connect%}" class="btnA subBtn" />
		</div>
		<ul id="wanStatus" class="gridLine gridLineA gridStatus">
			<i></i>
			<label id="wanStatusLbl" class="noteLbl"></label>
			<a id="pppoeSolution" href="javascript:void(0)">{%label.lookUpSolution%}</a>
		</ul>
	</div>
	<div id="wanSetDiv" class="disNone">
		<div class="title">
			<label class="title">{%menuStr.wanSet%}</label>
		</div>
		<div class="block">
			<p class="tips">{%label.wanSetTips%}</p>
			<div class="wanSetCon">
				<div class="wanSetTitle">{%label.wanSet%}</div>
				<div class="radioBtnCon">
					<div>
						<input id="wanSetAuto" type="radio" class="switchRadio" name="wanSetRadio"/><label for="wanSetAuto" class="radioLbl">{%label.wanSetAuto%}</label>
						<p class="des">{%label.wanSetAutoTips%}</p>
					</div>
					<div>
						<input id="wanSetFixed" type="radio" class="switchRadio" name="wanSetRadio"/><label for="wanSetFixed" class="radioLbl">{%label.wanSetFixed%}</label>
						<p id="wanSetFixedTip" class="des">{%label.wanSetFixedTips%}</p>
					</div>
				</div>
				<div class="sampleImgCon">
					<img id="sampleImg" usemap="#wanPortMap">
					<map name="wanPortMap" id="wanPortMap"></map>
				</div>
				<div class="wanPortTopWrapper">
					<div class="wanPortWrapper">
						<p id="selectWanPort">{%label.selectWan%}</p>
						<div class="wanDisplayContainer"></div>
					</div>
				</div>
			</div>
			<div class="blockFuncA">
				<input id="wanSetBtn" type="button" value="{%btn.save%}" class="btnA subBtn" />
			</div>
		</div>
	</div>
	<div class="title">
		<label class="title">{%label.highSet%}</label>
		<i class="helpBtn" helpStr="PPPoEAdvHelp"></i>
	</div>
	<div class="block">
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.dialMode%}</label>
			<li class="textConA textCon">
				<span id="wanDialSel" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
			</li>
		</ul>
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.linkMode%}</label>
			<li class="textConA textCon">
				<span id="wanLinkSel" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
			</li>
		</ul>
		<!--ul id="ulOffTime" class="gridLine gridLineA">
			<label class="desLblA">{%label.offTime%}</label>
			<li class="textConB textCon"><input id="offTime" class="textB text hoverBd" maxLength="2" /></li>
			<label class="noteLbl">{%label.minute%}{%label.offTimeComment%}</label>
		</ul-->
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.mtu%}</label>
			<li class="textConB textCon"><input id="mtu" class="textB text hoverBd" maxLength="4" /></li>
			<label class="noteLbl">{%label.pppoeMtuComment%}</label>
		</ul>
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.svcName%}</label>
			<li class="textConA textCon"><input id="svcName" class="textA text hoverBd" maxLength="128" /><i class="tip"></i></li>
		</ul>
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.acName%}</label>
			<li class="textConA textCon"><input id="acName" class="textA text hoverBd" maxLength="128" /><i class="tip"></i></li>
		</ul>
		<ul class="gridLine gridLineA" id="wanRateSelUl">
			<label class="desLblA">{%label.wanRateSet%}</label>
			<li class="textConA textCon">
				<span id="wanRateSel" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
			</li>
		</ul>
		<ul class="gridLine gridLineA">
			<label class="desLblA">{%label.wanMac%}</label>
			<li class="textConA textCon">
				<span id="wanMacSel" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
			</li>
		</ul>
		<ul id="macCloneUl" class="gridLine gridLineA">
			<li class="textConAL textCon"><input id="wanMac" class="textA text hoverBd" maxLength="17" /><i class="tip"></i></li>
			<li class="textConAL macCloneLi"></li>
		</ul>
		<div class="blockFuncA">
			<input id="saveHighSet" type="button" value="{%btn.save%}" class="btnA subBtn" />
		</div>
	</div>
</div>
