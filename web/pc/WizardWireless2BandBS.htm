<script type="text/javascript">
	function init()
	{
		var uciFile = uciWireless.fileName;
		var uciSecWifiBs = uciWireless.secName.wlanBS;

		var optSsid = uciWireless.dynOptName.ssid;
		var optEncrypt = uciWireless.dynOptName.encryption;
		var optKey = uciWireless.dynOptName.key;
		var optBsEnable = uciWireless.optName.bsEnable;

		var wzdWirelessName = id("wzdWirelessName");
		var wzdWirelessPwd = id("wzdWirelessPwd");

		var clkNotEyt = false;	/* 已经点击过“不加密”选项 */
		var clkIgnoreSsid = false; /* 已经点击过“不修改”无线名称 */

		oriWifiCfgBs = {};
		gIsWifiDevice = false;	/* 是无线设备连接管理页面 */

		function wzdWirelessPwdConfirm()
		{
			var tipStr = label.confirmNoWirelessPwd;
			var onYesCbk = function(){wzdWirelessPwd.focus();};
			var onNoCbk = function(){
				clkNotEyt = true;
				confirmStepEnd();
			};

			showWzdConfirm(tipStr, onYesCbk, onNoCbk, btn.toPwd, btn.unPwd);
		}

		function wzdWirelessSsidConfirm()
		{
			var tipStr = label.confirmSsidHasCnStr;
			var onYesCbk = function(){wzdWirelessName.select();};
			var onNoCbk = function(){
				clkIgnoreSsid = true;
				confirmStepOne();
			};

			showWzdConfirm(tipStr, onYesCbk, onNoCbk);
		}
		
		function checkSsidInput()
		{
			var wirelessName = this.value;
			var wzdAntNoteStr = "wzdAntNoteBs";

			closeNote(wzdAntNoteStr);

			/* 检查合法性 */
			if (0 == wirelessName.length)
			{
				showNote(wzdAntNoteStr, errStr.wlanSsidErr);
				return false;
			}

			if (/^ +$/gi.test(wirelessName) == true)
			{
				showNote(wzdAntNoteStr, errStr.wlanSsidBlank);
				return false;
			}
			
			/* 检查合法性 */
			if(!checkWifiName(wirelessName, 32, 1))
		    {
				showNote(wzdAntNoteStr, errStr.wlanSsidLenErr);
				return false;
		    }

			return true;
		}

		function pwdCheckMixChars(str)
		{
			var hasNum = false;
			var hasLetter = false;
			var hasSymbol = false;

			hasNum = /\d/g.test(str);
			hasLetter = /[a-zA-Z]/g.test(str);
			hasSymbol = /[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]/g.test(str);

			return (hasNum && hasSymbol && hasLetter);
		}

		function checkWlanPwdInput()
		{
			closeNote("wzdPwdNoteBs");
			closeNote("pwdDepNoteBs");

			var pwdVal = replaceUnicodeBlank(wzdWirelessPwd);

			var errorNo = checkWlanPwd(pwdVal);
			if (EINVWLANPWD == errorNo)
			{
				showNote("wzdPwdNoteBs", errStr.wlanWzdPwdValid);
				return false;
			}
			else if (EINVPSKLEN == errorNo)
			{
				showNote("wzdPwdNoteBs", errStr.wlanWzdPwdLenValid);
				return false;
			}

			closeNote("wzdPwdNoteBs");
			return true;
		}

		function checkWlanPwdDep()
		{
			var pwdValue = replaceUnicodeBlank(wzdWirelessPwd),
				pwdDepNoteId = "pwdDepNoteBs",
				wzdPwdNoteId = "wzdPwdNoteBs",
				pwdDepId = "pwdDepBs",
				chgPwdDepId = "chgPwdDepBs",
				pwdDepI = "pwdDepIBs",

				width = 24,
				tip = "",
				lgPwdlessTip = "none",
				len = pwdValue.length,
				lgPwdNoteVi = "visible",
				iClass = "warn",
				errorNo = checkWlanPwd(pwdValue);

			if (EINVWLANPWD == errorNo)
			{
				closeNote(pwdDepNoteId);
				id(wzdPwdNoteId).style.display = "inline-block";
				showNote(wzdPwdNoteId, errStr.wlanWzdPwdValid);
				return false;
			}
			else if (EINVPSKLEN == errorNo)
			{
				closeNote(pwdDepNoteId);
				id(wzdPwdNoteId).style.display = "inline-block";
				showNote(wzdPwdNoteId, errStr.wlanWzdPwdLenValid);
				return false;
			}

			if (len >= 0 && len < 8)
			{
				lgPwdNoteVi = "hidden";
				lgPwdlessTip = "inline-block";
			}
			else if (/^\d+$/.test(pwdValue) ||
					/^[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]+$/.test(pwdValue) ||
					/^[a-zA-Z]+$/.test(pwdValue))
			{
				if (len <= 12)
				{
					tip = label.weak;
					width = width;
				}
				else
				{
					tip = label.media;
					width = width*2;
				}
			}
			else if (true == pwdCheckMixChars(pwdValue))
			{
				tip = label.strong;
				iClass = "correct";
				width = width*3;
			}
			else
			{
				if (len <= 12)
				{
					tip = label.media;
					width = width*2;
				}
				else
				{
					tip = label.strong;
					iClass = "correct";
					width = width*3;
				}
			}

			id(pwdDepNoteId).style.visibility = lgPwdNoteVi;
			id(wzdPwdNoteId).style.display = lgPwdlessTip;
			id(pwdDepId).innerHTML = tip;
			id(chgPwdDepId).style.width = width + "px";
			id(pwdDepI).className = iClass;
		}

		function checkStrHasCN(str)
		{
			var len = str.length;
			for (var i = 0; i < len; i++)
			{
				if (str.charCodeAt(i) > 127)
				{
					return true;
				}
			}

			return false;
		}

		function initWifiCfg()
		{
			var nameValBs = wzdWirelessName.value;
			var pswValBs = wzdWirelessPwd.value;
			var ENABLE = uciWireless.optValue.bsEnable.enable;

			/* 全局变量：标志无线配置是否更改 */
			gIsWifiCfgBsChged = ((nameValBs != oriWifiCfgBs[optSsid]) || (pswValBs != oriWifiCfgBs[optKey]) || (ENABLE != oriWifiCfgBs[optBsEnable]));
			gIsWifiCfgChged = gIsWifiCfgBsChged;

			if (g11AxSupport["wlan2g"] || g11AxSupport["wlan5g"] || gIsWifiCfgChged)
			{
				if (!gSysModeSupport || uciSystem.optValue.sysMode.wdsMode != gSysMode) { //无线中继模式下，为了保证从802.11ax页面返回时ssid不为空，不能清空gWifiCfgToSave
					/* 全局变量：临时保存无线配置 */
					gWifiCfgToSave = {};
					gWifiCfgToSave[uciFile] = {};
				}

				gWifiCfgToSave[uciFile][uciSecWifiBs] = {};
				gWifiCfgToSave[uciFile][uciSecWifiBs][optSsid] = nameValBs;
				gWifiCfgToSave[uciFile][uciSecWifiBs][optBsEnable] = ENABLE;

				if (pswValBs.length > 0)
				{
					gWifiCfgToSave[uciFile][uciSecWifiBs][optEncrypt] = uciWireless.dynOptValue.encryption.on;
					gWifiCfgToSave[uciFile][uciSecWifiBs][optKey] = pswValBs;
				}
				else
				{
					gWifiCfgToSave[uciFile][uciSecWifiBs][optEncrypt] = uciWireless.dynOptValue.encryption.off;
				}
			}
		}

		function confirmStepEnd()
		{
			/* 初始化需要保存的无线配置信息 */
			initWifiCfg();

			if (g11AxSupport["wlan2g"] || g11AxSupport["wlan5g"])
			{
				loadPage("WizardWirelessAx.htm", "wizardCon");
			}
			else
			{
				loadPage("WizardEnd2Band.htm", "wizardCon");
			}
		}

		function confirmStepOne()
		{
			/* 检查无线密码是否为空 */
			if (0 == wzdWirelessPwd.value.length)
			{
				showCover(wzdWirelessPwdConfirm);
				return;
			}

			confirmStepEnd();
		}

		function onSave()
		{
			var nameValBs = wzdWirelessName.value;
			var pswValBs = replaceUnicodeBlank(wzdWirelessPwd);
			
			function checkCfg(name, pwd, antNote, pwdNode)
			{
				if (0 == name.length)
				{
					showNote(antNote, errStr.wlanSsidErr);
					return false;
				}

				if(!checkWifiName(name, 32, 1))
				{
					showNote(antNote, errStr.wlanSsidLenErr);
					return false;
				}

				if (/^ +$/gi.test(name) == true)
				{
					showNote(antNote, errStr.wlanSsidBlank);
					return false;
				}

				closeNote(antNote);

				var errNo = checkWlanPwd(pwd);
				switch(errNo)
				{
				case EINVWLANPWD:
					showNote("pwdNode", errStr.wlanWzdPwdValid);
					return false;
				case EINVPSKLEN:
					showNote("pwdNode", errStr.wlanWzdPwdLenValid);
					return false;
				case EWLANPWDBLANK:
				default:
					break;
				}
				
				return true;
			}

			/* 检查相关配置 */
			if (!checkCfg(nameValBs, pswValBs, "wzdAntNoteBs", "wzdPwdNoteBs"))
 			{
				return;
			}

			clkNotEyt = false;
			clkIgnoreSsid = false;
			
			/* 检查无线名称是否含有非英文字符 */
			if (checkStrHasCN(nameValBs))
			{
				showCover(wzdWirelessSsidConfirm);
				return;
			}

			confirmStepOne();
		}
		
		function getCfgCbk(ALL_DATA)
		{
			oriWifiCfgBs = ALL_DATA[uciFile][uciSecWifiBs];

			var gIsWifiCfgChged = gIsWifiCfgBsChged;
			var wirelessName = wzdWirelessName;
			var wirelessPwd  = wzdWirelessPwd;
			var orgCfg = oriWifiCfgBs;

			if (typeof(gIsWifiCfgChged) != "undefined" && gIsWifiCfgChged == true)
			{
				var wifiCfg = gWifiCfgToSave[uciFile][uciSecWifiBs];
				wirelessName.value = wifiCfg[optSsid];

				if (wifiCfg[optKey])
				{
					wirelessPwd.value = wifiCfg[optKey];
				}
			}
			else
			{
				wirelessName.value = orgCfg[optSsid] || "";
				wirelessPwd.value = orgCfg[optKey] || "";
			}

			/* 初始化当前登录的是否是无线设备 */
			var hostsInfo = formatTableData(ALL_DATA[uciHostsInfo.fileName][uciHostsInfo.dynData.host_info]);
			for (var i = 0; i < hostsInfo.length; i++)
			{
				var hostObj = hostsInfo[i];
				if (1 == parseInt(hostObj["is_cur_host"]))
				{
					gIsWifiDevice = (0 != parseInt(hostObj["type"]));
				}
			}
		}

		function showDefaultCfg()
		{
			var data = {};
			data[uciFile] = {};
			data[uciFile][KEY_NAME] = uciSecWifiBs;

			data[uciHostsInfo.fileName] = {};
			data[uciHostsInfo.fileName][KEY_TABLE] = [uciHostsInfo.dynData.host_info];

			$.query(data, getCfgCbk);
		}

		/* 设置导航栏颜色 */
		wzdNavSet(2);
		wzdConSet({"height":"600px"});
		id("pre").onclick = function(){
			if (gSysModeSupport && uciSystem.optValue.sysMode.apMode == gSysMode) {
				wzdNetWorkModeChange(LINK_TYPE_WIRED_REPEATER);
			} else if (gSysModeSupport && uciSystem.optValue.sysMode.wdsMode == gSysMode) {
				loadPage('WizardWirelessRepeater.htm', "wizardCon");
			} else {
				wzdNetWorkModeChange(gNetworkCfg[uciProto.optName.type]);
			}
		};

		if (gSysModeSupport && uciSystem.optValue.sysMode.wdsMode == gSysMode) {
			$("#wzdConTitleDes").text("请设置本路由器的无线名称和密码（推荐与前端路由保持一致，实现无缝漫游）");
		}

		var subObj = id("sub");
		subObj.onclick = onSave;
		if (g11AxSupport["wlan2g"] || g11AxSupport["wlan5g"]) {
			subObj.value = btn.nextStep;
		} else {
			subObj.value = btn.ok;
		}

		wzdWirelessName.focus();

		wzdWirelessName.onblur = checkSsidInput;
		wzdWirelessName.onkeyup = checkSsidInput;
		wzdWirelessPwd.onblur = checkWlanPwdInput;
		wzdWirelessPwd.onkeyup = checkWlanPwdDep;

		showDefaultCfg();

		id("wifiUniteOn").checked  = true;
		id("wifiUniteOff").checked = false;
		$('input[name="wifiUnite"]').on("click", function(){
			changeBSPage(this.id == "wifiUniteOn" ? gBSHandler.ON : gBSHandler.OFF);
		})
	}
	init();
</script>
<style type="text/css">
	li.wzdSubLi input{
		width:152px;
	}
	li.wzdSubLi input.btnL {
		margin-right: 24px !important;
		background-color: #FFFFFF;
	}
	li.usePwd2GLi{
		list-style:none;
		margin:5px auto 5px 347px;
	}
	input.pwdSame{
		height:12px !important;
		margin:0;
		vertical-align:middle !important;
		width:12px !important;
	}
	label.pwdSameLbl{
		color:#FFFFFF !important;
		display:inline !important;
		font-size:12px;
		margin-left:5px !important;
	}
	p.wzdSubTitle{
		color:#FFFFFF;
		font-size:18px;
		font-weight:bold;
		margin:30px auto 25px 275px;
	}
	ul.wzdConTileUlW{
		margin-bottom:40px;
	}
	ul.inputUlF{
		overflow:hidden;
	}
	label.desLblWU{
		font-size:16px;
		font-weight:bold;
		margin-right:15px;
		float:left;
	}
	p.wzdWUTip{
		font-size:12px;
		width:373px;
		margin-top:4px;
	}
	div.wifiUnite{
		width:400px;
		margin-left:275px;
		padding-bottom:30px;
		color:#fff;
		border-bottom:1px #0d6a90 solid;
	}
	p.titleWU{
		margin-top: 30px;
		margin-bottom:24px;
	}
</style>
<ul class="wzdConTitleUl wzdConTileUlW">
	<p class="wzdConTitle">{%label.wifiSet%}</p>
	<p id="wzdConTitleDes" class="wzdConTitleDes">{%label.wifiSetTip%}</p>
</ul>
<div class="wifiUnite">
	<ul class="gridLine gridLineA">
		<label class="desLblWU">{%label.wifiUnite%}</label>
		<input id="wifiUniteOn" name="wifiUnite" class="switchRadio" type="radio" /><label class="noteLbl" for="wifiUniteOn">{%label.openStr%}</label>
		<input id="wifiUniteOff" name="wifiUnite" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wifiUniteOff">{%label.closeStr%}</label>
	</ul>
	<p class="wzdWUTip">{%label.bsHelp%}</p>
</div>
<p class="wzdSubTitle titleWU">{%label.wifiSet%}</p>
<ul class="inputUl">
	<li class="inputLi">
		<label for="wzdWirelessName">{%label.wirelessName%}</label>
		<input id="wzdWirelessName" type="text" maxLength="32" />
	</li>
	<li id="wzdAntNoteBs" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%errStr.wlanSsidErr%}</p>
		</div>
	</li>
</ul>
<ul class="inputUl inputUlF">
	<li class="inputLi">
		<label for="wzdWirelessPwd">{%label.wirelessPwd%}</label>
		<input id="wzdWirelessPwd" class="imeModeN" maxLength="63" />
	</li>
	<li id="wzdPwdNoteBs" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%label.netPwdTip%}</p>
		</div>
	</li>
	<li id="pwdDepNoteBs" class="note">
		<i id="pwdDepIBs" class="warn"></i>
		<div class="noteCon">
			<p class="pwdDepC twoLine">{%label.chgPwdDep%}{%label.colon%}<label id="pwdDepBs">{%label.weak%}</label></p>
			<div class="pwdDepL"><label id="chgPwdDepBs"></label></div>
		</div>
	</li>
</ul>
<p class="wzdDesP">{%label.wifiPwdTip%}</p>

<ul>
	<li class="wzdSubLi">
		<input id="pre" type="button" class="btnL" value="{%btn.preStep%}" />
		<input id="sub" type="button" value="{%btn.ok%}" />
	</li>
</ul>
