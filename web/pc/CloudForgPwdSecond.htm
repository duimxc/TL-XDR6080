<script type="text/javascript">
	var PageObj = {
		INLINE_BLOCK:"inline-block",
		chkPswVal: function(szValue)
		{
			return (/^[\x21-\x7e]+$/.test(szValue));
		},
		pwdConfFocus: function()
		{
			this.lgPwdNote.style.visibility = "hidden";
		},
		pwdFocus: function()
		{
			this.lgPwdConfNote.style.visibility = "hidden";
		},
		pwdConfCheck: function()
		{
			var pwdConf = this.pwdConf;
			var pwd = this.pwd;

			this.pwdConfFocus();

			if (pwdConf.value == pwd.value)
			{
				this.lgPwdConfNote.style.visibility = "hidden";
				return true;
			}
			else
			{
				this.lgPwdConfNote.style.visibility = "visible";
				return false;
			}
		},
		pwdBlur: function()
		{
			var pwd = id("pwd");
			var len = pwd.value.length;

			if (len >= 0 && len < 6)
			{
				$("#lgPwdNoteLess").css("display", this.INLINE_BLOCK).css("visibility", "visible");
			}
		},
		pwdCheckMixChars: function(str)
		{
			var hasNum = false;
			var hasLetter = false;
			var hasSymbol = false;

			hasNum = /\d/g.test(str);
			hasLetter = /[a-zA-Z]/g.test(str);
			hasSymbol = /[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]/g.test(str);

			return hasNum&&hasSymbol&&hasLetter;
		},
		pwdCheck: function()
		{
			var width = 24, tip = "";
			var pwd = this.pwd;
			var lgPwdlessTip = this.INLINE_BLOCK;
			var lgPwdValTip = this.INLINE_BLOCK;
			var pwdValue = pwd.value;
			var len = pwdValue.length;
			var lgPwdNoteVi = "visible";
			var result = true;

			if (len >= 0 && len < 6)
			{
				result = false;
				lgPwdValTip = "none";
			}
			else if(!this.chkPswVal(pwdValue))
			{
				lgPwdlessTip = "none";
				result = false;
			}
			else if (len > 32)
			{
				lgPwdlessTip = "none";
				lgPwdValTip = "none";
				result = false;
			}
			else
			{
				lgPwdlessTip = "none";
				lgPwdValTip = "none";
			}

			if ("none" != lgPwdlessTip || "none" != lgPwdValTip)
			{
				lgPwdNoteVi = "hidden";
			}
			else if (/^\d+$/.test(pwdValue) ||
					/^[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]+$/.test(pwdValue) ||
					/^[a-zA-Z]+$/.test(pwdValue))
			{
				if (len <= 10)
				{
					tip = label.weak;
					width = width;
				}
				else
				{
					tip = label.media;
					width = width*2;
				}
			}
			else if (true == this.pwdCheckMixChars(pwdValue))
			{
				tip = label.strong;
				width = width*3;
			}
			else
			{
				if (len <= 10)
				{
					tip = label.media;
					width = width*2;
				}
				else
				{
					tip = label.strong;
					width = width*3;
				}
			}

			this.lgPwdNote.style.visibility = lgPwdNoteVi;
			this.lgPwdNoteLess.style.display = lgPwdlessTip;
			this.lgPwdNoteInvalidChar.style.display = lgPwdValTip;
			this.pwdDep.innerHTML = tip;
			this.chgPwdDep.style.width = width + "px";

			return result;
		},
		pwdConfChange: function(event)
		{
			event = event || window.event;
			var code = event.keyCode;

			if (this.pwdConfCheck() && code == 13)
			{
				this.onsub();
			}
		},
		onsub: function()
		{
			var result, pwd = this.pwd;
			var pwdConf = this.pwdConf;
			var obj = this;

			if (!this.pwdCheck() || !this.pwdConfCheck())
			{
				return;
			}

			gCloudAccount["pwd"] = pwd.value;
			gResetCloudAccountPwd(function(){
				loadPage("CloudForgPwdThird.htm", "cloudForgDetial", undefined, {bClearPageTickArray:false});
			}, function(){
				loadPage("CloudForgPwdThird.htm", "cloudForgDetial", undefined, {bClearPageTickArray:false});
			}, cloudAccountQueryStop);
		},

		init: function(){
			var obj = this;
			var pwd = id("pwd");
			var pwdConf = id("pwdConf");

			$("ul.cloudNav li").each(function(index){
				if (1 == index)
				{
					this.className = "select";
				}
				else
				{
					this.className = "";
				}
			});
			id("nextStep").onclick = function(){
				if (true == $.local)
				{
					loadPage("CloudForgPwdThird.htm", "cloudForgDetial", undefined, {bClearPageTickArray:false});
				}
				else
				{
					obj.onsub();
				}
			};

			this.INLINE_BLOCK = ((isIESix || isIESeven) ? "inline":"inline-block");
			this.pwdConf = pwdConf;
			this.pwd = id("pwd");
			this.pwdConfLbl = id("pwdConfLbl");
			this.lgPwdNote = id("lgPwdNote");
			this.lgPwdConfNote = id("lgPwdConfNote");
			this.lgPwdNoteLess = id("lgPwdNoteLess");
			this.lgPwdNoteInvalidChar = id("lgPwdNoteInvalidChar");
			this.pwdDep = id("pwdDep");
			this.chgPwdDep = id("chgPwdDep");

			pwdConf.onkeyup =function(event){obj.pwdConfChange(event)};
			pwdConf.onfocus = function(){obj.pwdConfFocus()};
			pwdConf.onblur = function(){obj.pwdConfCheck()};

			pwd.onkeyup = function(){obj.pwdCheck()};
			pwd.onblur = function(){obj.pwdBlur()};
			pwd.onfocus = function(){obj.pwdFocus()};
			this.lgPwdNoteInvalidChar.style.visibility = "visible";
			this.lgPwdNoteInvalidChar.style.display = "none";
		}
	};
	PageObj.init();
</script>
<h1 class="cloudForgH1">{%label.cloudPwdReset%}</h1>
<ul class="gridLine gridLineD mpPhoneRgt50">
	<label class="desLblB">{%label.loginSetPwd%}</label>
	<li class="textConE textCon"><input id="pwd" class="textC text imeModeN" type="password" maxLength="32" /></li>
	<li id="lgPwdNoteLess" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p >{%label.chgPwdLess%}</p>
		</div>
	</li>
	<li id="lgPwdNoteInvalidChar" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p >{%errStr.pwdCharValid%}</p>
		</div>
	</li>
	<li id="lgPwdNote" class="note">
		<i class="warn"></i>
		<div class="noteCon">
			<p class="twoLine pwdDepC">{%label.chgPwdDep%}{%label.colon%}<label id="pwdDep">{%label.weak%}</label></p>
			<div class="pwdDepL"><label id="chgPwdDep"></label></div>
		</div>
	</li>
</ul>
<p class="inputTip">{%label.chgPwdChar%}</p>
<ul class="gridLine gridLineD">
	<label id="pwdConfLbl" class="desLblB" for="pwdConf">{%label.loginPwdConf%}</label>
	<li class="textConE textCon"><input id="pwdConf" class="textC text imeModeN" type="password" maxLength="32" /></li>
	<li id="lgPwdConfNote" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p class="chgPwdDif">{%label.chgPwdDif%}</p>
		</div>
	</li>
</ul>
<input id="nextStep" type="button" value="{%btn.nextStep%}" class="subBtn cloudSub" />
