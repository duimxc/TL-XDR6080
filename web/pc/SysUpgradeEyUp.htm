<style type="text/css">
	table.dataGrid td{
		height:39px;
		border: 1px solid #1E96D4;
	}
	div.sysUpBlock{
		color:#FFFFFF;
		font-size:14px;
		text-align:left;
		margin-bottom: 30px;
	}
	p.upgradeTip {
		margin-top: 30px;
	}
	.tblBtn{
		height:25px;
		margin:auto 3px;
	}
	div.eptCon{
		background-color:#FFFFFF;
		margin:0 auto;
		overflow:hidden;
		position:relative;
		width:510px;
		padding: 30px 70px 50px;
	}
	p.upVersion{
		color:#343434;
		text-align:left;
		margin:32px 0 0 0px;
		font-size:12px;
	}
	p.upDes{
		color:#343434;
		text-align:left;
		margin:24px 0 0 0px;
		font-size:12px;
	}
	h1.localUpgrade{
		color:#333333;
		font-size: 14px;
		font-weight: bold;
	}
	span.softPos{
		margin-left:30px;
	}
	div.fileDiv{
		width:327px;
		height:34px;
		margin:10px 0 0 0px;
		overflow:hidden;
		position:relative;
		vertical-align:middle;
	}
	input.file{
		font-size:110px;
		top:-5px;
		right:-5px;
		opacity:0;
		filter:alpha(opacity:0);
		cursor:pointer;
		position:absolute;
		vertical-align:top;
	}
	input.fileTxt{
		width:226px;
		height:30px;
		line-height:30px;
		color:#333333;
		font-size:12px;
		border:1px solid #1e96d4;
		border-radius:4px;
		padding:0 2px 0 4px;
		vertical-align:middle;
	}
	input.fileBrowse{
		padding:3px 18px;
		*padding:2px 12px 0px;
		font-size:14px;
		width:80px;
		height:30px;
		margin-left:12px;
		vertical-align:middle;
	}
	#sysUpgrade{
		vertical-align:middle;
		width:90px !important;
		font-size:14px;
		height:30px;
		margin:30px 0 55px 61px;
	}
	#sysUpgradeCancel{
		vertical-align:middle;
		font-size:14px;
		width:80px;
		height:30px;
		margin:30px 0 55px 12px;
	}
	#nativeTbl, #onlineTbl{
		font-size: 12px;
	}
	#upFileForm {
		height: 100px;
	}

	div.blockOlUpgradeBtn{
		margin-top:34px;
		margin-bottom: 15px;
	}
	div.blockOlUpgradeBtn input{
		font-size: 14px;
		margin-right: 24px;
		padding-top: 3px;
		padding-bottom: 3px;
		padding-left: 8px;
		padding-right: 8px;
		border: 1px solid #FBEB1A;
	}
	div.blockOlUpgradeBtn input.subBtnDis{
		border: 1px solid #FFFFFF;
		padding-top: 3px !important;
		padding-bottom: 3px !important;
	}
</style>
<script type="text/javascript">
	function init()
	{
		function errHandleCheckUpgradeInfo(errNo)
		{
			var showStr = "";
			var cloudErrRel;

			switch (parseInt(errNo))
			{
			case ENONE:
				return true;
			case EINVSENDREQMSGFAILED:
				showStr = errStr.invSendReqMsgFailed;
				break;
			case ESYSBUSY:
			case EINVLASTOPTIONISNOTFINISHED:
				showStr = errStr.invLastOptionIsNotFinished;
				break;
			case ESYSTEM:
				showStr = errStr.invRequestFail;
				break;
			case ENOMEMORY:
				showStr = errStr.invMemoryOut;
				break;
			case EINVGETDATAFAILED:
				showStr = errStr.invGetDataFailed;
				break;
			case EINVPARAMETER:
				showStr = errStr.invParameter;
				break;
			case EINVREQUESTTIMEOUT:
				showStr = errStr.invRequestTimeout;
				break;
			case EINVDEVICEIDNOTEXIST:
			case EINVERRORDEVICEIDFORMATERROR:
			case EINVILLEGALDEVICE:
				showStr = label.cloudDeviceInfoExpt;
				break;
			default:
				cloudErrRel = cloudErrHandle(errNo)
				if (cloudErrRel.result == false)
				{
					showStr = cloudErrRel.tip;
				}
				else
				{
					showStr = errStr.invRequestFail;
				}
				break;
			}

			closeLoading();
			showAlert(showStr);

			return false;
		}

		function errHandle(errNo)
		{
			switch (errNo)
			{
			case ENONE:
				return true;
			case EFWEXCEPTION:
			case EFWNOTSUPPORTED:
			case EFILETOOBIG:
				showAlert(errStr.fwFmtErr);
				break;
			case EFWNOTINFLANDBL:
			case EFWNEWEST:
				showAlert(errStr.fwNotSupported);
				break;
			case ESYSBUSY:
				showAlert(errStr.invLastOptionIsNotFinished);
				break;
			case EINVMEMORYOUT:
			case EINVDOWNLOADFWFAILED:
			case EINVSENDREQMSGFAILED:
			case EINVREQUESTTIMEOUT:
			case EINVCONNECTTINGCLOUDSERVER:
			case EINVLASTOPTIONISNOTFINISHED:
				showAlert(errStr.fwDownLoadFailed);
				break;
			case EINVFMT:
			case EFWRSAFAIL:
			case EFWHWIDNOTMATCH:
			case EFWZONECODENOTMATCH:
			case EFWVENDORIDNOTMATCH:
			case EINVUPGRADEFWFAILED:
			default:
				showAlert(errStr.fwUpgradeFailed);
				break;
			}

			return false;
		}

		function checkFile()
		{
			var fileName = id("fileName").value;

			if (fileName == "")
			{
				showAlert(label.upWarn);
				return false;
			}
			else if (fileName.search(/\.bin$/) == -1 && fileName.search(/\.w$/) == -1)
			{
				showAlert(errStr.fileFmttErr);
				return false;
			}

			return true;
		}

		function upLoadCallBack(code, dataObj)
		{
			if (true == upgradeTimeoutTag)
			{
				return;
			}

			clearTimeout(upgradeTimeoutHd);
			upgradeTimeoutHd = null;
			closeLoading();

			if (ENONE == code)
			{
				var waitTime = dataObj["wait_time"]
							 ? parseInt(dataObj["wait_time"])*1000
							 : SYSUPGRADE_SECONDS;
				showProgBar(waitTime, label.upgrading, function(){
					lanDetecting(function(){
						window.location.reload();
					});
				}, true, statusStr.upgradeTip);
			}
			else
			{
				errHandle(code);
			}
		}

		function upLoadExtCallBack(code, dataObj) {
			if (true == upgradeTimeoutTag)
			{
				return;
			}

			clearTimeout(upgradeTimeoutHd);
			upgradeTimeoutHd = null;
			closeLoading();

			if (ENONE == code)
			{
				var waitTime = dataObj["wait_time"]
						? parseInt(dataObj["wait_time"])*1000
						: SYSUPGRADE_SECONDS;
				showProgBar(waitTime, label.upgrading, function(){
					closeProgBar();
					getBasicData(function(data){
						olUpgradeGridData = $.extend(true, [], data);
						refreshTable();
					});
				}, true, statusStr.upgradeChildRtTip);
			}
			else
			{
				errHandle(code);
			}
		}

		/* 处理升级超时的情况 */
		function upgradeTimeout()
		{
			upgradeTimeoutTag = true;
			id("uploadIf").onload = null;
			closeLoading();
			closeProgBar();
			clearTimeout(upgradeTimeoutHd);
			showAlert(errStr.upGradeFail);
			id("uploadIf").innerHTML = "";
		}

		window.addEventListener('message',function(event) {
			var responseText = event.data;
			var j, ret;
			var errorno = ENONE;
			if (/(<pre>)?(.+)(<\/pre>)+/.test(responseText) ||
				/(<pre>)?(.+)/.test(responseText))
			{
				j = RegExp["$2"];
			}

			ret = JSON.parse(j);
			errorno = ret[ERR_CODE];

			/* 错误。直接退出 */
			if (errorno != ENONE)
			{
				closeLoading();
				closeProgBar();
			}

			upLoadExtCallBack(errorno, ret);
		},false);

		function uploadEventBind(isRouter, idx)
		{
			id("fileName").onchange = function (){
				var tempStr = this.value;

				/* 统一所有浏览器不显示完全的文件路径 */
				tempStr = tempStr.substring(tempStr.lastIndexOf('\\') + 1);
				id("textfield").value = tempStr;
			};

			id("sysUpgrade").onclick = function()
			{
				if (checkFile())
				{
					cancelNativeInput();
					var reqData = {};

					showLoading(label.fwUploadTip, undefined, undefined, false);
					upgradeTimeoutHd = $.setTimeout(upgradeTimeout, 40000);

					if (isRouter)
					{
						$("#uploadIf").one("load", function(){
							iFrmOnload("uploadIf", upLoadCallBack);
						});

						reqData[uciSystem.fileName] = {};
						reqData[uciSystem.fileName][uciSystem.actionName.firmUpgrade] = {"type": "0"};

						$.action(reqData, function(data){
							if (ENONE == data[ERR_CODE])
							{
								var formObj = document.forms[0];
								formObj.action = $.orgURL(data["url"]);
								formObj.submit();
								formObj.reset();
								upgradeTimeoutTag = false;
							}
							else
							{
								upgradeTimeout();
							}
						});
					}
					else
					{
						var extIP = "http://" + nativeTbl._ops.data[idx].ip;
						if (typeof gUsernameSupport != "undefined" && gUsernameSupport)
						{
							var data = {"method":"do","login":{"username":$.usr,"password":$.pwd}};
						}
						else
						{
							var data = {"method":"do","login":{"password":$.pwd}};
						}
						var url,stok;
						$.ajax({'url': extIP,
							'data': data,
							'type':"POST",
							'async':true,
							'postDataType':'json',
							"dataType":"json",
							'utf8Encode':true,
							'success': function(result) {
								if (result[ERR_CODE] == ENONE) {
									stok = result.stok;
									url = extIP + "/stok=" + stok + "/ds";
									data = {};
									data[uciSystem.fileName] = {};
									data[uciSystem.fileName][uciSystem.actionName.firmUpgrade] = {"type": "0"};
									data["method"] = "do";

									$.ajax({'url': url,
										'data': data,
										'type':"POST",
										'async':true,
										'postDataType':'json',
										"dataType":"json",
										'utf8Encode':true,
										'success': function(result) {
											if (result[ERR_CODE] == ENONE) {
												var formObj = document.forms[0];
												formObj.action = extIP + "/stok=" + stok + result["url"];
												formObj.submit();
												formObj.reset();
												upgradeTimeoutTag = false;
											} else {
												upgradeTimeout();
											}
										},
										'error': function() {
											closeLoading();
											showAlert(errStr.invSendReqMsgFailedNetwork);
											clearTimeout(upgradeTimeoutHd);
										}
									});
								} else {
									upgradeTimeout();
								}
							},
							'error': function() {
								closeLoading();
								showAlert(errStr.invSendReqMsgFailedNetwork);
								clearTimeout(upgradeTimeoutHd);
							}
						});
					}
				}
			};
		}

		function cancelNativeInput()
		{
			var divCon = id("sysUpgradeNative");

			hideCoverB(function(){
				divCon.style.visibility = "hidden";
				divCon.style.top = "-9999px";
			});
		}

		/* 创建本地升级的显示框 */
		function showNativeInput(idx, o)
		{
			var divCon = id("sysUpgradeNative");
			var showHtmlStr = "";
			var eptCon;
			var fwVersion = nativeTbl._ops.data[idx].cur_fw_version_full != undefined ? nativeTbl._ops.data[idx].cur_fw_version_full : label.notFoundVersion;
			var hwVersion = nativeTbl._ops.data[idx].hw_version != undefined ? nativeTbl._ops.data[idx].hw_version : label.notFoundVersion;

			if (undefined != divCon)
			{
				emptyNodes(divCon);
			}
			else
			{
				divCon = document.createElement("div");
				divCon.className = "VigNetControlCon";
				divCon.id = "sysUpgradeNative";
				document.body.appendChild(divCon);
			}

			eptCon = document.createElement("div");
			eptCon.className = "eptCon";
			eptCon.id = "eptCon";
			divCon.appendChild(eptCon);

			showHtmlStr += '<h1 class="localUpgrade">' + menuStr.localUpgrade + '</h1>';
			showHtmlStr += '<div style="margin-left: 102px;">';
			showHtmlStr += '<p class="upVersion">' +
								'<span>' + label.upCurrHard + label.colon + '</span><span id="hardwareVerL">'+ hwVersion + '</span>' +
							'</p>'+
							'<p class="upVersion" style="margin-top:8px;">' +
								'<span>' + label.upCurrSoft + label.colon + '</span><span id="softwareVerL">'+ fwVersion + '</span>' +
							'</p>';
			showHtmlStr += '<p class="upDes">' + label.upgradeTip + '</p>';
			showHtmlStr += '<form enctype="multipart/form-data" id="upFileForm" method="post" target="uploadIf">' +
								'<div class="fileDiv">' +
									'<input type="file" class="file" name="fileName" id="fileName" />' +
									'<input type="text" id="textfield" class="fileTxt" readonly="true" />' +
									'<input type="button" value="' + btn.browse + '" class="subBtn fileBrowse" />' +
									'<iframe id="uploadIf" name="uploadIf"></iframe>' +
								'</div>' +
								'<input id="sysUpgrade" type="button" value="' + btn.upgrade + '" class="btnA subBtn" />' +
								'<input id="sysUpgradeCancel" type="button" value="' + btn.cancel + '" class="btnA cancelBtn"/>' +
							'</form>';
			showHtmlStr += '</div>';
			
			eptCon.innerHTML = showHtmlStr;
			id("sysUpgradeCancel").onclick = cancelNativeInput;

			showCoverB(function(){
				divCon.style.visibility = "visible";
				divCon.style.top = "150px";
			});

			if (nativeTbl._ops.data[idx].isCap)
			{
				uploadEventBind(true, idx);
			}
			else
			{
				uploadEventBind(false, idx);
			}
		}

		function workingStateSet(isWorking, isAutoRefreshing)
		{
			var checkboxArray = getOlCheckboxArray();

			if (isWorking)
			{
				setDisableAllCheckBox(true);
				disableBtn("easyUpgrade", true);
				disableBtn("checkVer", true);

				$(id("nativeTbl").rows).find("input").each(function(){
					disableBtn(this, true);
				});
			}
			else
			{
				setDisableAllCheckBox(false);
				disableBtn("checkVer", false);
				$(checkboxArray).on("click", checkboxHandle);

				$(id("nativeTbl").rows).find("input").each(function(){
					disableBtn(this, false);
				});
			}

			for (var i = 0; i < olUpgradeGridData.length; i++)
			{
				if (olUpgradeGridData[i].isCheckState == true)
				{
					checkboxArray[i].checked = true;
				}

				/* trigger head_checkbox */
				onlineTbl._singelSelHandle(checkboxArray[i], onlineTbl);
			}

			upgradeBtnRenew(checkboxArray);
		}

		function checkVerBtnHandle()
		{
			var dataObj = {};
			var checkboxArray = getOlCheckboxArray();

			dataObj[uciPlc.fileName] = {};
			dataObj[uciPlc.fileName][uciPlc.secName.checkAllFwVerStart] = null;

			isWorking = true;
			for (var i = 0; i < checkboxArray.length; i++)
			{
				olUpgradeGridData[i].isCheckState = false;
			}

			$(checkboxArray).each(function(){
				this.checked = false;
				onlineTbl._singelSelHandle(this, onlineTbl);
			});
			workingStateSet(isWorking);

			$.action(dataObj, function(result){
				if (errHandle(result[ERR_CODE]))
				{
					checkVerStatusQuery();
				}
				else
				{
					isWorking = false;
					workingStateSet(isWorking);
				}
			});
		}

		function olUpgradeBtnHandle()
		{
			var dataObj = {}, args = [];
			var checkboxArray = getOlCheckboxArray();

			dataObj[uciPlc.fileName] = {};
			dataObj[uciPlc.fileName][uciPlc.secName.upgradeDev] = {};
			dataObj[uciPlc.fileName][uciPlc.secName.upgradeDev][uciPlc.optName.mac] = args;

			for (var i = 0; i < checkboxArray.length; i++)
			{
				olUpgradeGridData[i].isCheckState = false;
			}

			for (i = 0; i < checkboxArray.length; i++)
			{
				if (checkboxArray[i].checked == true)
				{
					if (olUpgradeGridData[i].isUpgradable != true)
					{
						checkboxArray[i].checked = false;
					}
					else
					{
						olUpgradeGridData[i].isCheckState = true;
						args.push(olUpgradeGridData[i].mac.toUpperCase());
					}
				}
			}

			isWorking = true;
			workingStateSet(isWorking);
			$.action(dataObj, function(result){
				if (errHandle(result[ERR_CODE]))
				{
					upgradeStatusQuery();
				}
				else
				{
					isWorking = false;
					workingStateSet(isWorking);
				}
			});
		}

		function upgradeBtnRenew(checkboxArray)
		{
			var checkState, upgradeState, hasUpgradable = false;

			if (!isWorking)
			{
				for (var i = 0; i < checkboxArray.length; i++)
				{
					checkState = checkboxArray[i].checked;
					upgradeState = olUpgradeGridData[i].isUpgradable;

					if (checkState && upgradeState)
					{
						hasUpgradable = true;
					}
				}

				disableBtn("easyUpgrade", hasUpgradable ? false : true);
			}
		}

		function checkboxHandle(event)
		{
			var checkboxArray = getOlCheckboxArray();

			if (!isWorking)
			{
				for (var i = 0; i < checkboxArray.length; i++)
				{
					olUpgradeGridData[i].isCheckState = checkboxArray[i].checked;
				}
				upgradeBtnRenew(checkboxArray);
			}
		}

		function setDisableAllCheckBox(disbale)
		{
			var checkboxArray = $(id("onlineTbl")).find("[type='checkbox']");

			checkboxArray.attr("disabled", disbale);
		}

		function getOlCheckboxArray()
		{
			/*
			 * 1. turn HTMLCollection-TYPE To Array-TYPE
			 * 2. remove head rows
			 * 3. reverse
			 */

			var tableRows = Array.prototype.slice.call(id("onlineTbl").rows);
			var childRows = tableRows.slice().reverse();
			var result = [];

			for (var i = 0; i < olUpgradeGridData.length; i++)
			{
				result[i] = childRows[i].cells[0].childNodes[0];
			}

			return result;
		}

		function findItemByMac(array, mac)
		{
			for (var i = 0; i < array.length; i++)
			{
				if (mac.toUpperCase() == array[i].mac.toUpperCase())
				{
					return {item: array[i], idx: i};
				}
			}

			return null;
		}

		function upgradeStatusQuery()
		{
			getUpgradeStatus(function(array, ifNoWork){
				var upgradingItem = mixDataWithUpgradeStatus(array);

				if (upgradingItem == IS_CAP_UPGRADING)
				{
					isWorking = false;
					refreshTable(true);

					/* 主路由升级流程 */
					onlineUpgradeProgress(capUpgradeTime);
				}
				else
				{
					if (!ifNoWork)
					{
						refreshTable(true);
						$.setTimeout(upgradeStatusQuery, 1 * 1000);
					}
					else
					{
						//只更新升级成功的条目
						getBasicData(function(result){
							var newestObj, basicObj, newestItem, basicItem;

							for (var i = 0; i < array.length; i++)
							{
								newestObj = findItemByMac(result, array[i].mac);
								basicObj = findItemByMac(olUpgradeGridData, array[i].mac);

								if (basicObj != null && newestObj != null)
								{
									newestItem = newestObj.item;
									basicItem = basicObj.item;

									basicItem.cur_fw_version = newestItem.cur_fw_version;
									basicItem.newest_fw_version = newestItem.newest_fw_version;
									basicItem.isUpgradable = newestItem.isUpgradable;

									if (basicItem.upgradeStatus != uciPlc.optValue.upgradeStatus.downloadTimeout
									&& basicItem.upgradeStatus != uciPlc.optValue.upgradeStatus.downloadFail
									&& basicItem.upgradeStatus != uciPlc.optValue.upgradeStatus.upgradeFail)
									{
										basicItem.status = newestItem.status;
									}
								}

								if (newestObj == null && basicObj != null)
								{
									olUpgradeGridData.splice(basicObj.idx, 1);
								}
							}

							isWorking = false;

							for (i = 0; i < olUpgradeGridData.length; i++)
							{
								olUpgradeGridData[i].isCheckState = false;
							}
							refreshTable();
						});
					}
				}
			});
		}

		function checkVerStatusQuery()
		{
			getCheckVerStatus(function(array, ifNoWork){
				mixDataWithCheckVerStatus(array);

				if (!ifNoWork)
				{
					refreshTable(true);
					$.setTimeout(checkVerStatusQuery, 1000);
				}
				else
				{
					//只更新检测成功的条目
					getBasicData(function(result){
						var obj, item;

						for (var i = 0; i < olUpgradeGridData.length; i++)
						{
							if (olUpgradeGridData[i].checkFwVerStatus != uciPlc.optValue.checkAllFwVerStatus.fail)
							{
								obj = findItemByMac(result, olUpgradeGridData[i].mac);

								if (obj != null)
								{
									item = obj.item;

									olUpgradeGridData[i].cur_fw_version = item.cur_fw_version;
									olUpgradeGridData[i].newest_fw_version = item.newest_fw_version;
									olUpgradeGridData[i].isUpgradable = item.isUpgradable;
									olUpgradeGridData[i].status = item.status;

									if (item.isUpgradable)
									{
										olUpgradeGridData[i].isCheckState = true;
									}
								}
								else
								{
									/* 若无法找到该条目，则沿用之前的状态 */
									olUpgradeGridData[i].status = olUpgradeGridData[i].isUpgradable ? transToStatus(label.isUpgradable)  : label.isAreadyNewVer;
								}
							}
						}

						isWorking = false;
						refreshTable(true);
					});
				}
			});
		}

		function autoRefreshHandle()
		{
			if (!isWorking)
			{
				autoRefreshGrid(function(){
					$.setTimeout(autoRefreshHandle, 3000);
				});
			}
			else
			{
				$.setTimeout(autoRefreshHandle, 3000);
			}
		}

		function autoRefreshGrid(callback)
		{
			var newDiffArray = [], oldDiffArray = [], item;
			getBasicData(function(newData){
				$.each(newData, function(index, value){
					if (null == findItemByMac(olUpgradeGridData, value.mac))
					{
						newDiffArray.push(value);
					}
				});
				$.each(olUpgradeGridData, function(index, value){
					if (null == findItemByMac(newData, value.mac))
					{
						oldDiffArray.push(value);
					}
				});

				/* Remove disconnect item first, then add new-connect item */
				for(var i = 0 ; i < oldDiffArray.length; i++)
				{
					item = findItemByMac(olUpgradeGridData, oldDiffArray[i].mac);
					olUpgradeGridData.splice(item.idx, 1);
				}
				for(i = 0; i < newDiffArray.length; i++)
				{
					olUpgradeGridData.unshift(newDiffArray[i]);
				}

				refreshTable(false, true);

				typeof callback == "function" && callback();
			});
		}

		// combine data with upgrade_status
		function mixDataWithUpgradeStatus(data)
		{
			var obj, item, str, workingItem = [];

			isCapWillUpgrade = false;
			isReReadyToUpgrade = false;

			for (var i = 0; i < data.length; i++)
			{
				if (data[i].status != uciPlc.optValue.upgradeStatus.idle)
				{
					obj = findItemByMac(olUpgradeGridData, data[i].mac);

					if (capMac.toUpperCase() == data[i].mac)
					{
						isCapWillUpgrade = true;
					}

					if (obj != null)
					{
						item = obj.item;

						if (item.isCap && (data[i].status == uciPlc.optValue.upgradeStatus.downloading ||
							data[i].status == uciPlc.optValue.upgradeStatus.downloadTimeout ||
							data[i].status == uciPlc.optValue.upgradeStatus.downloadFail ||
							data[i].status == uciPlc.optValue.upgradeStatus.waitForUpgrade ||
							data[i].status == uciPlc.optValue.upgradeStatus.upgrading ||
							data[i].status == uciPlc.optValue.upgradeStatus.upgradeFail ||
							data[i].status == uciPlc.optValue.upgradeStatus.upgradeSuccess))
						{
							capUpgradeTime = data[i].wait_time * 1000;
							return IS_CAP_UPGRADING;
						}
						else if (item.isCap != true && item[uciPlc.optName.supportEyUp] == "1")
						{
							if (data[i].status == uciPlc.optValue.upgradeStatus.waitForUpgrade ||
							 data[i].status == uciPlc.optValue.upgradeStatus.upgrading)
							{
								isReReadyToUpgrade = true;
							}
						}
						else if (item.isCap != true && item[uciPlc.optName.supportEyUp] == "0")
						{
							(data[i].status == uciPlc.optValue.upgradeStatus.downloading ||
							 data[i].status == uciPlc.optValue.upgradeStatus.waitForUpgrade ||
							 data[i].status == uciPlc.optValue.upgradeStatus.upgrading)
							{
								isReReadyToUpgrade = true;
							}
						}

						workingItem.push(obj.idx);

						if (data[i].status == uciPlc.optValue.upgradeStatus.waiting)
						{
							str = label.waiting;
						}
						else if (data[i].status == uciPlc.optValue.upgradeStatus.downloading)
						{
							if (data[i].download_progress != "-1")
							{
								str = label.downloadingFw + data[i].download_progress + "%";
							}
							else
							{
								str = label.downloadingFw;
							}
						}
						else if (data[i].status == uciPlc.optValue.upgradeStatus.downloadTimeout)
						{
							str = transToStatus(label.downloadTimeout);
						}
						else if (data[i].status == uciPlc.optValue.upgradeStatus.downloadFail)
						{
							str = transToStatus(label.downloadFail);
						}
						else if (data[i].status == uciPlc.optValue.upgradeStatus.waitForUpgrade)
						{
							str = label.waitingForUpgrade;
						}
						else if (data[i].status == uciPlc.optValue.upgradeStatus.upgrading)
						{
							if (data[i].upgrade_progress != "-1")
							{
								str = label.upgradeing + data[i].upgrade_progress + "%";
							}
							else
							{
								str = label.upgradeing;
							}
						}
						else if (data[i].status == uciPlc.optValue.upgradeStatus.upgradeFail)
						{
							str = transToStatus(label.upgradeFail);
						}
						else if (data[i].status == uciPlc.optValue.upgradeStatus.upgradeSuccess)
						{
							str = transToStatus(label.upgradeSuccess);
						}

						item.status = str;
						item.upgradeStatus = data[i].status;
					}
				}

				if (data[i].mac.toUpperCase() == curDutMac.toUpperCase() && isConnectedRe)
				{
					curDutWaitTime = data[i].wait_time;
				}
			}

			return workingItem;
		}

		// combine data with check_ver_status
		function mixDataWithCheckVerStatus(data)
		{
			var obj, item, str, workingItem = [];

			for (var i = 0; i < data.length; i++)
			{
				obj = findItemByMac(olUpgradeGridData, data[i].mac);

				if (obj != null)
				{
					item = obj.item;
					workingItem.push(obj.idx);

					if (data[i].status == uciPlc.optValue.checkAllFwVerStatus.checking)
					{
						str = label.isChecking;
					}
					else if (data[i].status == uciPlc.optValue.checkAllFwVerStatus.idleOrFinish)
					{
						str = transToStatus(label.isChecked);
					}
					else if (data[i].status == uciPlc.optValue.checkAllFwVerStatus.fail)
					{
						str = transToStatus(label.isCheckFail);
					}

					item.status = str;
					item.checkFwVerStatus = data[i].status;
				}
			}

			return workingItem;
		}

		// get upgradeStatus data
		function getUpgradeStatus(callback)
		{
			var dfdUpgrade = $.Deferred(), dfdHostInfo = $.Deferred();
			var upgradeDataObj = {}, hostinfoDataObj = {};

			upgradeDataObj[uciPlc.fileName] = {};
			upgradeDataObj[uciPlc.fileName][KEY_TABLE] = uciPlc.secName.upgradeDevStatus;
			$.query(upgradeDataObj, function(result){
				dfdUpgrade.resolve(result);
			});

			hostinfoDataObj[uciHostsInfo.fileName] = {};
			hostinfoDataObj[uciHostsInfo.fileName][KEY_TABLE] = uciHostsInfo.dynData.online_host;
			$.query(hostinfoDataObj, function(result){
				dfdHostInfo.resolve(result);
			});

			upgradeQueryTimeoutHandle = $.setTimeout(function(){
				upgradeQueryTimeoutHandle = null;

				upgradeQueryTimeoutCount ++;
				if (upgradeQueryTimeoutCount >= 3)
				{
					upgradeQueryTimeoutCount = 0;

					if (isReReadyToUpgrade && !isPopedReUpgradeProgress)
					{
						showProgBar(curDutWaitTime * 1000, label.upgradePopsWindowTips, function(){
							if (isCapWillUpgrade)
							{
								//若主路由也在待升级列表中，则升级完成后应进行页面跳转
								lanDetecting(function(){
									window.location.reload();
								});
							}
							else
							{
								lanDetecting(function(){
									// TODO: 此处先跳回首页，后续需确认后台请求upgradeDevStatus返回-40101的原因。
									//closeProgBar();
									//isPopedReUpgradeProgress = false;
									//getUpgradeStatus(callback);
									window.location.reload();
								});
							}
						}, true, (isCapWillUpgrade ? statusStr.upgradeTip : statusStr.upgradeTipsForEasyRe));
						isPopedReUpgradeProgress = true;
					}
				}
				else
				{
					getUpgradeStatus(callback);
				}
			}, 2 * 1000);

			$.when(dfdUpgrade, dfdHostInfo).done(function(res1, res2){
				var array, ifNoWork = true;

				if (isPopedReUpgradeProgress) {
					return;
				}

				if (upgradeQueryTimeoutHandle != null)
				{
					clearTimeout(upgradeQueryTimeoutHandle);
					upgradeQueryTimeoutCount = 0;
				}

				var hostList = formatTableData(res2[uciHostsInfo.fileName][uciHostsInfo.dynData.online_host]);
				for (var i = 0; i < hostList.length; i++)
				{
					if (hostList[i][uciHostsInfo.optName.mac].toUpperCase() == g_cur_host_mac.toUpperCase())
					{
						curDutMac = hostList[i][uciHostsInfo.optName.parentMac];
					}
				}

				isConnectedRe = false;
				if (curDutMac.toUpperCase() != capMac.toUpperCase())
				{
					isConnectedRe = true;
				}

				if (res1[ERR_CODE] != ENONE)
				{
					typeof callback == "function" && callback([], ifNoWork);
				}
				else
				{
					array = formatTableData(res1[uciPlc.fileName][uciPlc.secName.upgradeDevStatus]);
					for (i = 0; i < array.length; i++)
					{
						if (array[i].status == uciPlc.optValue.upgradeStatus.waiting ||
							array[i].status == uciPlc.optValue.upgradeStatus.downloading ||
							array[i].status == uciPlc.optValue.upgradeStatus.waitForUpgrade ||
							array[i].status == uciPlc.optValue.upgradeStatus.upgrading)
						{
							ifNoWork = false;
							break;
						}
					}

					typeof callback == "function" && callback(array, ifNoWork);
				}
			});
		}

		// get checkVerStatus data
		function getCheckVerStatus(callback)
		{
			var dataObj = {};
			dataObj[uciPlc.fileName] = {};
			dataObj[uciPlc.fileName][KEY_TABLE] = uciPlc.secName.checkAllFwVer;

			$.query(dataObj, function(result){
				var array, ifNoWork = true;

				if (result[ERR_CODE] != ENONE)
				{
					typeof callback == "function" && callback([], ifNoWork);
				}
				else
				{
					array = formatTableData(result[uciPlc.fileName][uciPlc.secName.checkAllFwVer]);
					for (var i = 0; i < array.length; i++)
					{
						if (array[i].status == uciPlc.optValue.checkAllFwVerStatus.checking)
						{
							ifNoWork = false;
							break;
						}
					}

					typeof callback == "function" && callback(array, ifNoWork);
				}
			});
		}

		// get basic data
		function getBasicData(callback)
		{
			var dataObj = {};
			dataObj[uciCloudConfig.fileName] = {};
			dataObj[uciCloudConfig.fileName][KEY_NAME] = [uciCloudConfig.secName.newFirmware, uciCloudConfig.secName.upgradeInfo];
			dataObj[uciDeviceInfo.fileName] = {};
			dataObj[uciDeviceInfo.fileName][KEY_NAME] = uciDeviceInfo.secName.info;
			dataObj[uciProto.fileName] = {};
			dataObj[uciProto.fileName][KEY_NAME] = uciProto.secName.dhcp;
			dataObj[uciPlc.fileName] = {};
			dataObj[uciPlc.fileName][KEY_TABLE]= uciPlc.secType.connectedExt;
			dataObj[uciNetwork.fileName] = {};
			dataObj[uciNetwork.fileName][KEY_NAME] = uciNetwork.secName.lan;

			$.query(dataObj, function(result){
				var info = result[uciDeviceInfo.fileName][uciDeviceInfo.secName.info];
				var name = result[uciProto.fileName][uciProto.secName.dhcp][uciProto.optName.hostName];
				var cloudDeviceInfo = result[uciCloudConfig.fileName][uciCloudConfig.secName.newFirmware];
				var upgradeInfo = result[uciCloudConfig.fileName][uciCloudConfig.secName.upgradeInfo];
				var lanInfo = result[uciNetwork.fileName][uciNetwork.secName.lan];
				var router, cldList;

				var fwVersion = info[uciDeviceInfo.optName.swVer] == undefined ? label.notFoundVersion : info[uciDeviceInfo.optName.swVer];
				var fwNewNofify = cloudDeviceInfo[uciCloudConfig.optName.fwNewNotify];

				fwNewNofify = checkNum(fwNewNofify) && parseInt(fwNewNofify) || uciCloudConfig.optValue.fwNewFalse;

				/* CAP */
				router = {};
				router.name = name;
				router.hw_version = info[uciDeviceInfo.optName.hwVer];
				router.cur_fw_version_full = fwVersion;
				router.cur_fw_version = fwVersion.split(" ")[0];
				router.isUpgradable = (fwNewNofify == uciCloudConfig.optValue.fwNewTrue) && (upgradeInfo[uciCloudConfig.optName.version] != undefined);
				router.newest_fw_version = router.isUpgradable ? (upgradeInfo[uciCloudConfig.optName.version]).split(" ")[0] : fwVersion.split(" ")[0];
				router.status = router.isUpgradable ? transToStatus(label.isUpgradable) : label.isAreadyNewVer;
				router.mac = lanInfo[uciNetwork.optName.mac];
				router.isCap= true;
				router.isCheckState = false;

				capMac = lanInfo[uciNetwork.optName.mac].toUpperCase();

				/* RE */
				var cldList = formatTableData(result[uciPlc.fileName][uciPlc.secType.connectedExt]);

				for (var i = 0, j = cldList.length; i < j; i++)
				{
					var cld = cldList[i];

					if (cld[uciPlc.optName.supportOlUp] != uciPlc.optValue.supportOlUp.yes)
					{
						cld.name = cld.name || label.oldVersion;
						cld.cur_fw_version = label.notFoundVersion;
						cld.newest_fw_version = label.notFoundVersion;
						cld.cur_fw_version_full = label.notFoundVersion;
						cld.isUpgradable = false;
						cld.status = label.isAreadyNewVer;
					}
					else
					{
						cld.name = cld.name == undefined ? label.notFoundVersion : cld.name;
						cld.cur_fw_version_full = cld.cur_fw_version == undefined ? label.notFoundVersion : cld.cur_fw_version;
						cld.cur_fw_version = cld.cur_fw_version == "" ? label.notFoundVersion : (cld.cur_fw_version.split(" ")[0] == "" ? label.notFoundVersion : cld.cur_fw_version.split(" ")[0]);
						cld.newest_fw_version = cld.newest_fw_version == undefined ? cld.cur_fw_version : (cld.newest_fw_version.split(" ")[0] || cld.cur_fw_version);

						if (cld.cur_fw_version == label.notFoundVersion || cld.newest_fw_version == label.notFoundVersion)
						{
							cld.isUpgradable = false;
						}
						else if (cld.newest_fw_version != cld.cur_fw_version)
						{
							cld.isUpgradable = true;
						}
						else
						{
							cld.isUpgradable = false;
						}

						cld.status = cld.isUpgradable ? transToStatus(label.isUpgradable)  : label.isAreadyNewVer;
					}

					cld.isCheckState = false;
				}

				var tblData = [router];
				tblData = cldList.concat(tblData);

				typeof callback == "function" && callback(tblData);
			});
		}

		function transToStatus(str)
		{
			var result = {str: str};
			switch (str)
			{
			case label.isUpgradable:
				result.iconType = "tips";
				break;
			case label.isChecked:
				result.iconType = "success";
				break;
			case label.isCheckFail:
			case label.downloadTimeout:
			case label.downloadFail:
			case label.upgradeFail:
				result.iconType = "error";
				break;
			default:
				break;
			}

			return result;
		}

		function refreshTable(onlyOlTable, isAutoRefreshing)
		{
			onlineTbl.setDataSource(olUpgradeGridData);
			onlineTbl.refresh();

			workingStateSet(isWorking, isAutoRefreshing);

			if (onlyOlTable)
			{
				return;
			}

			nativeTbl.setDataSource(olUpgradeGridData);
			nativeTbl.refresh();
		}

		function pageInit()
		{
			onlineTbl = new DataGrid();
			nativeTbl = new DataGrid();

			onlineTbl.init({
				id:"onlineTbl",
				data:[],
				IDWidth:"30px",
				edit:false,
				hasSelBox:true,
				head:[{field:label.equipName, width:28},
					  {field:label.upCurrSoft, width:10},
					  {field:label.upNewSoft, width:10},
					  {field:label.curStatus, width:16}],
				list:[{edit:false, name:"name", type:"str", maxSize:40},
					  {edit:false, name:"cur_fw_version", type:"str"},
					  {edit:false, name:"newest_fw_version", type:"str"},
					  {edit:false, name:"status", type:"iconWithStr"}
					]
			});
			$(id("onlineTbl").rows[0].cells[0].childNodes[0]).on("click", checkboxHandle);

			nativeTbl.init({
				id:"nativeTbl",
				data:[],
				edit:false,
				hasSelBox:false,
				head:[{field:label.equipName, width:40},
					  {field:label.upCurrSoft, width:18},
					  {field:label.operation, width:18}],
				list:[{edit:false, name:"name", type:"str", maxSize:40},
					  {edit:false, name:"cur_fw_version", type:"str"},
					  {value:btn.fwLocalUpgrade, type:"btn", click:showNativeInput, className:"subBtn tblBtn"}]
			});

			getBasicData(function(basicData){
				olUpgradeGridData = $.extend(true, [], basicData);

				getCheckVerStatus(function(result, ifNoWork){
					var checkVerItem;

					if (ifNoWork)
					{
						getUpgradeStatus(function(result, ifNoWork){
							var upgradingItem;

							if (ifNoWork)
							{
								isWorking = false;
								refreshTable();

								if (gOnlineUpgradeAuto)
								{
									gOnlineUpgradeAuto = false;
									checkVerBtnHandle();
								}
								autoRefreshHandle();
							}
							else
							{
								upgradingItem = mixDataWithUpgradeStatus(result);

								if (upgradingItem == IS_CAP_UPGRADING)
								{
									isWorking = false;
									refreshTable();

									onlineUpgradeProgress(capUpgradeTime);
								}
								else
								{
									for (var i = 0; i < upgradingItem.length; i++)
									{
										olUpgradeGridData[upgradingItem[i]].isCheckState = true;
									}
									isWorking = true;
									refreshTable();
									upgradeStatusQuery();
								}

								autoRefreshHandle();
							}
						});
					}
					else
					{
						checkVerItem = mixDataWithCheckVerStatus(result);
						isWorking = true;
						refreshTable();
						checkVerStatusQuery();
						autoRefreshHandle();
					}
				});
			});
		}

		var nativeTbl;
		var onlineTbl;
		var upgradeTimeoutTag = false;

		var olUpgradeGridData = null;
		var selBoxArray = [];
		var isWorking = false, isConnectedRe = false, isCapWillUpgrade = false, isReReadyToUpgrade = false;
		var IS_CAP_UPGRADING = -1,
			capUpgradeTime = SYSUPGRADE_SECONDS;
		var capMac = "", curDutMac = "", curDutWaitTime = 0;
		var upgradeQueryTimeoutCount = 0, upgradeQueryTimeoutHandle = null, isPopedReUpgradeProgress = false;

		id("easyUpgrade").onclick = olUpgradeBtnHandle;
		id("checkVer").onclick = checkVerBtnHandle;
		disableBtn("easyUpgrade", true);
		disableBtn("checkVer", true);

		pageInit();
	}
	init();
</script>
<div id="hcCo" class="hcCo">
	<div class="hsHelp"></div>
	<div id="online">
		<div class="title">
			<label class="title">{%menuStr.onlineUpgrade%}</label>
		</div>
		<div class="sysUpBlock">
			<p class="upgradeTip">{%label.onlineEasyUpgradeNote%}</p>
			<div class="blockOlUpgradeBtn">
				<input id="easyUpgrade" type="button" value="{%btn.easyUpgrade%}" class="subBtn" />
				<input id="checkVer" type="button" value="{%btn.checkVersion%}" class="subBtn" />
			</div>
			<table id="onlineTbl" class="dataGrid"></table>
		</div>
	</div>
	<div id="local">
		<div class="title">
			<label class="title">{%menuStr.localUpgrade%}</label>
		</div>
		<div class="block sysUpBlock" class="dataGrid"></table>
			<p class="upgradeTip">{%label.localUpgradeNote%}</p>
			<table id="nativeTbl" class="dataGrid"></table>
		</div>
	</div>
</div>
