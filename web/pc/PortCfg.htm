<style>
    .dnsBalanceInfo{
        width: 468px;
        font-size: 12px;
        color: #FFFFFF;
        margin-left: 107px;
        margin-top: 10px;
    }
    #wanSetItems{
        padding-left: 69px;
    }
    .bandWidthTip{
        position: relative;
        left: 24px;
        top: 6px;
        font-size: 12px;
        color: #fbeb1a;
    }
    .vlanTipShow{
        position: absolute;
        top: 14px;
        width: 170px;
        left: 226px;
        color: #fbeb1a;
        font-size: 12px;
    }
    #lanTogetherSetting div.selPortArea{
        margin-top: 0px;
    }
    #gameModule .gameConfig{
        display:inline-block;
    }
    #iptvConfigPanel ul.selOptsUl{
        width: 118%;
    }
    #lagRouterLists .routerSelLi{
        margin-left: 14px;
    }
    #lagRouterLists ul.selOptsUl{
        width: 118%;
    }
    #gameConfigPanel ul.selOptsUl{
        width: 118%;
    }
    .vlanId li.textConA{
        width: 390px;
    }
    #lagRouterLists span.select i.arrow{
        width: 13px;
    }
    .deletePort{
        background:url(../web-static/images/delect.png) no-repeat;
        display: inline-block;
        width: 16px;
        height: 16px;
        position: relative;
        top: 4px;
        left: 14px;
        cursor:pointer;
    }
    .lagDisplayItem{
        margin-bottom:25px;
    }
    #lagDisplayList{
        text-align:left;
        display:inline-block;
    }
    .inputBtnWrapper .selectableConfirm{
        background-color:#FBEB1A;
    }
    .inputBtnWrapper .unSelectableConfirm{
        background-color:#D9D9D9;
    }
    .onlinePadding{
        margin-bottom: 30px;
    }
    .bandWidthEnd{
        position:relative;
        top:5px;
        left:10px;
        color:#FFFFFF;
        font-size: 12px;
    }
    #SFPRateSetTbl td{
        height:36px;
        padding:4px 4px;
    }
    #SFPRateSetTbl span.select span.hsValueA {
        line-height: 24px;
        height: 24px;
        width: 148px;
    }
    #SFPRateSetTbl li.textConA{
        width: 175px;
    }
    div.portTip{
        width: 420px;
        min-height: 126px;
        padding-top: 54px;
        margin: 0 auto;
        background: #FFFFFF;
        text-align: center;
        z-index: 1;
        box-shadow: 0 0 2px rgba(210,210,210,1);
    }
    div.portTip p.detail{
        color: #343434;
        font-size: 12px;
        text-align:center;
        margin: 0 auto;
        line-height: 17px;
    }
    div.portTip input{
        width: 80px;
        height: 28px;
        margin-top: 28px;
        margin-left: 12px;
        margin-right: 12px;
        padding: 0px;
    }
    div.portTip input.ok{
        background: #FEEB1A;
    }
    div.portTip input.cancel{
        background: #D9D9D9;
    }
    div.portSetWrapper div.title{
        margin-bottom: 21px;
    }
    #wanStable{
        margin-top: 21px;
    }
    div.savePortSelWrapper {
        margin-top: 25px;
        padding-right: 235px;
    }
    div.savePortSelWrapper input.saveBtn{
        width:80px;
        height: 25px;
        font-family: SourceHanSansCN-Regular;
        font-size: 12px;
        color: #333333;
        letter-spacing: 0;
        text-align: center;
        line-height: 9px;
    }
    div.wanSetDialogWrapper {
        width: 99%;
        position:absolute;
        z-index:1009;
        visibility:visible;
        top:100px;
    }
    div.lagSetDialogWrapper {
        width: 99%;
        position:absolute;
        z-index:1009;
        visibility:visible;
        top:100px;
    }
    #dualWanSetting{
        padding-bottom: 0px;
    }
    div.portSetDialog div.popHd label{
        font-size:14px;
        color:#343434;
        letter-spacing:-0.43px;
        font-weight:bold;
        position:relative;
        top:10px;
        font-family: SourceHanSansCN-Medium;
    }
    div.portSetDialog div.popHd i {
        background:url(../web-static/images/routerBg.png) -421px -107px no-repeat;
        width:22px;
        height:22px;
        display:block;
        float:right;
        cursor:pointer;
    }
    div.portSetDialog div.popHd{
        padding:20px 20px 0 70px;
    }
    div.portSetDialog {
        background:none repeat scroll 0 0 #FFFFFF;
        margin: 20px auto;
        width:650px;
        position:relative;
    }
    #wanPanel{
        display:inline-block;
        padding-top: 25px;
        text-align: left;
    }
    #gamePanel{
        padding-top: 25px;
        text-align: left;
    }
    #togetherPanel{
        padding-top: 25px;
        text-align: center;
    }
    .portInfo i{
        display: inline-block;
        width: 13px;
        height: 13px;
        background:url(../web-static/images/routerBg.png) -467px -190px no-repeat;
        position: relative;
        top: 1px;
        left: 1px;
    }
    .portInfo label{
        font-family: PingFangSC-Regular;
        font-size: 12px;
        color: #FFFFFF;
        margin-left: 5px;
    }
    .routerName{
        width: 245px;
        font-size: 14px;
        color: #FFFFFF;
        text-align: center;
    }
    #wanPanel .wanSetInfo{
        width: 245px;
        font-size: 12px;
        color: #FFFFFF;
        margin-top: 10px;
    }
    div.selPortArea input.portBtn{
        width:80px;
        height: 25px;
        font-family: SourceHanSansCN-Regular;
        font-size: 12px;
        color: #333333;
        letter-spacing: 0;
        text-align: center;
        line-height: 9px;
        padding-left: 0px;
        padding-right: 0px;
    }
    .portDesc{
        margin-top:45px;
        padding-left:70px;
        font-weight:bold;
        font-size: 14px;
        color: #343434;
        line-height: 14px;
    }
    .portDetail{
        font-family: SourceHanSansCN-Regular;
        font-size: 14px;
        color: #666666;
        letter-spacing: -0.43px;
        margin-left: 8px;
    }
    .addNewLagSetWrap{
        margin-left:70px;
        margin-top:8px;
    }
    .addNewLagBtn{
        font-family: SourceHanSansCN-Regular;
        font-size: 12px;
        color: #1E96D4;
        letter-spacing: 0;
        text-decoration: underline;
        cursor: pointer;
    }
    .addNewLagInfo{
        font-family: SourceHanSansCN-Regular;
        font-size: 12px;
        color: #666666;
        letter-spacing: -0.37px;
        margin-left: 8px;
    }
    .routerSelArea{
        padding-left: 70px;
        height: 25px;
        margin-top: 20px;
    }
    .routerSelArea .routerSelDesc{
        font-family: PingFangSC-Regular;
        font-size: 13px;
        color: #000000;
        letter-spacing: 0;
        line-height: 31px;
    }
    #wanAutoSel{
        margin-top: 10px;
        padding-left: 70px;
        line-height: 12px;
    }
    #wanPortRouter{
        margin-top: 16px;
        padding-left: 70px;
        line-height: 12px;
    }
    .wanSettingContainer{
        padding-left: 70px;
        margin-top: 8px;
        height: 72px;
    }
    .inputBtnWrapper{
        margin-top:42px;
        padding-bottom:50px;
    }
    .inputBtnWrapper .confirmBtn{
        margin-left: 70px;
        text-align:center;
        width: 80px;
        height: 25px;
        padding: 0px;
    }
    .inputBtnWrapper .cancelBtn{
        margin-left: 24px;
        text-align:center;
        width: 80px;
        height: 25px;
        padding: 0px;
        background-color: #D9D9D9;
    }
    #wanCheckingWrapper{
        position: absolute;
        top: 0px;
        text-align: center;
    }
    #wanChecking{
        margin-top: 0px;
        width: 650px;
        height: 230px;
        background: #FFFFFF;
        box-shadow: 0 0 2px rgba(210,210,210,1);
        margin: 0 auto;
    }
    .portFeatureInfo{
        font-family: PingFangSC-Regular;
        font-size: 12px;
        color: #FFFFFF;
        letter-spacing: 0;
        line-height: 12px;
        margin-bottom: 40px;
        text-align: left;
    }
    #saveSFPRate{
        width:80px;
        height: 25px;
        font-family: SourceHanSansCN-Regular;
        font-size: 12px;
        color: #333333;
        letter-spacing: 0;
        text-align: center;
        line-height: 9px;
    }
    #SFPRatePanel div.blockFuncA{
        margin-top: 25px;
    }
    #wanChecking i{
        margin-top: 37px;
    }
    #wanChecking p{
        margin-top: 41px;
    }
    #wanInfoWrapper{
        width: 100%;
        top: 185px;
        position: absolute;
        z-index: 1011;
    }
    #wanInfoWrapper .wanInfo{
        width: 420px;
        height: 127px;
        background: #FFFFFF;
        padding-top: 53px;
        margin:0px auto;
    }

    #wanInfoWrapper .titleInfo{
        text-align:center;
    }
    #infoBtn{
        width: 80px;
        margin-left: 170px;
        margin-top: 34px;
        padding-top: 6px;
        padding-bottom: 6px;
    }
    #wanCloseWrapper{
        width: 100%;
        top: 185px;
        position: absolute;
        z-index: 1011;
    }
    #wanCloseWrapper .wanCloseSuccess{
        width: 650px;
        height: 290px;
        background: #FFFFFF;
        padding-top: 0px;
        text-align: center;
        margin:0 auto;
    }
    div.closeBtnArea{
        margin-top: 20px;
        text-align: left;
    }
    #linkToSet{
        width: 96px;
        padding: 6px 0px;
        margin-left: 225px;
        background: #FEEB1A;
        font-size: 14px;
        border-radius: 3px;
    }
    #closeCancelBtn{
        width: 80px;
        padding-top: 6px;
        padding-bottom: 6px;
        margin-left: 24px;
        background: #D9D9D9;
        font-size: 14px;
        border-radius: 3px;
    }
    i.coverSuccess{
        width: 74px;
        height: 74px;
        display: inline-block;
        background: url(../web-static/images/routerBg.png) -316px -39px no-repeat;
        transform:scale(1.34);
        transform-origin:center top;
        margin-top: 37px;
    }
    .wanCloseNote{
        margin-top: 34px;
    }
    .wanCloseInfo{
        margin-top: 8px;
    }
    ul .dualWanLabel{
        width: 92px;
        top: 2px;
        position: relative;
    }
    label.switchLabelName{
        width: 85px;
        margin-left: 75px;
    }
    #dualWanSetting .noteLbl{
        font-size: 14px;
        color: #FFFFFF;
        margin: 0;
    }
    #lanTogetherSetting .noteLbl{
        font-size: 14px;
        color: #FFFFFF;
        margin: 0;
    }
    .savePortBtn{
        margin-left:23px;
    }
    .wanDisplayContainer{
        margin-top: 10px;
    }
    div.selPortArea{
        margin-top: 25px;
        padding-right: 235px;
    }
    div.portSetWrapper{
        padding-bottom:0px;
    }
    .routerSelLi {
        display: inline-block;
        height: 30px;
        line-height: 100%;
        border: 1px solid #2BA2D8;
        border-radius: 3px;
        background-color: #FFFFFF;
        text-align: left;
        list-style: none;
        vertical-align: middle;
    }
    span.select span.hsValue{
        font-family: PingFangSC-Regular;
        font-size: 12px;
        color: #000000;
        letter-spacing: 0;
        line-height: 21px;
        width: 169px;
    }
    ul.wzdSelOptsUl {
        top: -9999px;
        left: -1px;
        width: 100%;
        font-size: 12px;
        list-style: none;
        position: absolute;
        border: 1px solid #FFFFFF;
        max-height: 182px;
        box-shadow: 0 0 3px 0px rgba(120,120,12);
    }
    span.routerNameSel {
        margin-left: 11px;
    }
    span.routerNameSel span.hsValueA{
        color: #000000;
    }
    .lagSettingContainer{
        padding-left: 70px;
        padding-top: 20px;
    }
    #lagPortWrapper .inputBtnWrapper{
        margin-top: 35px;
    }
    #togetherPanel .togetherDisplayContainer {
        margin-top: 10px;
        margin-bottom: 8px;
    }

    /* IPTV Module */
    #iptvPortConfig {
        padding-bottom: 0;
    }
    #iptvPortConfig .wanPortSwitch {
        display: none;
    }
    #iptvPortConfig .wanPortSwitch .switchBtns {
        display: inline-block;
    }
    #iptvPortConfig .wanPortSwitch .switchBtns .switchBtn {
        display: table-cell;
        width: 160px;
        font-size: 14px;
        color: #FFFFFF;
        line-height: 32px;
        text-align: center;
        border: 1px solid #FFFFFF;
        cursor: pointer;
    }
    #iptvPortConfig .wanPortSwitch .switchBtns .switchBtn.selected {
        color: #2BA2D8;
        background-color: #FFFFFF;
    }
    #iptvPortConfig .wanPortSwitch .switchBtns .switchBtn:first-child {
        border-radius: 4px 0 0 4px;
    }
    #iptvPortConfig .wanPortSwitch .switchBtns .switchBtn:last-child {
        border-radius: 0 4px 4px 0;
    }
    #iptvPortConfig .iptvBtn {
        width: 80px;
        height: 25px;
        font-size: 12px;
        color: #333333;
        text-align: center;
        line-height: 9px;
    }
    #iptvPortConfig .gridLine {
        height: 30px;
        margin-top: 10px;
    }
    #iptvPortConfig .noteLbl {
        font-size: 14px;
        color: #FFFFFF;
        margin: 0;
    }
    #iptvPortConfig label.desLblA {
        width: 85px;
        margin-left: 75px;
    }
    #iptvPortConfig .iptvEnable,.iptvLinkMode,.iptvWorkMode,.iptvVlanId,.iptvPortConfig,.iptvBtns {
        display: none;
    }
    #iptvPortConfig .iptvVlanId {
        padding-bottom: 30px;
    }
    #iptvPortConfig .iptvVlanId li {
        position: relative;
    }
    #iptvPortConfig .iptvVlanId li .tip {
        width: 400px;
        font-size: 12px;
        color: #FFFFFF;
        position: absolute;
        top: 45px;
        left: 0;
    }
    #iptvPortConfig .iptvPortConfig {
        display:inline-block;
        height: auto;
        margin-top: 0;
    }
    #iptvPortConfig .iptvPortConfig .container1,#iptvPortConfig .iptvPortConfig .container2 {
        height: 72px;
        margin-top: 10px;
    }
    #iptvPortConfig .iptvPortConfig .name1,.name2 {
        display: inline-block;
        font-size: 14px;
        color: #FFFFFF;
        margin-top: 20px;
    }
    #iptvPortConfig .iptvPortConfig .tip {
        display: inline-block;
        font-size: 12px;
        color: #FFFFFF;
        line-height: 12px;
        margin-top: 10px;
    }
    #iptvPortConfig .iptvPortConfig .tip i {
        width: 13px;
        height: 13px;
        margin-right: 5px;
        background: url(../web-static/images/routerBg.png) -467px -190px no-repeat;
        display: inline-block;
        position: relative;
        top: 1px;
    }
    #iptvPortConfig .iptvBtns .resetBtn {
        display: none;
        padding: 3px 0px;
    }
    #infoPanel {
        z-index: 1009;
        width: 650px;
        height: 250px;
        background: #FFFFFF;
        position: absolute;
        top: 190px;
        margin-top: 0;
    }
    #infoPanel .checkingImg {
        padding: 50px 275px;
    }
    #infoPanel .checkingTip {
        width: 650px;
        font-size: 14px;
        line-height: 20px;
        color: #343434;
        position: absolute;
        left: 0;
        top: 180px;
        text-align: center;
    }
    .configPanel {
        z-index: 1009;
        width: 650px;
        height: auto;
        background: #FFFFFF;
        position: absolute;
        top: 190px;
        bottom: auto;
        overflow: hidden;
    }
    .configPanel .title {
        font-size: 14px;
        font-weight: bolder;
        color: #343434;
        position: absolute;
        top: 30px;
        left: 70px;
    }
    .configPanel .closeBtn {
        width: 16px;
        height: 16px;
        position: absolute;
        right: 20px;
        top: 20px;
        background: url("web-static/images/routerBg.png") 196px -110px;
        cursor: pointer;
    }
    .configPanel .linkMode {
        height: 345px;
    }
    .configPanel .linkMode .info {
        font-size: 14px;
        font-weight: bolder;
        color: #343434;
        position: absolute;
        top: 84px;
        left: 70px;
    }
    .configPanel .linkMode .selectLinkMode {
        width: 510px;
        text-align: center;
        padding: 28px 0;
        position: absolute;
        top: 118px;
        left: 70px;
        border: 1px solid #2BA2D8;
    }
    .configPanel .linkMode .selectLinkMode label {
        font-size: 14px;
        color: #343434;
        vertical-align: middle;
        margin: 0 5px;
    }
    .configPanel .linkMode .tip {
        display: none;
        font-size: 12px;
        color: #999999;
        position: absolute;
        top: 204px;
        left: 70px;
    }
    .configPanel .btnA {
        width: 80px;
        height: 25px;
        position: absolute;
        bottom: 50px;
        margin: 0;
    }
    .configPanel .linkMode .nextBtn {
        left: 70px;
    }
    .configPanel .linkMode .cancelBtn {
        left: 175px;
        background-color: #D9D9D9;
    }
    .configPanel .itvPort {
        display: none;
        height: 345px;
    }
    .configPanel .itvPort .info {
        font-size: 14px;
        font-weight: bolder;
        color: #343434;
        position: absolute;
        top: 84px;
        left: 70px;
    }
    .configPanel .itvPort .desLblA {
        width: auto;
        font-size: 13px;
        color: #000000;
        line-height: 12px;
        position: absolute;
        top: 127px;
        left: 70px;
        margin-left: 0;
        text-align: left;
    }
    .configPanel .itvPort .textConApp {
        border-radius: 3px;
        border: 1px solid #2BA2D8;
        background: #FFFFFF;
        height: 30px;
        line-height: 100%;
        display: inline-block;
        vertical-align: middle;
        text-align: left;
        list-style: none;
        position: absolute !important;
        top: 118px;
        left: 136px;
    }
    .configPanel .itvPort .textConApp #itvDeviceSel1 .hsValueA {
        color: #000000;
    }
    .configPanel .itvPort .textConApp #itvDeviceSel1 .arrow {
        background: url("web-static/images/routerBg.png") -445px -113px;
    }
    .configPanel .itvPort .container1 {
        height: 72px;
        position: absolute;
        top: 165px;
        left: 70px;
    }
    .configPanel .itvPort .nextBtn {
        left: 70px;
    }
    .configPanel .itvPort .backBtn {
        left: 175px;
        background-color: #D9D9D9;
    }
    .configPanel .workMode {
        display: none;
        height: 345px;
    }
    .configPanel .workMode .info {
        font-size: 14px;
        font-weight: bolder;
        color: #343434;
        position: absolute;
        top: 84px;
        left: 70px;
    }
    .configPanel .workMode .selectWorkMode {
        position: absolute;
        top: 124px;
        left: 70px;
    }
    .configPanel .workMode .selectWorkMode .noteLbl {
        font-size: 14px;
        color: #343434;
        vertical-align: middle;
        margin: 0 5px;
    }
    .configPanel .workMode .selectWorkMode .desLblA {
        width: auto;
        font-size: 14px;
        color: #343434;
        vertical-align: middle;
        margin: 0 15px 0 0;
    }
    .configPanel .workMode .vlanId {
        display: none;
        width: auto;
        position: absolute;
        top: 160px;
        left: 70px;
        list-style: none;
    }
    .configPanel .workMode .vlanId .desLblA {
        width: auto;
        font-size: 13px;
        color: #000000;
        line-height: 30px;
    }
    .configPanel .workMode .vlanId .textCon {
        display: inline-block;
    }
    .configPanel .workMode .vlanId .textCon input {
        width: 180px;
        height: 28px;
        line-height: 28px;
        border: 1px solid #2BA2D8;
        border-radius: 4px;
        padding: 0 10px;
        margin: 0;
    }
    .configPanel .workMode .vlanId .textCon label {
        display: inline-block;
        font-size: 12px;
        color: #999999;
        white-space: nowrap;
        margin-top: 8px;
    }
    .configPanel .workMode .finishBtn {
        left: 70px;
    }
    .configPanel .workMode .backBtn {
        left: 175px;
        background-color: #D9D9D9;
    }
    .configPanel .uplinkITVPort {
        display: none;
        height: 544px;
    }
    .configPanel .uplinkITVPort .info {
        font-size: 14px;
        font-weight: bolder;
        color: #343434;
    }
    .configPanel .uplinkITVPort .info1 {
        position: absolute;
        top: 84px;
        left: 70px;
    }
    .configPanel .uplinkITVPort .container2 {
        height: 72px;
        position: absolute;
        top: 135px;
        left: 70px;
    }
    .configPanel .uplinkITVPort .crossLine {
        width: 510px;
        height: 1px;
        background-color: #E6E6E6;
        position: absolute;
        top: 230px;
        left: 70px;
    }
    .configPanel .uplinkITVPort .info2 {
        position: absolute;
        top: 255px;
        left: 70px;
    }
    .configPanel .uplinkITVPort .container3 {
        height: 72px;
        position: absolute;
        top: 335px;
        left: 70px;
    }
    .configPanel .uplinkITVPort .finishBtn {
        left: 70px;
    }
    .configPanel .uplinkITVPort .backBtn {
        left: 175px;
        background-color: #D9D9D9;
    }
    .configPanel .uplinkITVPort .desLblA {
        width: auto;
        font-size: 13px;
        line-height: 12px;
        color: #000000;
        position: absolute;
        top: 299px;
        left: 70px;
        margin-left: 0;
        text-align: left;
    }
    .configPanel .uplinkITVPort .uplinkDeviceName {
        font-size: 13px;
        line-height: 12px;
        color: #343434;
        position: absolute;
        top: 115px;
        left: 70px;
    }
    .configPanel .uplinkITVPort .textConApp {
        border-radius: 3px;
        border: 1px solid #2BA2D8;
        background: #FFFFFF;
        height: 30px;
        line-height: 100%;
        display: inline-block;
        vertical-align: middle;
        text-align: left;
        list-style: none;
        position: absolute !important;
        top: 290px;
        left: 136px;
    }
    .configPanel .uplinkITVPort .textConApp #itvDeviceSel2 .hsValueA {
        color: #000000;
    }
    .configPanel .uplinkITVPort .textConApp #itvDeviceSel2 .arrow {
        background: url("web-static/images/routerBg.png") -445px -113px;
    }
    /* Game Module */
    #gameModule {
        padding-bottom: 0;
    }
    #gameModule .gridLine .desLblA {
        width: 85px;
        margin-left: 75px;
    }
    #gameModule .gridLine .noteLbl {
        font-size: 14px;
        color: #FFFFFF;
        margin: 0;
    }
    #gameModule .gameConfig .devName {
        display: inline-block;
        font-size: 14px;
        color: #FFFFFF;
        margin-top: 20px;
    }
    #gameModule .gameConfig .container {
        height: 72px;
        margin-top: 10px;
    }
    #gameModule .gameConfig .tip {
        display: inline-block;
        font-size: 12px;
        color: #FFFFFF;
        line-height: 12px;
        margin-top: 10px;
    }
    #gameModule .gameConfig .tip .offlineImg {
        width: 13px;
        height: 13px;
        margin-right: 5px;
        background: url(../web-static/images/routerBg.png) -467px -190px no-repeat;
        display: inline-block;
        position: relative;
        top: 1px;
        left: 2px;
    }
    #gameModule .gameBtn {
        width: 80px;
        height: 25px;
        font-size: 12px;
        color: #333333;
        text-align: center;
        line-height: 9px;
    }
    #gameModule .gameBtn.resetBtn {
        display: none;
        padding:3px 0px;
    }
    #gameConfigPanel {
        z-Index: 1009;
        width: 650px;
        height: 345px;
        background: #FFFFFF;
        position: absolute;
        top: 190px;
        bottom: auto;
    }
    #gameConfigPanel .title {
        font-size: 14px;
        font-weight: bolder;
        color: #343434;
        position: absolute;
        top: 30px;
        left: 70px;
    }
    #gameConfigPanel .closeBtn {
        width: 16px;
        height: 16px;
        position: absolute;
        right: 20px;
        top: 20px;
        background: url("web-static/images/routerBg.png") 196px -110px;
        cursor: pointer;
    }
    #gameConfigPanel .configStep1 .info {
        font-size: 14px;
        font-weight: bolder;
        color: #343434;
        position: absolute;
        top: 84px;
        left: 70px;
    }
    #gameConfigPanel .configStep1 .desLblA {
        width: auto;
        font-size: 13px;
        color: #000000;
        line-height: 12px;
        position: absolute;
        top: 127px;
        left: 70px;
        margin-left: 0;
        text-align: left;
    }
    #gameConfigPanel .configStep1 .textConApp {
        display: inline-block;
        height: 30px;
        line-height: 100%;
        position: absolute !important;
        top: 118px;
        left: 136px;
        border: 1px solid #2BA2D8;
        border-radius: 3px;
        background-color: #FFFFFF;
        text-align: left;
        list-style: none;
        vertical-align: middle;
    }
    #gameConfigPanel .configStep1 .textConApp #gameSel .hsValueA {
        color: #000000;
    }
    #gameConfigPanel .configStep1 .textConApp #gameSel .arrow {
        background: url("web-static/images/routerBg.png") -445px -113px;
    }
    #gameConfigPanel .configStep1 .container {
        height: 72px;
        position: absolute;
        top: 165px;
        left: 70px;
    }
    #gameConfigPanel .configStep1 .gameBtn {
        width: 85px;
        height: 25px;
        font-size: 12px;
        color: #333333;
        text-align: center;
        line-height: 9px;
        position: absolute;
        bottom: 50px;
        margin: 0;
    }
    #gameConfigPanel .configStep1 .finishBtn {
        left: 70px;
    }
    #gameConfigPanel .configStep1 .cancelBtn {
        left: 175px;
    }
    ul.gridLineTips{
		margin-top:8px !important;
		height:auto;
		display:none;
        line-height: unset;
	}
	ul.gridLineTips span{
		width:225px;
		color:#FFF;
		line-height:18px;
		font-size:12px;
	}
    div.warnCon {
		width: 16px;
		height: 16px;
		overflow: hidden;
		display: inline-block;
		vertical-align: top;
        margin-left: 175px;
	}
	div.warnCon img {
		margin-top: -187px;
		margin-left: -467px;
	}
    input.subBtnDis {
        color: #FFF !important;
    }
</style>
<script>
    $(document).ready(function init()
    {
        // 多WAN相关
        // 初始化多WAN模块显示(包括初始页面显示和按钮事件注册)
        function initMultiWanModule(resData){
            var resDataCopy = JSON.parse(JSON.stringify(resData));
            mulWanBtnInit(wanNum);
            var deviceList = resDataCopy["devRes"];
            var power_position,port_num,capIndex,power_index;
            for(var i=0;i<deviceList.length;i++){
                if(deviceList[i].cap == 1){
                    capIndex = i;
                    power_position = deviceList[i][uciPortConfig.dynOptName.powerPos];
                    power_index = deviceList[i][uciPortConfig.dynOptName.powerIdx];
                    port_num = parseInt(deviceList[i][uciPortConfig.dynOptName.phyNum]);
                    capMac = deviceList[i][uciPortConfig.dynOptName.mac];
                    capName = deviceList[i][uciPortConfig.dynOptName.name];
                }
            }
            $("#wanPanel .routerName").html(capName);
            multiWanOpen = true;
            for(var i=0; i<wanNum; i++){
                if(resDataCopy["mwanRes"][i].enable == 0){
                    multiWanOpen = false;
                }
            }
            if(!multiWanOpen){
                // 多WAN关闭
                id("wanOff").checked = true;
                $("#wanPanel").hide();
                $("#wanSetItems").hide();
                $("#dualWanSetting .savePortSelWrapper").show();
            }else{
                // 多WAN开启
                initBandWidthSet();
                if (gMWanLoadBalanceSupport) {
                    initDnsBalance();
                }
                multiWanPosition = power_position;
                multiWanPowerIdx = power_index;
                var phyInfoList = deviceList[capIndex][uciPortConfig.dynOptName.phyInfo];
                var sfpCapabilityList = deviceList[capIndex][uciPortConfig.dynOptName.sfpCapability];
                initPortData(phyInfoList,multiWanPosition,"WAN",mulWanData,sfpCapabilityList);
                transformLanPortState(mulWanData,false);
                wanDisplayPort = new PortConfig();
                var wanDisplayInitData = {
                    element: $('.wanDisplayContainer')[0],
                    type: 'display',
                    port: mulWanData,
                    powerPos: multiWanPosition,
                    powerIdx: multiWanPowerIdx
                };
                wanDisplayPort.init(wanDisplayInitData);
                id("wanOn").checked = true;
                $("#wanPanel").show();
                $("#wanSetItems").show();
                $("#dualWanSetting .savePortSelWrapper").hide();
            }
        }
        function transRoleName(role){
            var roleType = role.slice(0,3).toUpperCase();
            var roleName = "";
            switch(roleType){
                case "WAN":
                    roleName = role.toUpperCase();
                    break;
                case "LAN":
                    roleName = role.toUpperCase();
                    break;
                case "DOW":
                    roleName = "IPTV口";
                    break;
                case "IPT":
                    roleName = "IPTV口";
                    break;
                case "LAG":
                    roleName = "聚合口";
                    break;
                case "GAM":
                    roleName = "游戏专用口";
                    break;
                case "UPL":
                    roleName = "IPTV上联口";
                    break;
                default:
                    roleName = "LAN";
                    break;
            }
            return roleName;
        }
        function transformLanPortState(portData,state){
            for(var i=0;i<portData.length;i++){
                if(portData[i].name.toUpperCase() == "LAN"){
                    if(state){
                        portData[i].state = "normal";
                    }else{
                        portData[i].state = "disable";
                    }
                }
            }
        }
        // 通过当前设备端口数据，电源位置，当前功能生成用于显示的数据
        function initPortData(phyInfoList,powerPos,feature,portData,sfpCapabilityList){
            var port_num = phyInfoList.length;
            portData.splice(0,portData.length);
            for(var i=0;i<port_num;i++){
                portData[i] = {};
            }
            for(var i=0;i<phyInfoList.length;i++){
                if(phyInfoList[i]["role"].slice(0,3).toUpperCase() == feature){
                    portData[i].state = "active";
                    portData[i].name = transRoleName(phyInfoList[i]["role"]);
                }else if(phyInfoList[i]["role"].slice(0,3).toUpperCase() == "LAN"){
                    portData[i].state = "normal";
                    portData[i].name = "LAN";
                }else{
                    // 当前端口为其他功能口
                    portData[i].state = "disable";
                    portData[i].name = transRoleName(phyInfoList[i]["role"]);
                }
                portData[i].rate = getPhySpeedByIndex(phyInfoList,i,sfpCapabilityList);
                portData[i].isSfp = phyInfoList[i].type.toUpperCase() == "SFP";
            }
        }
        function resetMulWanData(mulWanData){
            for(var i=0; i<mulWanData.length; i++){
                if(mulWanData[i].state == "active"){
                    mulWanData[i].state = "normal";
                    mulWanData[i].name = "LAN";
                }
            }
        }
        function getPhySpeedByIndex(phyInfoList,index,sfpCapabilityList){
            function changeSpeedType(speed){
                switch (speed){
                    case '1000M':
                        return 'GE';
                    case '2.5G':
                        return '2.5GE';
                    case '10G':
                        return '10GE';
                    default:
                        return speed;
                }
            }
            if(phyInfoList[index].type.toUpperCase() == "SFP"){
                return changeSpeedType(sfpCapabilityList[sfpCapabilityList.length-1]);
            }else{
                return changeSpeedType(phyInfoList[index]["speed"]);
            }
        }
        // 判断双WAN关闭时是否存在IPTV冲突
        function iptvConflictCheck(callBack){
            if(gIptvSupport){
                var req = {};
                req[uciPortConfig.fileName] = {};
                req[uciPortConfig.fileName][KEY_TABLE] = [];
                req[uciPortConfig.fileName][KEY_TABLE].push(uciPortConfig.secType.iptv);
                $.query(req,function(res){
                    var iptvConfigs = res.port_manage.iptv;
                    var iptvConflict = false;
                    if(iptvConfigs[1]["iptv_2"]["enable"] == 1){
                        iptvConflict = true;
                    }
                    callBack(iptvConflict);
                })
            }else{
                callBack(false);
            }
        }
        function checkBandWidth(bandWidth){
            if (parseInt(bandWidth).toString() !== bandWidth) {
                return false;
            }

            if (parseInt(bandWidth) < 1 || parseInt(bandWidth) > 100000) {
                return false;
            }

            return true;
        }
		// 获取当前带宽设置选项
        function initBandWidthSet(){
            $("#wanBandWidth1").on('input',function(){
                if (checkBandWidth(this.value)) {
                    $("#bandWidthTip1").hide();
                    if(checkBandWidth($("#wanBandWidth2").val())){
                        $("#saveDualWan").removeAttr('disabled');
                        $("#saveDualWan").css("background-color","#FBEB1A");
                    }else{
                        $("#saveDualWan").attr('disabled',true);
                        $("#saveDualWan").css("background-color","#D9D9D9");
                    }
                } else {
                    $("#bandWidthTip1").show();
                    $("#saveDualWan").attr('disabled',true);
                    $("#saveDualWan").css("background-color","#D9D9D9");
                }
            });
            $("#wanBandWidth2").on('input',function(){
                if (checkBandWidth(this.value)) {
                    $("#bandWidthTip2").hide();
                    if(checkBandWidth($("#wanBandWidth1").val())){
                        $("#saveDualWan").removeAttr('disabled');
                        $("#saveDualWan").css("background-color","#FBEB1A");
                    }else{
                        $("#saveDualWan").attr('disabled',true);
                        $("#saveDualWan").css("background-color","#D9D9D9");
                    }
                } else {
                    $("#bandWidthTip2").show();
                    $("#saveDualWan").attr('disabled',true);
                    $("#saveDualWan").css("background-color","#D9D9D9");
                }
            });
            var bandwidthOptions = [{str:"手动",value:"manual"},{str:"自动",value:"dynamic"}];
            var req = {};
            req["mwan_load_balance"] = {};
            req["mwan_load_balance"]["name"] = [];
            req["mwan_load_balance"]["name"][0] = "band_width";
            $.query(req,function(res){
                if(res.error_code == ENONE){
                    bandWidthUserSet = res.mwan_load_balance.band_width.mwan_mode;
                    var wan1BandCfg = res.mwan_load_balance.band_width.wan1_band_width;
                    var wan2BandCfg = res.mwan_load_balance.band_width.wan2_band_width;
                    selectInit("bandWidthSel",bandwidthOptions,bandWidthUserSet,bandWidthChange);
                    if(typeof wan1BandCfg != "undefined" && typeof wan2BandCfg != "undefined"){
                        $("#wanBandWidth1").val(wan1BandCfg);
                        $("#wanBandWidth2").val(wan2BandCfg);
                    }
                    bandWidthChange(bandWidthUserSet);
                }
            });
        }
        function initDnsBalance(){
            var req = {};
            req["mwan_load_balance"] = {};
            req["mwan_load_balance"]["name"] = [];
            req["mwan_load_balance"]["name"][0] = "basic";
            $.query(req,function(res){
                if(res.error_code == ENONE){
                    dnsBalanceSet = res.mwan_load_balance.basic.balance_mode;
                    selectInit("dnsBalanceSel",dnsBalanceOptions,dnsBalanceSet,dnsBalanceChange);
                    dnsBalanceChange(dnsBalanceSet);
                }
            })
        }
        function dnsBalanceChange(value) {
            dnsBalanceSet = value;
        }
		// 双WAN口带宽设置
        function bandWidthChange(value) {
            bandWidthUserSet = value;
            if(value == "manual"){
                // 手动设置带宽
                $("#wanBandWidth1").trigger('input');
                $("#wanBandWidth2").trigger('input');
	            $(".wanBandWidthWrap").show();
            }else{
	            // 自动设置带宽
                $(".wanBandWidthWrap").hide();
                $("#saveDualWan").removeAttr('disabled');
                $("#saveDualWan").css("background-color","#FBEB1A");
            }
        }
        // 多WAN口模块相关按钮事件绑定
        function mulWanBtnInit(wanNum){
            id("wanOn").onclick = function(){
                wanCheckWDS(function(){
                    $.query({"port_manage":{"table":"dev_info"}},function(resCap){
                        var deviceList = resCap.port_manage.dev_info;
                        var power_position,port_num,capIndex,power_index;
                        for(var i=0;i<deviceList.length;i++){
                            if(deviceList[i].cap == 1){
                                capIndex = i;
                                power_position = deviceList[i][uciPortConfig.dynOptName.powerPos];
                                power_index = deviceList[i][uciPortConfig.dynOptName.powerIdx];
                                port_num = parseInt(deviceList[i][uciPortConfig.dynOptName.phyNum]);
                            }
                        }
                        $.query({"port_manage":{"table":"mwan"}},function(res){
                            showWanPortChecking("正在检测，请稍候...");
                            multiWanPosition = power_position;
                            multiWanPowerIdx = power_index;
                            var phyInfoList = deviceList[capIndex][uciPortConfig.dynOptName.phyInfo];
                            var sfpCapabilityList = deviceList[capIndex][uciPortConfig.dynOptName.sfpCapability];
                            initPortData(phyInfoList,multiWanPosition,"WAN",mulWanData,sfpCapabilityList);
                            var currentActiveWan = 0;
                            var currentUnUsedPort = 0;
                            var setConflict = false;
                            var settedPortExist = false;
                            for(var i=0; i<wanNum; i++){
                                var wanCfgPos = res.port_manage.mwan[i]["mwan_"+(i+1)][uciPortConfig.optName.wanPhy];
                                if(wanCfgPos != -1){
                                    settedPortExist = true;
                                    if(mulWanData[wanCfgPos].state == "disable"){
                                        setConflict = true;
                                    }
                                }
                            }
                            for(var i=0;i<port_num;i++){
                                if(mulWanData[i].state == "active"){
                                    currentActiveWan++;
                                }
                                if(mulWanData[i].state == "normal"){
                                    currentUnUsedPort++;
                                }
                            }
                            if(currentUnUsedPort + currentActiveWan < wanNum){
                                // 可定义端口不足
                                hideWanPortChecking();
                                showWanInfo("主路由可定义端口数不足，请先关闭其他端口自定义功能","知道了",function(){
                                    id("wanOff").checked = true;
                                });
                                return;
                            }
                            if(!settedPortExist){
                                // 端口未设置
                                wanDisplayPort = new PortConfig();
                                var wanDisplayInitData = {
                                    element: $('.wanDisplayContainer')[0],
                                    type: 'display',
                                    port: mulWanData,
                                    powerPos: multiWanPosition,
                                    powerIdx: multiWanPowerIdx
                                };
                                wanDisplayPort.init(wanDisplayInitData);
                                var copyPortArray = JSON.parse(JSON.stringify(mulWanData));
                                if(typeof mulWanData != undefined){
                                    hideWanPortChecking();
                                    showWanSetDialog(proName,mulWanData,multiWanPosition,copyPortArray);
                                }
                            }else{
                                if(setConflict){
                                    // 原有设置不可用
                                    resetMulWanData(mulWanData);
                                    wanDisplayPort = new PortConfig();
                                    var wanDisplayInitData = {
                                        element: $('.wanDisplayContainer')[0],
                                        type: 'display',
                                        port: mulWanData,
                                        powerPos: multiWanPosition,
                                        powerIdx: multiWanPowerIdx
                                    };
                                    wanDisplayPort.init(wanDisplayInitData);
                                    var copyPortArray = JSON.parse(JSON.stringify(mulWanData));
                                    if(typeof mulWanData != undefined){
                                        hideWanPortChecking();
                                        showWanSetDialog(proName,mulWanData,multiWanPosition,copyPortArray);
                                        showPortBusy();
                                    }
                                }else{
                                    // 原有设置仍然可用
                                    for(var i=0;i<mulWanData.length;i++){
                                        if(mulWanData[i].state == "active"){
                                            mulWanData[i].name = "LAN";
                                            mulWanData[i].state = "normal";
                                        }
                                    }
                                    for(var i=0; i<wanNum; i++){
                                        var wanCfgPos = res.port_manage.mwan[i]["mwan_"+(i+1)][uciPortConfig.optName.wanPhy];
                                        if(wanCfgPos != -1){
                                            mulWanData[wanCfgPos].state = "active";
                                            mulWanData[wanCfgPos].name = "WAN" + (i+1);
                                        }
                                    }
                                    transformLanPortState(mulWanData,false);
                                    wanDisplayPort = new PortConfig();
                                    var wanDisplayInitData = {
                                        element: $('.wanDisplayContainer')[0],
                                        type: 'display',
                                        port: mulWanData,
                                        powerPos: multiWanPosition,
                                        powerIdx: multiWanPowerIdx
                                    };
                                    wanDisplayPort.init(wanDisplayInitData);
                                    setTimeout(function(){
                                        hideWanPortChecking();
                                    },500);
                                    $("#wanPanel").show();
                                    $("#wanSetItems").show();
                                    $("#dualWanSetting .savePortSelWrapper").hide();
                                }
                            }
                            initBandWidthSet();
                            if (gMWanLoadBalanceSupport) {
                                initDnsBalance();
                            }
                        });
                    })
                });
            }
            id("wanOff").onclick = function(){
                $("#wanPanel").hide();
                $("#wanSetItems").hide();
                $("#dualWanSetting .savePortSelWrapper").show();
            }
            id("saveWanSelOpen").onclick = function(){
                if(id("wanOn").checked == true){
                    return;
                }else{
                    setLoadingId("saveWanSelOpen");
                    hsLoading(true);
                    var data = {};
                    data["port_manage"] = {};
                    for(var i=0;i<wanNum;i++){
                        data["port_manage"]["mwan_"+(i+1)] = {};
                        data["port_manage"]["mwan_"+(i+1)]["enable"] = "0";
                    }
                    iptvConflictCheck(function(iptvConflict){
                        if(iptvConflict){
                            showConfirm("关闭双WAN口后，IPTV口设置将失效,确定关闭吗?",function(res){
                                if(res){
                                    $.modify(data, function(result){
                                        if(result[ERR_CODE] == ENONE){
                                            showCloseSuccess();
                                            initPortConfig();
                                            hsLoading(false);
                                        }else{
                                            // 设置失败，请重新尝试
                                            hsLoading(false);
                                            showWanInfo("设置失败,请重新尝试","知道了");
                                        }
                                    })
                                }else{
                                    hsLoading(false);
                                    initPortConfig();
                                }
                            })
                        }else{
                            $.modify(data,function(res){
                                if(res[ERR_CODE] == ENONE){
                                    showCloseSuccess();
                                    initPortConfig();
                                    hsLoading(false);
                                }else{
                                    hsLoading(false);
                                    showWanInfo("关闭失败","知道了");
                                }
                            });
                        }
                    })
                }
            }
            id("reSelWanPort").onclick = function(){
                // 设置失败时在copyPortArray中保存之前选择的端口数据
                transformLanPortState(mulWanData,true);
                var copyPortArray = JSON.parse(JSON.stringify(mulWanData));
                if(typeof mulWanData != undefined){
                    for(var i = 0;i<mulWanData.length;i++){
                        if(mulWanData[i].state != "disable"){
                            mulWanData[i].state = "normal";
                            mulWanData[i].name = "LAN";
                        }
                    }
                    showWanSetDialog(proName,mulWanData,multiWanPosition,copyPortArray);
                }
            }
            id("saveDualWan").onclick = function(){
                if(id("wanOn").checked){
                    showConfirm("双WAN口仅可用于宽带接入，若连接终端，将无法正常上网或管理路由器，确定保存吗?",function(res){
                        if(res){
                            var MINBANDWIDTH = 1;
                            var MAXBANDWIDTH = 100000;
                            var data = {};
                            data[uciPortConfig.fileName] = {};
                            data["mwan_load_balance"] = {};
                            for(var i=0;i<wanNum;i++){
                                var wanIdx = -1;
                                var wanPort = -1;
                                for(var j=0;j<mulWanData.length;j++){
                                    if(mulWanData[j].name.toUpperCase()=="WAN" + (i+1)){
                                        wanIdx = j;
                                    }
                                }
                                wanPort = wanIdx;
                                data[uciPortConfig.fileName]["mwan_"+(i+1)] = {};
                                data[uciPortConfig.fileName]["mwan_"+(i+1)][uciPortConfig.optName.enable] = uciPortConfig.optValue.enable.on;
                                data[uciPortConfig.fileName]["mwan_"+(i+1)][uciPortConfig.optName.wanPhy] = wanPort + "";
                            }
                            data["mwan_load_balance"]["band_width"] = {};
                            data["mwan_load_balance"]["band_width"]["mwan_mode"] = bandWidthUserSet;
                            if(bandWidthUserSet == "manual"){
                                data["mwan_load_balance"]["band_width"]["wan1_band_width"] = $("#wanBandWidth1").val();
                                data["mwan_load_balance"]["band_width"]["wan2_band_width"] = $("#wanBandWidth2").val();
                            }
                            if (gMWanLoadBalanceSupport) {
                                data["mwan_load_balance"]["basic"] = {};
                                data["mwan_load_balance"]["basic"]["balance_mode"] = dnsBalanceSet;
                            }
                            setLoadingId("saveDualWan");
                            hsLoading(true);
                            $.modify(data, function(result){
                                if(result[ERR_CODE] == ENONE){
                                    multiWanOpen = true;
                                    hsLoading(false);
                                    setTimeout(function(){
                                        hideWanPortChecking();
                                        initPortConfig();
                                    },1000);
                                }else if(result[ERR_CODE] == EWDSENABLE){
                                    hsLoading(false);
                                    showAlert(errStr.mulWanOpenConflict);
                                }else if(result[ERR_CODE] == EDHCPSOFF){
                                    hsLoading(false);
                                    showAlert(errStr.mulWanOpenConflictDhcps);
                                }else{
                                    // 设置失败，请重新尝试
                                    hsLoading(false);
                                    showWanInfo("设置失败,请重新尝试","知道了");
                                }
                            })
                        }
                    });
                }else{
                    return;
                }
            }
        }
        // 显示WAN口设置的Dialog
        function showWanSetDialog(routerName,portArray,power_pos,copyPortArray) {
            var divCon = id("wanSetDialogWrapper");
            if(divCon == null){
                divCon = document.createElement("div");
                divCon.className = "wanSetDialogWrapper";
                divCon.id = "wanSetDialogWrapper";
                document.body.appendChild(divCon);
            }else{
                emptyNodes(divCon);
            }
            divCon.innerHTML =
                '<div class="portSetDialog" id="wanSetDialog">' +
                    '<div class="popHd">' +
                        '<i class="closeImg" id="closePop"></i>' +
                        '<label id="popTitle" class="title">'+ "双WAN口设置" + '</label>' +
                    '</div>' +
                    '<div id="wanPortWrapper">' +
                        '<p class="portDesc">' + "请选择2个端口作为WAN口" + '</p>' +
                        '<p id="wanAutoSel">' + "原有WAN口已自动选择" + '</p>' +
                        '<p id="wanPortRouter">'+ routerName + '</p>' +
                        '<div class="wanSettingContainer">' +
                        '</div>' +
                        '<div class="inputBtnWrapper">' +
                            '<input id="wanSelConfirmBtn" value="完成" class="btnA subBtn confirmBtn" readonly/>' +
                            '<input id="wanSelCancelBtn" value="取消" class="btnA subBtn cancelBtn" readonly/>' +
                        '</div>' +
                    '</div>' +
                '</div>';
            wanSetPort = new PortConfig();
            var wanSettingInitData = {
                element: $('.wanSettingContainer')[0],
                type: 'setting',
                port: portArray,
                powerPos: power_pos,
                powerIdx: multiWanPowerIdx,
                callback:wanClickHandler
            };
            wanSetPort.init(wanSettingInitData);
            id("closePop").onclick = function(){
                hideCoverB(function(){
                    wanSetPort.destroy();
                    mulWanData = copyPortArray;
                    wanDisplayPort.initData.port = mulWanData;
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    if($("#wanSetItems").css("display") == "none"){
                        id("wanOff").checked = true;
                    }
                    emptyNodes(divCon);
                });
            };
            id("wanSelCancelBtn").onclick = function(){
                hideCoverB(function(){
                    wanSetPort.destroy();
                    mulWanData = copyPortArray;
                    wanDisplayPort.initData.port = mulWanData;
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    if($("#wanSetItems").css("display") == "none"){
                        id("wanOff").checked = true;
                    }
                    emptyNodes(divCon);
                });
            };
            id("wanSelConfirmBtn").onclick = function(){
                var activePort = 0;
                for(var i=0;i<mulWanData.length;i++){
                    if(mulWanData[i].name.slice(0,3).toUpperCase() == "WAN"){
                        activePort++;
                    }
                }
                if(activePort == 2){
                    transformLanPortState(mulWanData,false);
                    hideCoverB(function(){
                        wanDisplayPort.refresh();
                        $("#wanPanel").show();
                        $("#wanSetItems").show();
                        $("#dualWanSetting .savePortSelWrapper").hide();
                        divCon.style.visibility = "hidden";
                        divCon.style.top = "-9999px";
                        emptyNodes(divCon);
                    });
                }else{
                    return;
                }
            }
            showCoverB(function(){
                divCon.style.visibility = "visible";
                divCon.style.top = "80px";
                $("#CoverB").css("opacity", "0.45");
                $("#CoverB").css("background","#000000");
                setWanConfirmBtnStyle(2);
            })
        }
        // 双WAN口设置端口方法绑定
        function wanClickHandler(portInfo){
            var activeCount = 0;
            for(var i=0;i<mulWanData.length;i++){
                if(mulWanData[i].state == "active"){
                    activeCount++;
                }
            }
            switch (portInfo.state) {
                case 'disable':
                    return;
                case 'normal':
                    mulWanData[portInfo.index].name = "LAN";
                    for(var i=0;i<mulWanData.length;i++){
                        if(mulWanData[i].state == "active"){
                            mulWanData[i].name = "WAN1";
                        }
                    }
                    setWanConfirmBtnStyle(2);
                    wanSetPort.refresh();
                    break;
                case 'active':
                    if(activeCount <= 2){
                        mulWanData[portInfo.index].name = "WAN" + activeCount;
                    }else{
                        mulWanData[portInfo.index].state = "normal";
                        showPortLimit();
                    }
                    setWanConfirmBtnStyle(2);
                    wanSetPort.refresh();
                    break;
            }
        }
        // 可选WAN口数上限提示
        function showPortLimit(){
            $("#wanSetDialogWrapper").css("z-index","1006");
            $("#lagSetDialogWrapper").css("z-index","1006");
            showWanInfo("只能选择2个端口","知道了",function(){
                showCoverB(function(){
                    $("#CoverB").css("opacity", "0.45");
                    $("#CoverB").css("background","#000000");
                    $("#wanSetDialogWrapper").css("z-index","1009");
                    $("#lagSetDialogWrapper").css("z-index","1009");
                });
            });
        }
        // 原有设置端口已被占用提示
        function showPortBusy(){
            $("#wanSetDialogWrapper").css("z-index","1006");
            $("#lagSetDialogWrapper").css("z-index","1006");
            showWanInfo("原有设置的端口已被占用","知道了",function(){
                showCoverB(function(){
                    $("#CoverB").css("opacity", "0.45");
                    $("#CoverB").css("background","#000000");
                    $("#wanSetDialogWrapper").css("z-index","1009");
                    $("#lagSetDialogWrapper").css("z-index","1009");
                });
            });
        }
        function setWanConfirmBtnStyle(activePortNum){
            var activeCount = 0;
            for(var i=0;i<mulWanData.length;i++){
                if(mulWanData[i].state == "active"){
                    activeCount++;
                }
            }
            if(activeCount >= activePortNum){
                $(".inputBtnWrapper .confirmBtn").css("background-color","#FBEB1A");
            }else{
                $(".inputBtnWrapper .confirmBtn").css("background-color","#D9D9D9");
            }
        }
        // 显示WAN口正在检测/正在设置/设置成功Dialog
        function showWanPortChecking(str,imgStr){
            var divCon = id("wanCheckingWrapper");
            if(divCon == null){
                divCon = document.createElement("div");
                divCon.className = "LoadConCover";
                divCon.id = "wanCheckingWrapper";
                document.body.appendChild(divCon);
            }else{
                emptyNodes(divCon);
            }
            divCon.innerHTML =
                '<div class="coverLoadCon" id="wanChecking">' +
                    '<i class="coverLoading"></i>' +
                    '<p class="coverLoadNote">' + str + '</p>' +
                '</div>';
            if(imgStr == "success"){
                divCon.innerHTML =
                    '<div class="coverLoadCon" id="wanChecking">' +
                        '<i class="coverSuccess"></i>' +
                        '<p class="coverLoadNote">' + str + '</p>' +
                    '</div>';
            }
            showCoverB(function(){
                divCon.style.visibility = "visible";
                divCon.style.top = "189px";
                $("#CoverB").css("opacity", "0.45");
                $("#CoverB").css("background","#000000");
            })
        }
        // 隐藏正在设置/正在检测/设置成功Dialog
        function hideWanPortChecking(){
            hideCoverB(function(){
                var divCon = id("wanCheckingWrapper");
                if(divCon!=null){
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    emptyNodes(divCon);
                }
            })
        }
        // 显示提示信息Dialog
        function showWanInfo(titleStr,btnStr,callBack){
            var divCon = id("wanInfoWrapper");
            if(divCon == null){
                divCon = document.createElement("div");
                divCon.className = "wanInfoWrapper";
                divCon.id = "wanInfoWrapper";
                document.body.appendChild(divCon);
            }else{
                emptyNodes(divCon);
            }
            divCon.innerHTML =
                '<div class="wanInfo">' +
                    '<p class="titleInfo">' + titleStr + '</p>' +
                    '<input id="infoBtn" type="button" value="'+ btnStr + '" class="btnA subBtn"' +
                '</div>';
            id("infoBtn").onclick = function(){
                hideWanInfo(callBack);
            }
            showCoverB(function(){
                divCon.style.visibility = "visible";
                divCon.style.top = "185px";
                $("#CoverB").css("opacity", "0.45");
                $("#CoverB").css("background","#000000");
            })
        }
        // 隐藏提示信息Dialog
        function hideWanInfo(callBack){
            hideCoverB(function(){
                var divCon = id("wanInfoWrapper");
                if(divCon!=null){
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    emptyNodes(divCon);
                }
            })
            if(typeof callBack == "function"){
                callBack();
            }
        }
        // 显示关闭成功Dialog
        function showCloseSuccess(){
            var divCon = id("wanCloseWrapper");
            if(divCon == null){
                divCon = document.createElement("div");
                divCon.className = "LoadConCover";
                divCon.id = "wanCloseWrapper";
                document.body.appendChild(divCon);
            }else{
                emptyNodes(divCon);
            }
            divCon.innerHTML =
                '<div class="wanCloseSuccess" id="wanCloseSuccess">' +
                    '<i class="coverSuccess"></i>' +
                    '<p class="wanCloseNote">关闭成功。</p>' +
                    '<p class="wanCloseInfo">为保证正常上网，请检查WAN口接线情况和上网设置参数是否正确。</p>' +
                    '<div class="closeBtnArea">' +
                        '<input type="button" id="linkToSet" class="btnA subBtn" value="前往上网设置"/>' +
                        '<input type="button" id="closeCancelBtn" class="btnA subBtn" value="取消"/>' +
                    '</div>' +
                '</div>';
            id("linkToSet").onclick = function(){
                hideCloseSuccess();
                $("#network_rsMenu").click();
            }
            id("closeCancelBtn").onclick = hideCloseSuccess;
            showCoverB(function(){
                divCon.style.visibility = "visible";
                divCon.style.top = "189px";
                $("#CoverB").css("opacity", "0.45");
                $("#CoverB").css("background","#000000");
            })
        }
        // 隐藏关闭成功Dialog
        function hideCloseSuccess(){
            hideCoverB(function(){
                var divCon = id("wanCloseWrapper");
                if(divCon!=null){
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    emptyNodes(divCon);
                }
            })
        }
        function wanCheckWDS(callBack)
        {
            var rqData = {};

            if (gSysModeSupport) {
                rqData[uciSystem.fileName] = {};
                rqData[uciSystem.fileName][KEY_NAME] = uciSystem.secName.sysMode;
            } else {
                rqData[uciWireless.fileName] = {};
                rqData[uciWireless.fileName][KEY_NAME] = [uciWireless.dynData.wds_2g,uciWireless.dynData.wds_5g];
            }

            $.query(rqData, function(result){
                if (result[ERR_CODE] == ENONE) {
                    if (gSysModeSupport) {
                        var sysMode = result[uciSystem.fileName][uciSystem.secName.sysMode][uciSystem.optName.mode];
                        if (uciSystem.optValue.sysMode.apMode == sysMode) {
                            showAlert(label.mulWanApTip);
                            id("wanOff").checked = true;
                            return;
                        } else if (uciSystem.optValue.sysMode.wdsMode == sysMode) {
                            showAlert(label.mulWanWDSTip1);
                            id("wanOff").checked = true;
                            return;
                        }
                    } else if (result[uciWireless.fileName][uciWireless.dynData.wds_2g][uciWireless.dynOptName.enable] == uciWireless.dynOptValue.enable.on ||
                               result[uciWireless.fileName][uciWireless.dynData.wds_5g][uciWireless.dynOptName.enable] == uciWireless.dynOptValue.enable.on) {
                        showAlert(label.mulWanWDSTip);
                        id("wanOff").checked = true;
                        return;
                    }
                }

                typeof callBack == "function" && callBack();
            });
        }
        var wanNum = 2; // 多WAN功能支持的WAN口数量
        var mulWanData = [];     // 当前多WAN设置对应数据
        var multiWanPosition = "left"; // 主路由的电源位置
        var multiWanPowerIdx = 0;       // 电源相对端口的偏移
        var wanDisplayPort = null; // 多WAN显示时对应的端口对象
        var capMac = ""; // 主路由对应MAC地址
        var capName = ""; // 主路由对应设备名称
        var wanSetPort = null; // WAN口设置时对应的端口对象
        var multiWanOpen = false;
        var bandWidthUserSet = "";
        var dnsBalanceSet = "";
        var dnsBalanceOptions;
        var curSysMode = uciSystem.optValue.sysMode.routerMode;
        var curDhcpdStatus;

        // SFP口速率设置相关
        function initSFPModule(resData){
            var res = JSON.parse(JSON.stringify(resData));
            initSFPRate(res,refreshSFPTable);
            sfpBtnInit();
        }
        function initSFPRate(resData,callBack){
            // 请求当前dev_info列表
            routerSFPList = [];
            var deviceList = resData["devRes"];
            var allOptions = [
                    {str:"自动(默认)",value:"auto"},
                    {str:"100M",value:"100M"},
                    {str:"1G",value:"1000M"},
                    {str:"2.5G",value:"2.5G"},
                    {str:"5G",value:"5G"},
                    {str:"10G",value:"10G"}
            ];
            for(var i=0;i<deviceList.length;i++){
                if(checkSupportFeature(deviceList[i],'sfp')){
                    if(deviceList[i]["cap"] == 1){
                        //主路由数据表显示
                        for(var j=0;j < deviceList[i]["phy_info"].length;j++){
                            if(deviceList[i]["phy_info"][j].type == "SFP" && deviceList[i]["online"] == uciPortConfig.dynOptValue.online.online){
                                var sfpRate = deviceList[i]["phy_info"][j]["speed"];
                                var rateSelectList = JSON.parse(JSON.stringify(initRateOptions(deviceList[i].sfp_capability,allOptions)));
                                routerSFPList.push({"routerMac":deviceList[i]["mac"],"sfpRate":{"value":sfpRate,"selectList":rateSelectList},"routerName":deviceList[i]["name"] + " " +"(主路由)"});
                                break;
                            }
                        }
                    }else{
                        for(var j=0;j<deviceList[i]["phy_info"].length;j++){
                            if(deviceList[i]["phy_info"][j].type == "SFP" && deviceList[i]["online"] == uciPortConfig.dynOptValue.online.online){
                                var sfpRate = deviceList[i]["phy_info"][j]["speed"];
                                var rateSelectList = JSON.parse(JSON.stringify(initRateOptions(deviceList[i].sfp_capability,allOptions)));
                                routerSFPList.unshift({"routerMac":deviceList[i]["mac"],"sfpRate":{"value":sfpRate,"selectList":rateSelectList},"routerName":deviceList[i]["name"]});
                                break;
                            }
                        }
                    }
                }
            }
            callBack();
        }
        function refreshSFPTable(){
            function rateChange(value,con){
                var dataIndex = parseInt($(con).attr("id").slice(10));
                routerSFPList[dataIndex]["sfpRate"]["value"] = value;
            }
            routerSFPGrid = new DataGrid();
            routerSFPGrid.init({
                id:"SFPRateSetTbl",
                data:routerSFPList,
                hasSelBox:false,
                edit:false,
                head:[{field:"路由名称", width:445.5},
                    {field:"SFP口速率", width:186.5}],
                list:[{edit:false, name:"routerName", type:"str"},
                    {edit:false, name:"sfpRate", type:"selectEdit",func: rateChange}],
                    niceScroll:gBasicRouteSetRNiceScroll
            });
            routerSFPGrid.setDataSource(routerSFPList);
            routerSFPGrid.refresh(routerSFPGrid.getPageNum());
        }
        function initRateOptions(rateList,allOptions){
            var options = [];
            for(var i = 0;i<rateList.length;i++){
                for(var j=0;j<allOptions.length;j++){
                    if(rateList[i] == allOptions[j]["value"]){
                        options.push(allOptions[j]);
                        break;
                    }
                }
            }
            return options;
        }
        function sfpBtnInit(){
            id("saveSFPRate").onclick = function(){
                if(routerSFPList.length > 0){
                    setLoadingId("saveSFPRate");
			        hsLoading(true);
                    var data = {};
                    data["port_manage"] = {};
                    for(var i=0;i<routerSFPList.length;i++){
                        data["port_manage"][routerSFPList[i]["routerMac"]] = {};
                        data["port_manage"][routerSFPList[i]["routerMac"]]["device"] = routerSFPList[i]["routerMac"];
                        data["port_manage"][routerSFPList[i]["routerMac"]]["speed_list"] = [routerSFPList[i]["sfpRate"]["value"]];
                    }
                    $.modify(data, function(result){
                        if(result[ERR_CODE] == ENONE){
                            hsLoading(false);
                        }
                    });
                }
            }
        }
        var routerSFPGrid = null; // SFP速率对应的表格对象
        var routerSFPList = new Array(); // SFP口速率对应的表格数据

        /* 端口聚合 */
        /* 端口聚合页面初始化 */
        function reBaseLagData(currentLagList,deviceList,lagIdx,devIdx){
            var copyData = JSON.parse(JSON.stringify(deviceList));
            for(var i=0;i<currentLagList[lagIdx]["lag_phy"].length;i++){
                var portIdx = currentLagList[lagIdx]["lag_phy"][i];
                if(copyData[devIdx]["phy_info"][portIdx]["role"] == "lan"){
                    copyData[devIdx]["phy_info"][portIdx]["role"] = "lag";
                }
            }
            return copyData;
        }
        function initLagPortState(phyInfo,portData){
            for(var i=0;i<phyInfo.length;i++){
                if(phyInfo[i]["type"] == "SFP" || portData[i].rate == "2.5GE" || portData[i].rate == "10GE"){
                    portData[i].state = "disable";
                }
            }
        }
        function refreshLagSetByInitData(deviceList,lagInitDataList){
            $("#lagRouterLists").html("");
            for(var lagSetIdx=0;lagSetIdx<lagInitDataList.length;lagSetIdx++){
                var htmlStr =
                '<div class="lagRouterItem">'+
                    '<div class="routerSelArea">' +
                        '<label class="routerSelDesc">选择路由</label>' +
                        '<li class="textCon routerSelLi" id="routerSelLi' + lagSetIdx + '">' +
                            '<span id="routerNameSel' + lagSetIdx + '" ' + 'class="select routerNameSel">' +
                                '<span class="value hsValueA"></span>' +
                                '<i class="arrow arrowWzd"></i>' +
                            '</span>' +
                        '</li>' +
                        '<i class="deletePort"></i>' +
                    '</div>' +
                    '<div class="lagSettingContainer">' +
                    '</div>' +
                '</div>';
                $("#lagRouterLists").append(htmlStr);
                lagInitDataList[lagSetIdx]["lagInitData"]["element"] = $('#lagRouterLists').children(':last-child').find(' .lagSettingContainer')[0];
                lagInitDataList[lagSetIdx]["lagPortConfig"].init(lagInitDataList[lagSetIdx]["lagInitData"]);
            }
            initRouterLists(deviceList,lagInitDataList);
            initRouterDelBtns(deviceList,lagInitDataList);
            initRouterAddBtns(deviceList,lagInitDataList);
            setLagConfirmBtnStyle();
        }
        function refreshLagDisplayByInitData(lagInitDataList){
            $("#lagDisplayList").html("");
            for(var i=0;i<lagInitDataList.length;i++){
                var htmlStr = 
                    '<div class="lagDisplayItem">'+
                        '<label class="routerName">'+ lagInitDataList[i]["name"] +'</label>'+
                        '<div class="togetherDisplayContainer"></div>'+
                        '<div class="portInfo">'+
                            '<i class="errIcon"></i>'+
                            '<label>设备已离线，请检查路由器连接或重新选择端口</label>'+
                        '</div>'+
                    '</div>';
                $("#lagDisplayList").append(htmlStr);
                if(lagInitDataList[i]["online"]){
                    $('#lagDisplayList').children(':last-child').find('.portInfo').hide();
                    $('#lagDisplayList').children(':last-child').addClass("onlinePadding");
                }else{
                    var htmlStr = $('#lagDisplayList').children(':last-child').find('.routerName').html();
                    $('#lagDisplayList').children(':last-child').find('.routerName').html(htmlStr + " (已离线)");
                }
                transformLanPortState(lagInitDataList[i]["lagInitData"]["port"],false);
                var lagDisplayInitData = {
                    element: $('#lagDisplayList').children(':last-child').find(' .togetherDisplayContainer')[0],
                    type: 'display',
                    port: lagInitDataList[i]["lagInitData"]["port"],
                    powerPos: lagInitDataList[i]["lagInitData"]["powerPos"],
                    powerIdx: lagInitDataList[i]["lagInitData"]["powerIdx"]
                };
                var lagPortConfig = new PortConfig();
                lagPortConfig.init(lagDisplayInitData);
                lagInitDataList[i]["lagInitData"] = lagDisplayInitData;
                lagInitDataList[i]["lagPortConfig"] = lagPortConfig;
            }
        }
        function addNewLagSet(lagInitDataList,deviceList,currentIdx,showMode){
            var phyInfo = deviceList[currentIdx][uciPortConfig.dynOptName.phyInfo];
            var sfpCapabilityList = deviceList[currentIdx][uciPortConfig.dynOptName.sfpCapability];
            var lagRouterName = deviceList[currentIdx][uciPortConfig.dynOptName.name];
            var lagPowPos = deviceList[currentIdx][uciPortConfig.dynOptName.powerPos];
            var lagPowIdx = deviceList[currentIdx][uciPortConfig.dynOptName.powerIdx];
            var lagMac = deviceList[currentIdx][uciPortConfig.dynOptName.mac];
            var isRouterOnline = deviceList[currentIdx][uciPortConfig.dynOptName.online] === uciPortConfig.dynOptValue.online.online;
            var portData = [];
            initPortData(phyInfo,lagPowPos,"LAG",portData,sfpCapabilityList);
            if(showMode == "display"){
                var htmlStr = 
                    '<div class="lagDisplayItem">'+
                        '<label class="routerName">'+ lagRouterName +'</label>'+
                        '<div class="togetherDisplayContainer"></div>'+
                        '<div class="portInfo">'+
                            '<i class="errIcon"></i>'+
                            '<label>设备已离线，请检查路由器连接或重新选择端口</label>'+
                        '</div>'+
                    '</div>';
                $("#lagDisplayList").append(htmlStr);
                transformLanPortState(portData,false);
                initLagPortState(phyInfo,portData);
                var lagDisplayInitData = {
                    element: $('#lagDisplayList').children(':last-child').find(' .togetherDisplayContainer')[0],
                    type: 'display',
                    port: portData,
                    powerPos: lagPowPos,
                    powerIdx: lagPowIdx
                };
                var lagPortConfig = new PortConfig();
                lagPortConfig.init(lagDisplayInitData);
                if(isRouterOnline){
                    $('#lagDisplayList').children(':last-child').find('.portInfo').hide();
                    $('#lagDisplayList').children(':last-child').addClass("onlinePadding");
                }else{
                    var htmlStr = $('#lagDisplayList').children(':last-child').find('.routerName').html();
                    $('#lagDisplayList').children(':last-child').find('.routerName').html(htmlStr + " (已离线)");
                }
                lagInitDataList.push({
                    name:lagRouterName,
                    mac:lagMac,
                    online: isRouterOnline,
                    lagInitData: lagDisplayInitData,
                    lagPortConfig: lagPortConfig
                })
            }else{
                var lagSetIdx = lagInitDataList.length;
                var htmlStr = 
                    '<div class="lagRouterItem">'+
                        '<div class="routerSelArea">' +
                            '<label class="routerSelDesc">选择路由</label>' +
                            '<li class="textCon routerSelLi" id="routerSelLi' + lagSetIdx + '">' +
                                '<span id="routerNameSel' + lagSetIdx + '" ' + 'class="select routerNameSel">' +
                                    '<span class="value hsValueA"></span>' +
                                    '<i class="arrow arrowWzd"></i>' +
                                '</span>' +
                            '</li>' +
                            '<i class="deletePort"></i>' +
                        '</div>' +
                        '<div class="lagSettingContainer">' +
                        '</div>' +
                    '</div>';
                $("#lagRouterLists").append(htmlStr);
                transformLanPortState(portData,true);
                initLagPortState(phyInfo,portData);
                var lagSetInitData = {
                    element: $('#lagRouterLists').children(':last-child').find(' .lagSettingContainer')[0],
                    type: 'setting',
                    port: portData,
                    powerPos: lagPowPos,
                    powerIdx: lagPowIdx,
                    callback:lagPortClickHandler
                };
                var lagPortConfig = new PortConfig();
                lagPortConfig.init(lagSetInitData);
                lagInitDataList.push({
                    name:lagRouterName,
                    mac:lagMac,
                    online: isRouterOnline,
                    lagInitData: lagSetInitData,
                    lagPortConfig: lagPortConfig
                })
            }
        }
        function refreshLagSet(lagInitDataList,deviceList,currentLagList,showMode){
            lagInitDataList.splice(0,lagInitDataList.length);
            if(showMode == "display"){
                $("#lagDisplayList").html("");
            }else{
                $("#lagRouterLists").html("");
            }
            for(var i=0;i<deviceList.length;i++){
                if(deviceList[i][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap){
                    capMac = deviceList[i]["mac"];
                    capIndex = i;
                }
            }
            for(var i=0;i<currentLagList.length;i++){
                for(var j=0;j<deviceList.length;j++){
                    if(currentLagList[i][uciPortConfig.optName.lagDev].toUpperCase() == deviceList[j]["mac"].toUpperCase()){
                        var rebaseLagData = reBaseLagData(currentLagList,deviceList,i,j);
                        addNewLagSet(lagInitDataList,rebaseLagData,j,showMode);
                        break;
                    }
                }
            }
        }
        function initLagModule(resData){
            lagPortBtnInit();
            var res = JSON.parse(JSON.stringify(resData));
            var deviceList = res["devRes"];
            if(res["lagRes"][uciPortConfig.optName.enable] === uciPortConfig.optValue.enable.off){
                // 端口聚合关闭
                id("togetherOff").checked = true;
                showLagPanel(false);
            }else{
                // 端口聚合开启
                id("togetherOn").checked = true;
                $("#lanTogetherSetting .savePortSelWrapper").hide();
                var currentLagList = res["lagRes"][uciPortConfig.optName.lagList];
                changeCapMacSet(deviceList,currentLagList);
                refreshLagSet(lagInitDataList,deviceList,currentLagList,"display");
            }
        }
        function changeCapMacSet(deviceList,lagDevList){
            for(var i=0;i<deviceList.length;i++){
                if(deviceList[i][uciPortConfig.dynOptName.cap] == uciPortConfig.dynOptValue.cap.cap){
                    capIndex = i;
                    capMac = deviceList[capIndex][uciPortConfig.dynOptName.mac];
                }
            }
            for(var i=0;i<lagDevList.length;i++){
                if(lagDevList[i]["lag_dev"].toUpperCase() == "FF-FF-FF-FF-FF-FF"){
                    lagDevList[i]["lag_dev"] = capMac.toUpperCase();
                }else if(lagDevList[i]["lag_dev"] == capMac.toUpperCase()){
                    lagDevList[i]["lag_dev"] = "FF-FF-FF-FF-FF-FF";
                }
            }
        }
        function showLagPanel(tag){
            if(tag){
                $("#lanTogetherSetting .savePortSelWrapper").hide();
                $("#togetherPanel").show();
            }else{
                $("#lanTogetherSetting .savePortSelWrapper").show();
                $("#togetherPanel").hide();
            }
        }
        function checkHasLagPort(deviceList){
            var selectNum = 0;
            var hasLagDevice  = true;
            for(var i=0;i<deviceList.length;i++){
                for(var j=0;j<deviceList[i]["phy_info"].length;j++){
                    if((deviceList[i]["phy_info"][j].role.toUpperCase() == "LAG" || deviceList[i]["phy_info"][j].role.toUpperCase() == "LAN") && deviceList[i]["phy_info"][j].type.toUpperCase() != "SFP"){
                        selectNum++;
                    }
                }
            }
            if(selectNum >= 2){
                hasLagDevice = true;
            }else{
                hasLagDevice = false;
            }
            return hasLagDevice;
        }
        function checkIfLagSet(deviceList,lagDevList){
            if(lagDevList.length > 0){
                var beforeSetSuccess = true;
                for(var i=0;i<lagDevList.length;i++){
                    for(var j=0;j<deviceList.length;j++){
                        if(lagDevList[i]["lag_dev"].toUpperCase() == deviceList[j]["mac"].toUpperCase()){
                            var phyInfoList = deviceList[j][uciPortConfig.dynOptName.phyInfo];
                            var lagPortIdxList = lagDevList[i]["lag_phy"];
                            for(var t=0;t<lagPortIdxList.length;t++){
                                if(phyInfoList[lagPortIdxList[t]].role.toUpperCase() != "LAG" && phyInfoList[lagPortIdxList[t]].role.toUpperCase() != "LAN"){
                                    beforeSetSuccess = false;
                                }
                            }
                        }
                    }
                }
                if(beforeSetSuccess){
                    refreshLagSet(lagInitDataList,deviceList,lagDevList,"display");
                    showLagPanel(true);
                }else{
                    showLagSetDialog(deviceList,lagDevList);
                    showPortBusy();
                }
            }else{
                showLagSetDialog(deviceList,lagDevList);
                $(".addNewLagBtn").click();
                setLagConfirmBtnStyle();
            }
        }
        function checkLagOpenState(deviceList,lagDevList){
            var capIndex = -1;
            changeCapMacSet(deviceList,lagDevList);
            if(!checkHasLagPort(deviceList)){
                showWanInfo("路由可定义端口数不足，请先关闭其他端口定义功能","知道了",function(){
                    id("togetherOff").checked = true;
                });
                return;
            }
            checkIfLagSet(deviceList,lagDevList);
        }
        function lagPortBtnInit(){
            id("togetherOn").onclick = function(){
                showWanPortChecking("正在检测，请稍候...");
                var req = {};
                req[uciPortConfig.fileName] = {};
                req[uciPortConfig.fileName][KEY_TABLE] = [];
                req[uciPortConfig.fileName][KEY_NAME] = [];
                req[uciPortConfig.fileName][KEY_TABLE][0] = uciPortConfig.secType.devInfo;
                req[uciPortConfig.fileName][KEY_NAME][0] = uciPortConfig.secType.lag;
                $.query(req,function(res){
                    hideWanPortChecking();
                    var deviceList = res.port_manage.dev_info;
                    var lagDevList = res.port_manage.lag;
                    checkLagOpenState(deviceList,lagDevList["lag_list"]);
                });
            }
            id("togetherOff").onclick = function(){
                showLagPanel(false);
            }
            id("saveTogetherSel").onclick = function(){
                // 关闭当前端口聚合设置
                if(id("togetherOff").checked == true){
                    setLoadingId("saveTogetherSel");
                    hsLoading(true);
                    var req = {};
                    req[uciPortConfig.fileName] = {};
                    req[uciPortConfig.fileName][uciPortConfig.secType.lag] = {};
                    req[uciPortConfig.fileName][uciPortConfig.secType.lag][uciPortConfig.optName.enable] = uciPortConfig.optValue.enable.off;
                    $.modify(req,function(res){
                        if(res[ERR_CODE] == ENONE){
                            hsLoading(false);
                            initPortConfig();
                            showLagPanel(false);
                        }else{
                            hsLoading(false);
                            showWanInfo("关闭失败","知道了");
                        }
                    });
                }else{
                    return;
                }
            }
            id("saveTogetherPort").onclick = function(){
                if(id("togetherOn").checked == true){
                    setLoadingId("saveTogetherPort");
                    hsLoading(true);
                    var req = {};
                    req[uciPortConfig.fileName] = {};
                    req[uciPortConfig.fileName][KEY_TABLE] = [];
                    req[uciPortConfig.fileName][KEY_TABLE][0] = uciPortConfig.secType.devInfo;
                    $.query(req,function(res){
                        var deviceList = res.port_manage.dev_info;
                        for(var i=0;i<deviceList.length;i++){
                            if(deviceList[i][uciPortConfig.dynOptName.cap] == uciPortConfig.dynOptValue.cap.cap){
                                var capMac = deviceList[i][uciPortConfig.dynOptName.mac];
                                break;
                            }
                        }
                        var reqSave = {};
                        reqSave[uciPortConfig.fileName] = {};
                        reqSave[uciPortConfig.fileName][uciPortConfig.secType.lag] = {};
                        reqSave[uciPortConfig.fileName][uciPortConfig.secType.lag][uciPortConfig.optName.enable] = uciPortConfig.optValue.enable.on;
                        var lagPortToSave = [];
                        for(var i=0;i<lagInitDataList.length;i++){
                            var lagCfg = {};
                            if(lagInitDataList[i]["mac"] == capMac){
                                lagCfg["lag_dev"] = "FF-FF-FF-FF-FF-FF";
                            }else{
                                lagCfg["lag_dev"] = lagInitDataList[i]["mac"].toUpperCase();
                            }
                            lagCfg["lag_phy"] = [];
                            for(var j=0;j<lagInitDataList[i]["lagInitData"]["port"].length;j++){
                                if(lagInitDataList[i]["lagInitData"]["port"][j].state == "active"){
                                    lagCfg["lag_phy"].push(j.toString());
                                }
                            }
                            lagPortToSave.push(lagCfg);
                        }
                        reqSave[uciPortConfig.fileName][uciPortConfig.secType.lag][uciPortConfig.optName.lagList] = lagPortToSave;
                        $.modify(reqSave,function(resCap){
                            if(resCap[ERR_CODE] == ENONE){
                                hsLoading(false);
                                initPortConfig();
                            }else if(resCap[ERR_CODE] == ELAGDIFFERR){
                                hsLoading(false);
                                showWanInfo("不同速率的端口无法聚合，请重新选择","知道了");
                            }else{
                                hsLoading(false);
                                showWanInfo("设置失败，请重新尝试","知道了");
                            }
                        });
                    });
                }else{
                    return;
                }
            }
            id("reSelTogetherPort").onclick = function(){
                queryPortConfigData(function(res) {
                    var deviceList = res["devRes"];
                    var currentLagList = res["lagRes"][uciPortConfig.optName.lagList];
                    changeCapMacSet(deviceList,currentLagList);
                    showLagSetDialog(deviceList,currentLagList);
                    if($("#lagRouterLists").html() == ""){
                        $(".addNewLagBtn").click();
                        setLagConfirmBtnStyle();
                    }
                });
            }
        }
        function setLagConfirmBtnStyle(){
            var lagSetted = true;
            for(var i=0;i<lagInitDataList.length;i++){
                var activeCount = 0;
                for(var j=0;j<lagInitDataList[i]["lagInitData"]["port"].length;j++){
                    if(lagInitDataList[i]["lagInitData"]["port"][j].state == "active"){
                        activeCount++;
                    }
                }
                if(activeCount < 2){
                    lagSetted = false;
                }
            }
            if(lagSetted){
                $("#lagSelConfirmBtn").removeClass("unSelectableConfirm").addClass("selectableConfirm");
            }else{
                $("#lagSelConfirmBtn").removeClass("selectableConfirm").addClass("unSelectableConfirm");
            }
        }
        function rebuildRouterList(routerList,lagInitDataList,lagSetIdx){
            var routerItemList = [];
            var macDelList = [];
            for(var i=0;i<lagInitDataList.length;i++){
                if(i!=lagSetIdx){
                    macDelList.push(lagInitDataList[i]["mac"]);
                }
            }
            for(var i=0;i<routerList.length;i++){
                if($.inArray(routerList[i]["value"],macDelList) == -1){
                    routerItemList.push(routerList[i]);
                }
            }
            return routerItemList;
        }
        function initRouterDelBtns(deviceList,lagInitDataList){
            if(lagInitDataList.length <= 1){
                $(".lagRouterItem .deletePort").hide();
            }else{
                $(".lagRouterItem .deletePort").show();
                $(".lagRouterItem .deletePort").unbind("click");
                $(".lagRouterItem .deletePort").click(function(){
                    var index = $(this).parent().parent().index();
                    lagInitDataList.splice(index,1);
                    refreshLagSetByInitData(deviceList,lagInitDataList);
                });
            }
        }
        function initRouterLists(deviceList,lagInitDataList){
            var routerList = [];
            for(var i=0;i<deviceList.length;i++){
                if(checkSupportFeature(deviceList[i],'lag')){
                    if(deviceList[i][uciPortConfig.dynOptName.cap] == uciPortConfig.dynOptValue.cap.cap){
                        routerList.push({str:deviceList[i][uciPortConfig.dynOptName.name] + "(主路由)",value:deviceList[i][uciPortConfig.dynOptName.mac]});
                    }else{
                        routerList.push({str:deviceList[i][uciPortConfig.dynOptName.name],value:deviceList[i][uciPortConfig.dynOptName.mac]});
                    }
                }else{
                    continue;
                }
            }
            for(var i=0;i<lagInitDataList.length;i++){
                (function(currentIdx){
                    function routerNameSelChange(value){
                        var routerIdx = -1;
                        for(var i=0;i<deviceList.length;i++){
                            if(deviceList[i]["mac"] == value){
                                routerIdx = i;
                                break;
                            }
                        }
                        var routerName = deviceList[routerIdx]["name"];
                        var phyInfoList = deviceList[routerIdx]["phy_info"];
                        var powerPos = deviceList[routerIdx]["power_pos"];
                        var powerIdx = deviceList[routerIdx][uciPortConfig.dynOptName.powerIdx];
                        var lagPortMac = deviceList[routerIdx]["mac"];
                        var isRouterOnline = deviceList[routerIdx][uciPortConfig.dynOptName.online] === uciPortConfig.dynOptValue.online.online;
                        var sfpCapabilityList = deviceList[routerIdx][uciPortConfig.dynOptName.sfpCapability];
                        var portData = [];
                        initPortData(phyInfoList,powerPos,"LAG",portData,sfpCapabilityList);
                        initLagPortState(phyInfoList,portData);
                        lagInitDataList[lagSetIdx].name = routerName;
                        lagInitDataList[lagSetIdx].lagInitData.port = portData;
                        lagInitDataList[lagSetIdx].lagInitData.powerPos = powerPos;
                        lagInitDataList[lagSetIdx].lagInitData.powerIdx = powerIdx;
                        lagInitDataList[lagSetIdx].mac = lagPortMac;
                        lagInitDataList[lagSetIdx].online = isRouterOnline;
                        lagInitDataList[lagSetIdx].lagPortConfig.refresh();
                        initRouterLists(deviceList,lagInitDataList);
                        setLagConfirmBtnStyle();
                    }
                    var routerListItem = rebuildRouterList(routerList,lagInitDataList,currentIdx);
                    var lagSetIdx = currentIdx;
                    selectInit("routerNameSel" + lagSetIdx,routerListItem, lagInitDataList[lagSetIdx]["mac"], routerNameSelChange, 32);
                })(i);
            }
        }
        function checkSupportFeature(devCfg,feature){
            if(($.inArray(feature,devCfg[uciPortConfig.dynOptName.subFunc])) != -1){
                return true;
            }else{
                return false;
            }
        }
        function initRouterAddBtns(deviceList,lagInitDataList){
            function addLagRouterHandler(deviceList,lagInitDataList){
                var macList = [];
                for(var i=0;i<lagInitDataList.length;i++){
                    macList.push(lagInitDataList[i]["mac"]);
                }
                for(var i=0;i<deviceList.length;i++){
                    if($.inArray(deviceList[i]["mac"],macList) == -1 && checkSupportFeature(deviceList[i],'lag')){
                        addNewLagSet(lagInitDataList,deviceList,i,"setting");
                        return true;
                    }
                }
                return false;
            }
            var unsettedDev = 0;
            var macList = [];
            for(var i=0;i<lagInitDataList.length;i++){
                macList.push(lagInitDataList[i]["mac"]);
            }
            for(var i=0;i<deviceList.length;i++){
                if($.inArray(deviceList[i]["mac"],macList) == -1 && checkSupportFeature(deviceList[i],'lag')){
                    unsettedDev++;
                }
            }
            if(unsettedDev == 0){
                $(".addNewLagSetWrap").hide();
            }else{
                $(".addNewLagSetWrap").show();
            }
            $(".addNewLagBtn").unbind("click");
            $(".addNewLagBtn").click(function(){
                if(addLagRouterHandler(deviceList,lagInitDataList)){
                    initRouterLists(deviceList,lagInitDataList);
                    initRouterDelBtns(deviceList,lagInitDataList);
                    initRouterAddBtns(deviceList,lagInitDataList);
                    setLagConfirmBtnStyle();
                }
            })
        }
        // 端口设置Dialog
        function showLagSetDialog(deviceList,currentLagList){
            var divCon = id("lagSetDialogWrapper");
            if(divCon == null){
                divCon = document.createElement("div");
                divCon.className = "lagSetDialogWrapper";
                divCon.id = "lagSetDialogWrapper";
                document.body.appendChild(divCon);
            }else{
                emptyNodes(divCon);
            }
            divCon.innerHTML =
                '<div class="portSetDialog" id="lagSetDialog">' +
                    '<div class="popHd">' +
                        '<i class="closeImg" id="closePop"></i>' +
                        '<label id="popTitle" class="title">'+ "端口聚合设置" + '</label>' +
                    '</div>' +
                    '<div id="lagPortWrapper">' +
                        '<p class="portDesc">' + "请在同一台路由器上选择需要聚合的2个LAN口" +
                            '<span class="portDetail">'+
                                "(只能聚合同形态GE口)" +
                            '</span>' +
                        '</p>' +
                        '<div id="lagRouterLists">'+
                        '</div>'+
                        '<div class="addNewLagSetWrap">'+
                            '<span class="addNewLagBtn">+添加聚合口</span>'+
                            '<span class="addNewLagInfo">每个路由器可分别设置端口聚合</span>'+
                        '</div>'+
                        '<div class="inputBtnWrapper">' +
                            '<input id="lagSelConfirmBtn" value="完成" class="btnA subBtn confirmBtn" readonly/>' +
                            '<input id="lagSelCancelBtn" value="取消" class="btnA subBtn cancelBtn" readonly/>' +
                        '</div>' +
                    '</div>' +
                '</div>';
            var cancelDataList = JSON.parse(JSON.stringify(lagInitDataList));
            refreshLagSet(lagInitDataList,deviceList,currentLagList,"setting");
            initRouterLists(deviceList,lagInitDataList);
            initRouterDelBtns(deviceList,lagInitDataList);
            initRouterAddBtns(deviceList,lagInitDataList);
            id("closePop").onclick = function(){
                hideCoverB(function(){
                    lagInitDataList = cancelDataList;
                    if($("#togetherPanel").css("display") == "none"){
                        id("togetherOff").checked = true;
                    }
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    emptyNodes(divCon);
                });
            };
            id("lagSelCancelBtn").onclick = function(){
                hideCoverB(function(){
                    lagInitDataList = cancelDataList;
                    if($("#togetherPanel").css("display") == "none"){
                        id("togetherOff").checked = true;
                    }
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    emptyNodes(divCon);
                });
            };
            id("lagSelConfirmBtn").onclick = function(){
                if($(this).hasClass("selectableConfirm")){
                    showLagPanel(true);
                    refreshLagDisplayByInitData(lagInitDataList);
                }else{
                    return;
                }
                hideCoverB(function(){
                    divCon.style.visibility = "hidden";
                    divCon.style.top = "-9999px";
                    emptyNodes(divCon);
                });
            }
            showCoverB(function(){
                divCon.style.visibility = "visible";
                divCon.style.top = "80px";
                $("#CoverB").css("opacity", "0.45");
                $("#CoverB").css("background","#000000");
				setLagConfirmBtnStyle();
            })
        }
        // 端口聚合端口方法绑定
        function lagPortClickHandler(portInfo){
            var index = $(this.element).parent().index();
            var activeCount = 0;
            for(var i=0;i<this.port.length;i++){
                if(this.port[i].state == "active"){
                    activeCount++;
                }
            }
            switch (portInfo.state) {
                case 'disable':
                    return;
                case 'normal':
                    this.port[portInfo.index].name = "LAN";
                    lagInitDataList[index]["lagPortConfig"].refresh();
                    break;
                case 'active':
                    if(activeCount <= 2){
                        this.port[portInfo.index].name = "聚合口";
                    }else{
                        this.port[portInfo.index].state = "normal";
                        showPortLimit();
                    }
                    lagInitDataList[index]["lagPortConfig"].refresh();
                    break;
            }
            setLagConfirmBtnStyle();
        }
        // 端口聚合设置端口被占用
        function showPortUsed(){
            showWanInfo("只能选择2个端口","知道了",function(){
                showCoverB(function(){
                    $("#CoverB").css("opacity", "0.45");
                    $("#CoverB").css("background","#000000");
                    $("lagSetDialogWrapper").css("z-index","1009");
                });
            });
        }
        var lagInitDataList = [];

        // @ Module: Port Config
        // @ Author: Zhou Yang
        // @ Data:   2021-03-30

        var labelText = {
            mixedText: "上网和IPTV单线复用",
            aloneText: "上网和IPTV分线传输",
            offlineText: "（已离线）",
            mixedTip: "IPTV口用于连接机顶盒",
            aloneTip: "IPTV上联口用于连接光猫，IPTV口用于连接机顶盒",
            offlineTip: "<i class='offlineImg'></i>设备已离线，请检查路由器连接或重新选择端口"
        };

        function queryPortConfigData(callback) {
            var req = {};
            var resData = {};
            req[uciPortConfig.fileName] = {};
            req[uciPortConfig.fileName][KEY_TABLE] = [];
            if(gGameSupport || gLagSupport){
                req[uciPortConfig.fileName][KEY_NAME] = [];
            }
            req[uciPortConfig.fileName][KEY_TABLE][0] = uciPortConfig.secType.devInfo;
            if(gMulWanSupport){
                req[uciPortConfig.fileName][KEY_TABLE].push(uciPortConfig.secType.mwan);
            }
            if(gIptvSupport){
                req[uciPortConfig.fileName][KEY_TABLE].push(uciPortConfig.secType.iptv);
                req[uciIPTVConfig.fileName] = {};
                req[uciIPTVConfig.fileName][KEY_TABLE] = [];
                req[uciIPTVConfig.fileName][KEY_TABLE][0] = uciIPTVConfig.secType.iptvEntry;
            }
            if(gGameSupport){
                req[uciPortConfig.fileName][KEY_NAME].push(uciPortConfig.secType.game);
            }
            if(gLagSupport){
                req[uciPortConfig.fileName][KEY_NAME].push(uciPortConfig.secType.lag);
            }
            $.query(req, function(res) {
                if (!errHandler(res[ERR_CODE])) {
                    return;
                }
                resData["devRes"] = res[uciPortConfig.fileName][uciPortConfig.secType.devInfo];
                if(gMulWanSupport){
                    resData["mwanRes"] =  formatTableData(res[uciPortConfig.fileName][uciPortConfig.secType.mwan]);
                }
                if(gIptvSupport){
                    resData["iptvRes"] = formatTableData(res[uciPortConfig.fileName][uciPortConfig.secType.iptv]);
                    resData["iptvEtyRes"] = formatTableData(res[uciIPTVConfig.fileName][uciIPTVConfig.secType.iptvEntry]);
                }
                if(gGameSupport){
                    resData["gameRes"] = res[uciPortConfig.fileName][uciPortConfig.secType.game];
                }
                if(gLagSupport){
                    resData["lagRes"] = res[uciPortConfig.fileName][uciPortConfig.secType.lag];
                }
                callback(resData);
            });
        }

        function initCombobox(conId, options, value, callback) {
            selectInit(conId, options, value, function(value, container) {
                setTimeout(function() {
                    container.querySelector(".hsValueA").innerHTML = container.querySelector(".hsValueA").innerHTML.split("(主路由)")[0];
                    callback(value);
                });
            }, 50);
            id(conId).querySelector(".hsValueA").innerHTML = id(conId).querySelector(".hsValueA").innerHTML.split("(主路由)")[0];
        }

        function getCapInfo(devInfo) {
            for (var idx = 0, len = devInfo.length; idx < len; idx++) {
                if (devInfo[idx][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap) {
                    return devInfo[idx];
                }
            }

            return null;
        }

        function getDevInfoByMac(devInfo, mac) {
            for (var idx = 0, len = devInfo.length; idx < len; idx++) {
                if (devInfo[idx][uciPortConfig.dynOptName.mac] === mac) {
                    return devInfo[idx];
                }
            }

            return null;
        }

        function checkVlanId(vlanId) {
            if (parseInt(vlanId).toString() !== vlanId) {
                return false;
            }

            if (parseInt(vlanId) < 1 || parseInt(vlanId) > 4094) {
                return false;
            }

            return true;
        }

        function checkPortConflict(expDevInfo, devInfo) {
            var temDevInfo;

            for (var idx = 0, len = expDevInfo.length; idx < len; idx++) {
                temDevInfo = getDevInfoByMac(devInfo, expDevInfo[idx].mac);
                if (temDevInfo[uciPortConfig.dynOptName.phyInfo][parseInt(expDevInfo[idx].portNum)][uciPortConfig.dynOptName.role] !== expDevInfo[idx].portRole) {
                    return true;
                }
            }

            return false;
        }

        function showInfoPanel(mode) {
            showCoverB(function(){
                $("#CoverB").css("opacity", "0.45");
            });
            switch (mode) {
                case "checking":
                    $("body").append($('\
                    <div id="infoPanel">\
                        <img class="checkingImg center" src="web-static/images/loadingRouteSet.gif">\
                        <span class="checkingTip center">正在检测，请稍候……</span>\
                    </div>\
                    '));
                    $("#infoPanel")[0].style.left = ($("#Confirm")[0].offsetWidth - $("#infoPanel")[0].offsetWidth) / 2 + "px";
                    break;
                default:
                    break;
            }
        }

        function hideInfoPanel(isHideCoverB) {
            $("#infoPanel").remove();
            if (isHideCoverB) {
                hideCoverB();
            }
        }

        // @ Module: IPTV Module
        // @ Author: Zhou Yang
        // @ Data:   2021-03-30

        var IPTVConfigData = {     // 用于展示端口配置的数据格式
            setted: null,          // 用户是否设置过 IPTV 口
            enable: null,          // IPTV 是否开启
            linkMode: null,        // 光猫接线方式
            workMode: null,        // 工作模式
            vlanId: null,          // VLAN ID
            uplinkDev: {           // IPTV 上联口信息
                mac: null,         // 设备 MAC
                name: null,        // 设备名称
                port: null,        // 设备端口信息
                uplinkPort: null,  // IPTV 上联口序号
                powerPos: null,    // 电源位置
                powerIdx: null,    // 电源偏移量
                state: null,       // 设备状态
                role: null         // 设备身份
            },
            downlinkDev: {         // IPTV 下联口信息
                mac: null,
                name: null,
                port: null,
                downlinkPort: null,// IPTV 下联口序号
                powerPos: null,
                powerIdx: null,
                state: null,
                role: null
            },
            iptvEtyIndex: null     // IPTV Entry 索引，仅用于向后端发送TDCP请求
        };

        function checkIPTVLanNum(devInfo, wanIndex, mode) {
            var capLanNum = 0;
            var routerLanNum = 0;
            var temPortInfo;

            for (var idx = 0, len = devInfo.length; idx < len; idx++) {
                temPortInfo = transformIPTVPort(devInfo[idx][uciPortConfig.dynOptName.phyInfo], wanIndex, mode, devInfo[idx][uciPortConfig.dynOptName.sfpCapability]);

                for (var i = 0, l = temPortInfo.length; i < l; i++) {
                    if (temPortInfo[i]["name"] === "LAN") {
                        if (devInfo[idx][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap) {
                            capLanNum++;
                        }
                        routerLanNum++;
                    }
                }
            }

            return {
                capLanNum: capLanNum,
                routerLanNum: routerLanNum
            };
        }

        function transformIPTVPort(portInfo, wanIndex, mode, sfpCapabilityList) {
            var result = [];
            var transformRule = {
                display: [
                    {
                        "lan":  { state: "disable", name: "LAN" },
                        "wan1": { state: "disable", name: "WAN1" },
                        "wan2": { state: "disable", name: "WAN2" },
                        "downlink1": { state: "active",  name: "IPTV口" },
                        "downlink2": { state: "disable", name: "IPTV口" },
                        "uplink1": { state: "active",  name: "IPTV上联口" },
                        "uplink2": { state: "disable", name: "IPTV上联口" },
                        "lag": { state: "disable", name: "聚合口" },
                        "game": { state: "disable", name: "游戏专用口" }
                    },
                    {
                        "lan":  { state: "disable", name: "LAN" },
                        "wan1": { state: "disable", name: "WAN1" },
                        "wan2": { state: "disable", name: "WAN2" },
                        "downlink1": { state: "disable", name: "IPTV口" },
                        "downlink2": { state: "active",  name: "IPTV口" },
                        "uplink1": { state: "disable", name: "IPTV上联口" },
                        "uplink2": { state: "active",  name: "IPTV上联口" },
                        "lag": { state: "disable", name: "聚合口" },
                        "game": { state: "disable", name: "游戏专用口" }
                    }
                ],
                setting: [
                    {
                        "lan":  { state: "normal",  name: "LAN" },
                        "wan1": { state: "disable", name: "WAN1" },
                        "wan2": { state: "disable", name: "WAN2" },
                        "downlink1": { state: "normal",  name: "LAN"    },
                        "downlink2": { state: "disable", name: "IPTV口" },
                        "uplink1": { state: "normal",  name: "LAN"        },
                        "uplink2": { state: "disable", name: "IPTV上联口" },
                        "lag": { state: "disable", name: "聚合口" },
                        "game": { state: "disable", name: "游戏专用口" }
                    },
                    {
                        "lan":  { state: "normal",  name: "LAN" },
                        "wan1": { state: "disable", name: "WAN1" },
                        "wan2": { state: "disable", name: "WAN2" },
                        "downlink1": { state: "disable", name: "IPTV口" },
                        "downlink2": { state: "normal",  name: "LAN"    },
                        "uplink1": { state: "disable", name: "IPTV上联口" },
                        "uplink2": { state: "normal",  name: "LAN" },
                        "lag": { state: "disable", name: "聚合口" },
                        "game": { state: "disable", name: "游戏专用口" }
                    }
                ]
            };

            for (var idx = 0, len = portInfo.length; idx < len; idx++) {
                var portItem = JSON.parse(JSON.stringify(transformRule[mode][wanIndex][portInfo[idx][uciPortConfig.dynOptName.role]]));
                portItem.rate = getPhySpeedByIndex(portInfo,idx,sfpCapabilityList);
                portItem.isSfp = portInfo[idx].type.toUpperCase() == "SFP";
                result.push(portItem);
            }

            return result;
        }

        function transformIPTVSetting(portInfo) {
            var result = [];

            for (var idx = 0, len = portInfo.length; idx < len; idx++) {
                result.push({
                    state: portInfo[idx].state === "active" ? "active" : "disable",
                    name: portInfo[idx].name,
                    rate: portInfo[idx].rate,
                    isSfp: portInfo[idx].isSfp
                });
            }

            return result;
        }

        function getIPTVEntryByWanIndex(iptvEntry, wanIndex) {
            for (var idx = 0, len = iptvEntry.length; idx < len; idx++) {
                if (iptvEntry[idx][uciIPTVConfig.optName.wanIndex] === ("" + wanIndex)) {
                    return iptvEntry[idx];
                }
            }

            return iptvEntry[0];
        }

        function getIPTVElmentsByWanIndex(wanIndex) {
            var $wanPort = $("#iptvPortConfig .wanPort" + wanIndex);

            return {
                $iptvEnable: $wanPort.find(".iptvEnable"),
                $iptvPortOn: $wanPort.find(".iptvEnable .iptvPortOn"),
                $iptvPortOff: $wanPort.find(".iptvEnable .iptvPortOff"),
                $iptvLinkMode: $wanPort.find(".iptvLinkMode"),
                $iptvLinkModeValue: $wanPort.find(".iptvLinkMode .modeValue"),
                $iptvWorkMode: $wanPort.find(".iptvWorkMode"),
                $iptvDirect: $wanPort.find(".iptvWorkMode .iptvDirect"),
                $iptvVlan: $wanPort.find(".iptvWorkMode .iptvVlan"),
                $iptvVlanId: $wanPort.find(".iptvVlanId"),
                $iptvVlanIdValue: $wanPort.find(".iptvVlanId .vlanIdValue"),
                $iptvPortConfig: $wanPort.find(".iptvPortConfig"),
                $name1: $wanPort.find(".iptvPortConfig .name1"),
                $container1: $wanPort.find(".iptvPortConfig .container1"),
                $name2: $wanPort.find(".iptvPortConfig .name2"),
                $container2: $wanPort.find(".iptvPortConfig .container2"),
                $tip: $wanPort.find(".iptvPortConfig .tip"),
                $iptvBtns: $wanPort.find(".iptvBtns"),
                $resetBtn: $wanPort.find(".iptvBtns .resetBtn"),
                $saveBtn: $wanPort.find(".iptvBtns .saveBtn"),
                $vlanTipShow: $wanPort.find(".vlanTipShow")
            };
        }

        function appendIPTVPanel(wanPortArr) {
            $("#iptvPortConfig .wanPort").remove();

            for (var idx = 0, len = wanPortArr.length; idx < len; idx++) {
                $("#iptvPortConfig").append($('\
                <div class="block wanPort wanPort' + wanPortArr[idx] + '">\
                    <ul class="gridLine iptvEnable">\
                        <label class="desLblA">IPTV口</label>\
                        <input id="iptvPortOn' + wanPortArr[idx] + '" name="iptvEnableRadio" class="switchRadio iptvPortOn" type="radio"/>\
                        <label class="noteLbl" for="iptvPortOn' + wanPortArr[idx] + '">开</label>\
                        <input id="iptvPortOff' + wanPortArr[idx] + '" name="iptvEnableRadio" class="switchRadio switchRadioR iptvPortOff" type="radio" />\
                        <label class="noteLbl" for="iptvPortOff' + wanPortArr[idx] + '">关</label>\
                    </ul>\
                    <ul class="gridLine gridLineA gridLineTips" id="iptvTip' + wanPortArr[idx] + '">\
                        <div class="warnCon">\
                            <img src="../web-static/images/routerBg.png" />\
                        </div>\
                        <span id="iptvTipText' + wanPortArr[idx] + '"></span>\
                    </ul>\
                    <ul class="gridLine iptvLinkMode">\
                        <label class="desLblA">光猫接线方式</label>\
                        <label class="noteLbl modeValue"></label>\
                    </ul>\
                    <ul class="gridLine iptvWorkMode">\
                        <label class="desLblA">IPTV模式</label>\
                        <input id="iptvDirect' + wanPortArr[idx] + '" name="iptvWorkModeRadio" class="switchRadio iptvDirect" type="radio" />\
                        <label class="noteLbl" for="iptvDirect' + wanPortArr[idx] + '">直通模式</label>\
                        <input id="iptvVlan' + wanPortArr[idx] + '" name="iptvWorkModeRadio" class="switchRadio switchRadioR iptvVlan" type="radio" />\
                        <label class="noteLbl" for="iptvVlan' + wanPortArr[idx] + '">VLAN模式</label>\
                    </ul>\
                    <ul class="gridLine gridLineA iptvVlanId">\
                        <label class="desLblA">VLAN ID</label>\
                        <li class="textConA textCon">\
                            <input class="textA text hoverBd vlanIdValue">\
                            <span class="desLblA vlanTipShow disNone">（请输入1 - 4094之间的整数)</span>\
                            <label class="tip">VLAN ID用于标识IPTV数据特征，具体请咨询您的运营商客服或运维人员</label>\
                        </li>\
                    </ul>\
                    <ul class="gridLine iptvPortConfig">\
                        <label class="name1"></label>\
                        <div class="container1"></div>\
                        <label class="name2"></label>\
                        <div class="container2"></div>\
                        <label class="tip"></label>\
                    </ul>\
                    <div class="blockFuncA iptvBtns savePortSelWrapper">\
                        <input type="button" value="重新选择端口" class="btnA subBtn iptvBtn resetBtn">\
                        <input type="button" value="保存" id="saveIPTVData' + wanPortArr[idx] + '"class="btnA subBtn iptvBtn saveBtn">\
                    </div>\
                </div>\
                '));

                if (curSysMode != uciSystem.optValue.sysMode.routerMode
                 || curDhcpdStatus == uciDhcpd.optValue.enable.off) {
                    $("#iptvTip" + wanPortArr[idx]).show();
                    disableBtn("saveIPTVData" + wanPortArr[idx], true);
                    $("#iptvPortOn" + wanPortArr[idx]).attr("disabled", true);
                    $("#iptvPortOff" + wanPortArr[idx]).attr("disabled", true);

                    if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
                        if (curSysMode == uciSystem.optValue.sysMode.apMode) {
                            $("#iptvTipText" + wanPortArr[idx]).text("上网方式为AP（有线中继）时，无法使用IPTV口功能");
                        } else {
                            $("#iptvTipText" + wanPortArr[idx]).text("上网方式为桥接（无线中继）时，无法使用IPTV口功能");
                        }
                    } else {
                        $("#iptvTipText" + wanPortArr[idx]).text("DHCP服务器关闭时，无法使用IPTV口功能");
                    }
                }
            }
        }

        function appendIPTVPanelSwitchLabel(wanPortArr) {
            $("#iptvPortConfig .wanPortSwitch .switchBtns .switchBtn").remove();

            for (var idx = 0, len = wanPortArr.length; idx < len; idx++) {
                $("#iptvPortConfig .wanPortSwitch .switchBtns").append($('\
                <label class="switchBtn">WAN' + ( wanPortArr[idx] + 1 ) + '口</label>\
                '));
            }
        }

        function initIPTVPanelSwitch(wanIndex) {
            var $switchBtns = $("#iptvPortConfig .wanPortSwitch .switchBtns .switchBtn");

            for (var idx = 0, len = $switchBtns.length; idx < len; idx++) {
                $switchBtns[idx].wanIndex = idx;
                $switchBtns[idx].onclick = function() {
                    var wanIndex = this.wanIndex;

                    $switchBtns.attr("class", "switchBtn");
                    $switchBtns[wanIndex].className = "switchBtn selected";
                    queryPortConfigData(function(res) {
                        initIPTVPanel(wanIndex, res);
                    });
                };
            }

            $switchBtns[wanIndex].className = "switchBtn selected";
        }

        function initIPTVPanel(wanIndex, res) {
            var configData = JSON.parse(JSON.stringify(IPTVConfigData));
            var capInfo = getCapInfo(res["devRes"]);
            var reInfo;

            res.iptvRes = res.iptvRes[wanIndex];
            res.iptvEtyRes = getIPTVEntryByWanIndex(res["iptvEtyRes"], (wanIndex + 1));

            configData.setted = !(res["iptvRes"][uciPortConfig.optName.downlinkPhy] === "-1");
            configData.enable = res["iptvRes"][uciPortConfig.optName.enable] === uciPortConfig.optValue.enable.on ? "on" : "off";
            configData.linkMode = res["iptvEtyRes"][uciIPTVConfig.optName.linkMode] === uciIPTVConfig.optValue.linkMode.mixed ? "mixed" : "alone";
            configData.workMode = res["iptvEtyRes"][uciIPTVConfig.optName.workMode] === uciIPTVConfig.optValue.workMode.direct ? "direct" : "vlan";
            configData.vlanId = res["iptvEtyRes"][uciIPTVConfig.optName.vlanId];
            configData.uplinkDev.mac = capInfo[uciPortConfig.dynOptName.mac];
            configData.uplinkDev.name = capInfo[uciPortConfig.dynOptName.name];
            configData.uplinkDev.port = transformIPTVPort(capInfo[uciPortConfig.dynOptName.phyInfo], wanIndex, "display", capInfo[uciPortConfig.dynOptName.sfpCapability]);
            configData.uplinkDev.uplinkPort = res["iptvRes"][uciPortConfig.optName.uplinkPhy];
            configData.uplinkDev.powerPos = capInfo[uciPortConfig.dynOptName.powerPos];
            configData.uplinkDev.powerIdx = capInfo[uciPortConfig.dynOptName.powerIdx];
            configData.uplinkDev.state = capInfo[uciPortConfig.dynOptName.online] === uciPortConfig.dynOptValue.online.online ? "online" : "offline";
            configData.uplinkDev.role = "cap";
            configData.downlinkDev.mac = res["iptvRes"][uciPortConfig.optName.downlinkDev] === "FF-FF-FF-FF-FF-FF" ? capInfo[uciPortConfig.dynOptName.mac] : res["iptvRes"][uciPortConfig.optName.downlinkDev];
            configData.downlinkDev.downlinkPort = res["iptvRes"][uciPortConfig.optName.downlinkPhy];
            configData.iptvEtyIndex = res["iptvEtyRes"][SEC_NAME];

            if (configData.downlinkDev.mac === configData.uplinkDev.mac || configData.downlinkDev.mac === "00-00-00-00-00-00") {
                configData.downlinkDev.name = configData.uplinkDev.name;
                configData.downlinkDev.port = configData.uplinkDev.port;
                configData.downlinkDev.powerPos = configData.uplinkDev.powerPos;
                configData.downlinkDev.powerIdx = configData.uplinkDev.powerIdx;
                configData.downlinkDev.state = configData.uplinkDev.state;
                configData.downlinkDev.role = configData.uplinkDev.role;
            } else {
                reInfo = getDevInfoByMac(res["devRes"], configData.downlinkDev.mac);
                configData.downlinkDev.name = reInfo[uciPortConfig.dynOptName.name];
                configData.downlinkDev.port = transformIPTVPort(reInfo[uciPortConfig.dynOptName.phyInfo], wanIndex, "display",reInfo[uciPortConfig.dynOptName.sfpCapability]);
                configData.downlinkDev.powerPos = reInfo[uciPortConfig.dynOptName.powerPos];
                configData.downlinkDev.powerIdx = reInfo[uciPortConfig.dynOptName.powerIdx];
                configData.downlinkDev.state = reInfo[uciPortConfig.dynOptName.online] === uciPortConfig.dynOptValue.online.online ? "online" : "offline";
                configData.downlinkDev.role = "re";
            }

            if (configData.setted && configData.linkMode === "mixed") {
                configData.downlinkDev.port[parseInt(configData.downlinkDev.downlinkPort)]["state"] = "active";
                configData.downlinkDev.port[parseInt(configData.downlinkDev.downlinkPort)]["name"] = "IPTV口";
            }

            if (configData.setted && configData.linkMode === "alone") {
                configData.uplinkDev.port[parseInt(configData.uplinkDev.uplinkPort)]["state"] = "active";
                configData.uplinkDev.port[parseInt(configData.uplinkDev.uplinkPort)]["name"] = "IPTV上联口";
                configData.downlinkDev.port[parseInt(configData.downlinkDev.downlinkPort)]["state"] = "active";
                configData.downlinkDev.port[parseInt(configData.downlinkDev.downlinkPort)]["name"] = "IPTV口";
            }

            if (curSysMode != uciSystem.optValue.sysMode.routerMode
                 || curDhcpdStatus == uciDhcpd.optValue.enable.off) {
                configData.enable = "off";
            }

            if (configData.enable === "on") {
                enableIPTVConfig(wanIndex, configData);
            } else {
                disableIPTVConfig(wanIndex, configData);
            }

            $("#iptvPortConfig .wanPort").hide();
            $("#iptvPortConfig .wanPort" + wanIndex).show();
        }

        function enableIPTVConfig(wanIndex, configData) {
            var $els = getIPTVElmentsByWanIndex(wanIndex);
            // 事件解绑
            $els.$iptvPortOn[0].onclick = null;
            $els.$iptvPortOff[0].onclick = null;
            $els.$iptvDirect[0].onclick = null;
            $els.$iptvVlan[0].onclick = null;
            $els.$resetBtn[0].onclick = null;
            $els.$saveBtn[0].onclick = null;

            // DOM 赋值
            $els.$iptvPortOn[0].checked = true;
            $els.$iptvLinkModeValue[0].innerHTML = configData.linkMode === "mixed" ? labelText.mixedText : labelText.aloneText;
            if (configData.workMode === "direct") {
                $els.$iptvDirect[0].checked = true;
            } else {
                $els.$iptvVlan[0].checked = true;
                $els.$iptvVlanIdValue[0].value = configData.vlanId;
            }
            if (configData.linkMode === "mixed") {
                if (configData.downlinkDev.state === "online") {
                    $els.$name1[0].innerHTML = configData.downlinkDev.name;
                    $els.$tip[0].innerHTML = labelText.mixedTip;
                } else {
                    $els.$name1[0].innerHTML = configData.downlinkDev.name + labelText.offlineText;
                    $els.$tip[0].innerHTML = labelText.offlineTip;
                }
                new PortConfig().init({
                    element: $els.$container1[0],
                    type: "display",
                    port: configData.downlinkDev.port,
                    powerPos: configData.downlinkDev.powerPos,
                    powerIdx: configData.downlinkDev.powerIdx
                });
            } else {
                $els.$name1[0].innerHTML = configData.uplinkDev.name;
                new PortConfig().init({
                    element: $els.$container1[0],
                    type: "display",
                    port: configData.uplinkDev.port,
                    powerPos: configData.uplinkDev.powerPos,
                    powerIdx: configData.uplinkDev.powerIdx
                });
                $els.$tip[0].innerHTML = labelText.aloneTip;
                if (configData.uplinkDev.mac !== configData.downlinkDev.mac) {
                    if (configData.downlinkDev.state === "online") {
                        $els.$name2[0].innerHTML = configData.downlinkDev.name;
                        $els.$tip[0].innerHTML = labelText.aloneTip;
                    } else {
                        $els.$name2[0].innerHTML = configData.downlinkDev.name + labelText.offlineText;
                        $els.$tip[0].innerHTML = labelText.offlineTip;
                    }
                    new PortConfig().init({
                        element: $els.$container2[0],
                        type: "display",
                        port: configData.downlinkDev.port,
                        powerPos: configData.downlinkDev.powerPos,
                        powerIdx: configData.downlinkDev.powerIdx
                    });
                }
            }

            // 事件绑定
            $els.$iptvPortOn[0].onclick = function() {
                return;
            };
            $els.$iptvPortOff[0].onclick = function () {
                if (configData.setted && configData.enable === "on") {
                    disableIPTVConfig(wanIndex, configData);
                }
                if (configData.setted && configData.enable === "off") {
                    queryPortConfigData(function(res) {
                        initIPTVPanel(wanIndex, res);
                    });
                }
                if (!configData.setted && configData.enable === "on") {
                    return;
                }
                if (!configData.setted && configData.enable === "off") {
                    queryPortConfigData(function(res) {
                        initIPTVPanel(wanIndex, res);
                    });
                }
            };
            $els.$iptvDirect[0].onclick = function() {
                $els.$iptvVlanId.hide();
            };
            $els.$iptvVlan[0].onclick = function () {
                $els.$iptvVlanIdValue[0].value = configData.vlanId;
                $els.$iptvVlanIdValue[0].oninput = function(){
                    if (checkVlanId(this.value)) {
                        $els.$saveBtn.removeAttr('disabled');
                        $els.$saveBtn[0].style.backgroundColor = "#FBEB1A"
                        $els.$vlanTipShow.hide();
                    } else {
                        $els.$saveBtn.attr('disabled',true);
                        $els.$saveBtn[0].style.backgroundColor = "#D9D9D9";
                        $els.$vlanTipShow.show();
                    }
                }
                $els.$iptvVlanIdValue.trigger('oninput');
                $els.$iptvVlanId.show();
            };
            $els.$resetBtn[0].onclick = function() {
                showIPTVConfigPanel(wanIndex, configData, function() {});
            };
            $els.$saveBtn[0].onclick = function() {
                saveIPTVConfig(wanIndex, configData);
            };

            // DOM 显示
            $els.$iptvEnable.show();
            $els.$iptvLinkMode.show();
            if (configData.linkMode === "mixed") {
                $els.$iptvWorkMode.show();
                if (configData.workMode === "vlan") {
                    $els.$iptvVlanIdValue[0].oninput = function(){
                        if (checkVlanId(this.value)) {
                            $els.$saveBtn.removeAttr('disabled');
                            $els.$saveBtn[0].style.backgroundColor = "#FBEB1A";
                            $els.$vlanTipShow.hide();
                        } else {
                            $els.$saveBtn.attr('disabled',true);
                            $els.$saveBtn[0].style.backgroundColor = "#D9D9D9";
                            $els.$vlanTipShow.show();
                        }
                    }
                    $els.$iptvVlanIdValue.trigger('oninput');
                    $els.$iptvVlanId.show();
                } else {
                    $els.$iptvVlanId.hide();
                }
            } else {
                $els.$iptvWorkMode.hide();
                $els.$iptvVlanId.hide();
            }
            if (configData.linkMode === "mixed"
                || (configData.linkMode === "alone" && configData.uplinkDev.mac === configData.downlinkDev.mac)) {
                $els.$name2.hide();
                $els.$container2.hide();
            } else {
                $els.$name2.show();
                $els.$container2.show();
            }
            $els.$iptvPortConfig.show();
            $els.$resetBtn.show();
            $els.$iptvBtns.show();
        }

        function disableIPTVConfig(wanIndex, configData) {
            var $els = getIPTVElmentsByWanIndex(wanIndex);

            // 事件解绑
            $els.$iptvPortOn[0].onclick = null;
            $els.$iptvPortOff[0].onclick = null;
            $els.$iptvDirect[0].onclick = null;
            $els.$iptvVlan[0].onclick = null;
            $els.$resetBtn[0].onclick = null;
            $els.$saveBtn[0].onclick = null;

            // DOM 赋值
            $els.$iptvPortOff[0].checked = true;

            // 事件绑定
            $els.$iptvPortOn[0].onclick = function() {
                if (configData.setted && configData.enable === "on") {
                    queryPortConfigData(function(res) {
                        initIPTVPanel(wanIndex, res);
                    });
                }
                if (configData.setted && configData.enable === "off") {
                    var isPortConflict = false;

                    showInfoPanel("checking");
                    queryPortConfigData(function(res) {
                        if (configData.linkMode === "mixed") {
                            isPortConflict = checkPortConflict([
                                {
                                    mac: configData.downlinkDev.mac,
                                    portNum: configData.downlinkDev.downlinkPort,
                                    portRole: uciPortConfig.dynOptValue.role.lan
                                }
                            ], res["devRes"]);
                        } else {
                            isPortConflict = checkPortConflict([
                                {
                                    mac: configData.downlinkDev.mac,
                                    portNum: configData.downlinkDev.downlinkPort,
                                    portRole: uciPortConfig.dynOptValue.role.lan
                                },
                                {
                                    mac: configData.uplinkDev.mac,
                                    portNum: configData.uplinkDev.uplinkPort,
                                    portRole: uciPortConfig.dynOptValue.role.lan
                                }
                            ], res["devRes"]);
                        }
                        hideInfoPanel(true);
                        if (isPortConflict) {
                            var routerLanNum = checkIPTVLanNum(res["devRes"], wanIndex, "setting")["routerLanNum"];

                            if (routerLanNum < 1) {
                                showAlert("路由可定义端口数不足，请先关闭其他端口定义功能", null, null, function() {
                                    queryPortConfigData(function(res) {
                                        initIPTVPanel(wanIndex, res);
                                    });
                                });
                            } else {
                                showAlert("原有设置的端口已被占用，请重新选择", null, null, function() {
                                    showIPTVConfigPanel(wanIndex, configData, function() {
                                        queryPortConfigData(function(res) {
                                            initIPTVPanel(wanIndex, res);
                                        });
                                    });
                                });
                            }
                        } else {
                            enableIPTVConfig(wanIndex, configData);
                        }
                    });
                }
                if (!configData.setted && configData.enable === "on") {
                    return;
                }
                if (!configData.setted && configData.enable === "off") {
                    showInfoPanel("checking");
                    queryPortConfigData(function(res) {
                        var routerLanNum = checkIPTVLanNum(res["devRes"], wanIndex, "setting")["routerLanNum"];

                        if (routerLanNum < 1) {
                            hideInfoPanel(true);
                            showAlert("路由可定义端口数不足，请先关闭其他端口定义功能", null, null, function() {
                                queryPortConfigData(function(res) {
                                    initIPTVPanel(wanIndex, res);
                                });
                            });
                            return;
                        } else {
                            hideInfoPanel(false);
                            showIPTVConfigPanel(wanIndex, configData, function() {
                                queryPortConfigData(function(res) {
                                    initIPTVPanel(wanIndex, res);
                                });
                            });
                        }
                    });
                }
            };
            $els.$iptvPortOff[0].onclick = function () {
                return;
            };
            $els.$saveBtn[0].onclick = function() {
                saveIPTVConfig(wanIndex, configData);
            };

            // DOM 显示
            $els.$iptvEnable.show();
            $els.$iptvLinkMode.hide();
            $els.$iptvWorkMode.hide();
            $els.$iptvVlanId.hide();
            $els.$iptvPortConfig.hide();
            $els.$resetBtn.hide();
            $els.$iptvBtns.show();
        }

        function saveIPTVConfig(wanIndex, configData) {
            var $els = getIPTVElmentsByWanIndex(wanIndex);
            var req = {};

            if ($els.$iptvPortOn[0].checked) {
                req[uciPortConfig.fileName] = {};
                req[uciPortConfig.fileName]["iptv_" + (wanIndex + 1)] = {};
                req[uciPortConfig.fileName]["iptv_" + (wanIndex + 1)][uciPortConfig.optName.enable] = uciPortConfig.optValue.enable.on;
                req[uciPortConfig.fileName]["iptv_" + (wanIndex + 1)][uciPortConfig.optName.uplinkPhy] = configData.linkMode === "mixed" ? "-1" : configData.uplinkDev.uplinkPort;
                req[uciPortConfig.fileName]["iptv_" + (wanIndex + 1)][uciPortConfig.optName.downlinkPhy] = configData.downlinkDev.downlinkPort;
                req[uciPortConfig.fileName]["iptv_" + (wanIndex + 1)][uciPortConfig.optName.downlinkDev] = configData.downlinkDev.role === "cap" ? "FF-FF-FF-FF-FF-FF" : configData.downlinkDev.mac;
                req[uciIPTVConfig.fileName] = {};
                req[uciIPTVConfig.fileName][configData.iptvEtyIndex] = {};
                req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.wanIndex] = "" + (wanIndex + 1);
                if (configData.linkMode === "mixed") {
                    req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.linkMode] = uciIPTVConfig.optValue.linkMode.mixed;
                    if ($els.$iptvDirect[0].checked) {
                        req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.workMode] = uciIPTVConfig.optValue.workMode.direct;
                        req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.vlanId] = "0";
                    } else {
                        req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.workMode] = uciIPTVConfig.optValue.workMode.vlan;
                        req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.vlanId] = $els.$iptvVlanIdValue[0].value;
                    }
                } else {
                    req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.linkMode] = uciIPTVConfig.optValue.linkMode.alone;
                    req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.workMode] = uciIPTVConfig.optValue.workMode.direct;
                    req[uciIPTVConfig.fileName][configData.iptvEtyIndex][uciIPTVConfig.optName.vlanId] = "0";
                }
            } else {
                req[uciPortConfig.fileName] = {};
                req[uciPortConfig.fileName]["iptv_" + (wanIndex + 1)] = {};
                req[uciPortConfig.fileName]["iptv_" + (wanIndex + 1)][uciPortConfig.optName.enable] = uciPortConfig.optValue.enable.off;
            }

            setLoadingId("saveIPTVData" + wanIndex);
            hsLoading(true);
            $.modify(req, function(res) {
                hsLoading(false);
                if (!errHandler(res[ERR_CODE])) {
                    return;
                }

                queryPortConfigData(function(res) {
                    if(gMulWanSupport){
                        initMultiWanModule(res);
                    }
                    if(gSfpRateSupport){
                        initSFPModule(res);
                    }
                    if(gLagSupport){
                        initLagModule(res);
                    }
                    if(gIptvSupport){
                        initIPTVPanel(wanIndex, res);
                    }
                    if(gGameSupport){
                        initGameModule(res);
                    }
                });
            });
        }

        function showIPTVConfigPanel(wanIndex, configData, onCancel) {
            var devInfo = [];
            var devOpts = [];
            var devOptsBack = {};
            var capInfo;
            var initData1;
            var portConfig1;
            var initData2;
            var portConfig2;
            var initData3;
            var portConfig3;
            var iptvLanNum;

            queryPortConfigData(function(res) {
                res.iptvRes = res.iptvRes[wanIndex];
                res.iptvEtyRes = getIPTVEntryByWanIndex(res.iptvEtyRes, (wanIndex + 1));

                for (var idx = 0, len = res["devRes"].length; idx < len; idx++) {
                    if(checkSupportFeature(res["devRes"][idx],"iptv")){
                        devInfo.push({
                            name: res["devRes"][idx][uciPortConfig.dynOptName.name],
                            mac: res["devRes"][idx][uciPortConfig.dynOptName.mac],
                            port: transformIPTVPort(res["devRes"][idx][uciPortConfig.dynOptName.phyInfo], wanIndex, "setting", res["devRes"][idx][uciPortConfig.dynOptName.sfpCapability]),
                            powerPos: res["devRes"][idx][uciPortConfig.dynOptName.powerPos],
                            powerIdx: res["devRes"][idx][uciPortConfig.dynOptName.powerIdx],
                            role: res["devRes"][idx][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap ? "cap" : "re"
                        });

                        if (res["devRes"][idx][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap) {
                            capInfo = devInfo[idx];
                            devOpts.push({
                                str: res["devRes"][idx][uciPortConfig.dynOptName.name] + "(主路由)",
                                value: res["devRes"][idx][uciPortConfig.dynOptName.mac]
                            });
                        } else {
                            devOpts.push({
                                str: res["devRes"][idx][uciPortConfig.dynOptName.name],
                                value: res["devRes"][idx][uciPortConfig.dynOptName.mac]
                            });
                        }

                        devOptsBack[res["devRes"][idx][uciPortConfig.dynOptName.mac]] = idx;
                    }
                }

                configData = JSON.parse(JSON.stringify(configData));
                configData.linkMode = "mixed";
                configData.workMode = "direct";
                configData.vlanId = "0";
                configData.uplinkDev.mac = capInfo.mac;
                configData.uplinkDev.name = capInfo.name;
                configData.uplinkDev.port = null;
                configData.uplinkDev.uplinkPort = null;
                configData.uplinkDev.powerPos = capInfo.powerPos;
                configData.uplinkDev.powerIdx = capInfo.powerIdx;
                configData.uplinkDev.state = "online";
                configData.uplinkDev.role = capInfo.role;
                configData.downlinkDev.mac = capInfo.mac;
                configData.downlinkDev.name = capInfo.name;
                configData.downlinkDev.port = null;
                configData.downlinkDev.downlinkPort = null;
                configData.downlinkDev.powerPos = capInfo.powerPos;
                configData.downlinkDev.powerIdx = capInfo.powerIdx;
                configData.downlinkDev.state = "online";
                configData.downlinkDev.role = capInfo.role;

                // 显示 IPTV 设置页面
                showCoverB(function(){
                    $("#CoverB").css("opacity", "0.45");
                });
                $("body").append($('\
                <div id="iptvConfigPanel" class="configPanel">\
                        <label class="title">IPTV口设置</label>\
                        <i class="closeBtn"/></i>\
                </div>\
                '));
                $(".configPanel")[0].style.left = ($("#Confirm")[0].offsetWidth - $(".configPanel")[0].offsetWidth) / 2 + "px";
                $(".configPanel .closeBtn")[0].onclick = function() {
                    hideIPTVConfigPanel();
                    onCancel();
                };

                // 设置光猫接线方式
                $('.configPanel').append($('\
                <div class="linkMode configStep1">\
                    <label class="info">请选择光猫接线方式</label>\
                    <div class="selectLinkMode">\
                        <input id="mixedMode" name="linkModeRadio" class="switchRadio mixedMode" type="radio" checked="true"/>\
                        <label class="noteLbl" for="mixedMode">上网和IPTV单线复用</label>\
                        <input id="aloneMode" name="linkModeRadio" class="switchRadio switchRadioR aloneMode" type="radio"/>\
                        <label class="noteLbl" for="aloneMode">上网和IPTV分线传输</label>\
                    </div>\
                    <label class="tip">如需选择分线传输方式，请确保主路由至少有1个可定义端口，且MESH网络中至少有2个可定义端口</label>\
                    <input type="button" value="下一步" class="btnA subBtn nextBtn">\
                    <input type="button" value="取消" class="btnA subBtn cancelBtn">\
                </div>\
                '));
                iptvLanNum = checkIPTVLanNum(res["devRes"], wanIndex, "setting");
                if (iptvLanNum["capLanNum"] < 1 || iptvLanNum["routerLanNum"] < 2) {
                    id("aloneMode").disabled = true;
                    $('#iptvConfigPanel .configStep1 .tip')[0].style.display = "block";
                }
                $(".configPanel .linkMode .mixedMode")[0].onclick = function () {
                    configData.linkMode = "mixed";
                };
                $(".configPanel .linkMode .aloneMode")[0].onclick = function () {
                    configData.linkMode = "alone";
                };
                $(".configPanel .linkMode .nextBtn")[0].onclick = function() {
                    if ($(".configPanel .linkMode .mixedMode")[0].checked) {
                        $(".configPanel .linkMode").hide();
                        initData1 = {
                            element: $(".configPanel .itvPort .container1")[0],
                            type: "setting",
                            port: JSON.parse(JSON.stringify(devInfo[0].port)),
                            powerPos: devInfo[0].powerPos,
                            powerIdx: devInfo[0].powerIdx,
                            callback: function(args) {
                                if (initData1["port"][args.index]["state"] === "active") {
                                    initData1.port = JSON.parse(JSON.stringify(devInfo[0].port));
                                    initData1["port"][args.index]["state"] = "active";
                                    initData1["port"][args.index]["name"] = "IPTV口";
                                    configData.downlinkDev.downlinkPort = args.index;
                                    configData.downlinkDev.port = transformIPTVSetting(initData1.port);
                                    configData.downlinkDev.state = "online";
                                    enableConfigStep2NextBtn();
                                } else {
                                    initData1.port = JSON.parse(JSON.stringify(devInfo[0].port));
                                    configData.downlinkDev.downlinkPort = null;
                                    configData.downlinkDev.port = null;
                                    configData.downlinkDev.state = null;
                                    disableConfigStep2NextBtn();
                                }
                                portConfig1.refresh();
                            }
                        };
                        portConfig1 = new PortConfig().init(initData1);
                        initCombobox("itvDeviceSel1", devOpts, devOpts[0].value, function(value) {
                            configData.downlinkDev.mac = value;
                            configData.downlinkDev.name = id("itvDeviceSel1").querySelector(".hsValueA").innerHTML;
                            configData.downlinkDev.powerPos = devInfo[devOptsBack[value]]["powerPos"];
                            configData.downlinkDev.powerIdx = devInfo[devOptsBack[value]]["powerIdx"];
                            configData.downlinkDev.role = devInfo[devOptsBack[value]]["role"];
                            initData1.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                            initData1.powerPos = devInfo[devOptsBack[value]]["powerPos"];
                            initData1.powerIdx = devInfo[devOptsBack[value]]["powerIdx"];
                            initData1.callback = function(args) {
                                if (initData1["port"][args.index]["state"] === "active") {
                                    initData1.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                                    initData1["port"][args.index]["state"] = "active";
                                    initData1["port"][args.index]["name"] = "IPTV口";
                                    configData.downlinkDev.downlinkPort = args.index;
                                    configData.downlinkDev.port = transformIPTVSetting(initData1.port);
                                    configData.downlinkDev.state = "online";
                                    enableConfigStep2NextBtn();
                                } else {
                                    initData1.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                                    configData.downlinkDev.downlinkPort = null;
                                    configData.downlinkDev.port = null;
                                    configData.downlinkDev.state = null;
                                    disableConfigStep2NextBtn();
                                }
                                portConfig1.refresh();
                            };
                            portConfig1.refresh();
                        });
                        disableConfigStep2NextBtn();
                        $(".configPanel .itvPort").show();
                    } else {
                        $(".configPanel .linkMode").hide();
                        $(".configPanel .uplinkITVPort .uplinkDeviceName").html(devOpts[0].str.split("(主路由)")[0]);
                        initData2 = {
                            element: $(".configPanel .uplinkITVPort .container2")[0],
                            type: "setting",
                            port: JSON.parse(JSON.stringify(devInfo[0]["port"])),
                            powerPos: devInfo[0].powerPos,
                            powerIdx: devInfo[0].powerIdx,
                            callback: function(args) {
                                if (initData2["port"][args.index]["state"] === "active") {
                                    initData2.port = JSON.parse(JSON.stringify(devInfo[0]["port"]));
                                    initData2["port"][args.index]["state"] = "active";
                                    initData2["port"][args.index]["name"] = "IPTV上联口";
                                    configData.uplinkDev.uplinkPort = args.index;
                                    configData.uplinkDev.port = transformIPTVSetting(initData2.port);
                                    configData.uplinkDev.state = "online";
                                    if (configData.uplinkDev.uplinkPort !== null && configData.downlinkDev.downlinkPort !== null) {
                                        if (configData.uplinkDev.mac === configData.downlinkDev.mac && configData.uplinkDev.uplinkPort === configData.downlinkDev.downlinkPort) {
                                            disableConfigStep4FinishBtn();
                                        } else {
                                            enableConfigStep4FinishBtn();
                                        }
                                    } else {
                                        disableConfigStep4FinishBtn();
                                    }
                                } else {
                                    initData2.port = JSON.parse(JSON.stringify(devInfo[0]["port"]));
                                    configData.uplinkDev.uplinkPort = null;
                                    configData.uplinkDev.port = null;
                                    configData.uplinkDev.state = null;
                                    disableConfigStep4FinishBtn();
                                }
                                portConfig2.refresh();
                            }
                        };
                        portConfig2 = new PortConfig().init(initData2);
                        initData3 = {
                            element: $(".configPanel .uplinkITVPort .container3")[0],
                            type: "setting",
                            port: JSON.parse(JSON.stringify(devInfo[0]["port"])),
                            powerPos: devInfo[0].powerPos,
                            powerIdx: devInfo[0].powerIdx,
                            callback: function(args) {
                                if (initData3["port"][args.index]["state"] === "active") {
                                    initData3.port = JSON.parse(JSON.stringify(devInfo[0]["port"]));
                                    initData3["port"][args.index]["state"] = "active";
                                    initData3["port"][args.index]["name"] = "IPTV口";
                                    configData.downlinkDev.downlinkPort = args.index;
                                    configData.downlinkDev.port = transformIPTVSetting(initData3.port);
                                    configData.downlinkDev.state = "online";
                                    if (configData.uplinkDev.uplinkPort !== null && configData.downlinkDev.downlinkPort !== null) {
                                        if (configData.uplinkDev.mac === configData.downlinkDev.mac && configData.uplinkDev.uplinkPort === configData.downlinkDev.downlinkPort) {
                                            disableConfigStep4FinishBtn();
                                        } else {
                                            enableConfigStep4FinishBtn();
                                        }
                                    } else {
                                        disableConfigStep4FinishBtn();
                                    }
                                } else {
                                    initData3.port = JSON.parse(JSON.stringify(devInfo[0]["port"]));
                                    configData.downlinkDev.downlinkPort = null;
                                    configData.downlinkDev.port = null;
                                    configData.downlinkDev.state = null;
                                    disableConfigStep4FinishBtn();
                                }
                                portConfig3.refresh();
                            }
                        };
                        portConfig3 = new PortConfig().init(initData3);
                        initCombobox("itvDeviceSel2", devOpts, devOpts[0].value, function(value) {
                            configData.downlinkDev.mac = value;
                            configData.downlinkDev.name = id("itvDeviceSel2").querySelector(".hsValueA").innerHTML;
                            configData.downlinkDev.powerPos = devInfo[devOptsBack[value]]["powerPos"];
                            configData.downlinkDev.powerIdx = devInfo[devOptsBack[value]]["powerIdx"];
                            configData.downlinkDev.role = devInfo[devOptsBack[value]]["role"];
                            initData3.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                            initData3.powerPos = devInfo[devOptsBack[value]]["powerPos"];
                            initData3.powerIdx = devInfo[devOptsBack[value]]["powerIdx"];
                            initData3.callback = function(args) {
                                if (initData3["port"][args.index]["state"] === "active") {
                                    initData3.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                                    initData3["port"][args.index]["state"] = "active";
                                    initData3["port"][args.index]["name"] = "IPTV口";
                                    configData.downlinkDev.downlinkPort = args.index;
                                    configData.downlinkDev.port = transformIPTVSetting(initData3.port);
                                    configData.downlinkDev.state = "online";
                                    if (configData.uplinkDev.uplinkPort !== null && configData.downlinkDev.downlinkPort !== null) {
                                        if (configData.uplinkDev.mac === configData.downlinkDev.mac && configData.uplinkDev.uplinkPort === configData.downlinkDev.downlinkPort) {
                                            disableConfigStep4FinishBtn();
                                        } else {
                                            enableConfigStep4FinishBtn();
                                        }
                                    } else {
                                        disableConfigStep4FinishBtn();
                                    }
                                } else {
                                    initData3.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                                    configData.downlinkDev.downlinkPort = null;
                                    configData.downlinkDev.port = null;
                                    configData.downlinkDev.state = null;
                                    disableConfigStep4FinishBtn();
                                }
                                portConfig3.refresh();
                            };
                            portConfig3.refresh();
                        });
                        disableConfigStep4FinishBtn();
                        $(".configPanel .uplinkITVPort").show();
                    }
                };
                $(".configPanel .linkMode .cancelBtn")[0].onclick = function() {
                    hideIPTVConfigPanel();
                    onCancel();
                };

                // 上网和IPTV单线复用 选择IPTV口
                $('.configPanel').append($('\
                <div class="itvPort configStep2">\
                    <label class="info">请选择IPTV口用于连接机顶盒</label>\
                    <label class="desLblA">选择路由</label>\
                    <li class="textConA textConApp">\
                        <span id="itvDeviceSel1" class="select">\
                            <span class="value hsValueA"></span>\
                            <i class="arrow"></i>\
                        </span>\
                    </li>\
                    <div class="container1"></div>\
                    <input type="button" value="下一步" class="btnA subBtn nextBtn">\
                    <input type="button" value="上一步" class="btnA subBtn backBtn">\
                </div>\
                '));

                function enableConfigStep2NextBtn() {
                    $(".configPanel .configStep2 .nextBtn")[0].onclick = function() {
                        $(".configPanel .configStep2").hide();
                        $(".configPanel .configStep3 .selectWorkMode .directMode")[0].click();
                        $(".configPanel .configStep3").show();
                    };
                    $(".configPanel .configStep2 .nextBtn")[0].style.backgroundColor = "#FBEB1A";
                }

                function disableConfigStep2NextBtn() {
                    $(".configPanel .configStep2 .nextBtn")[0].onclick = null;
                    $(".configPanel .configStep2 .nextBtn")[0].style.backgroundColor = "#D9D9D9";
                }

                $(".configPanel .configStep2 .backBtn")[0].onclick = function() {
                    $(".configPanel .configStep2").hide();
                    $(".configPanel .configStep1").show();
                };

                // 上网和IPTV单线复用 选择IPTV模式
                $('.configPanel').append($('\
                <div class="workMode configStep3">\
                    <label class="info">请选择IPTV模式</label>\
                    <div class="selectWorkMode">\
                        <label class="desLblA">IPTV模式</label>\
                        <input id="directMode" name="workModeRadio" class="switchRadio directMode" type="radio" checked="true"/>\
                        <label class="noteLbl" for="directMode">直通模式</label>\
                        <input id="vlanMode" name="workModeRadio" class="switchRadio switchRadioR vlanMode" type="radio" />\
                        <label class="noteLbl" for="vlanMode">VLAN模式</label>\
                    </div>\
                    <div class="vlanId">\
                        <label class="desLblA">VLAN ID</label>\
                        <li class="textConA textCon">\
                            <input class="textA text hoverBd">\
                            <span class="desLblA vlanTip">（请输入1 - 4094之间的整数)</span>\
                            <label class="tip">VLAN ID用于标识IPTV数据特征，具体请咨询您的运营商客服或运维人员</label>\
                        </li>\
                    </div>\
                    <input type="button" value="完成" class="btnA subBtn finishBtn">\
                    <input type="button" value="上一步" class="btnA subBtn backBtn">\
                </div>\
                '));

                function enableConfigStep3FinishBtn() {
                    $(".configPanel .configStep3 .finishBtn")[0].onclick = function() {
                        hideIPTVConfigPanel();
                        enableIPTVConfig(wanIndex, configData);
                    };
                    $(".configPanel .configStep3 .finishBtn")[0].style.backgroundColor = "#FBEB1A";
                    $(".configPanel .configStep3 .vlanId .vlanTip").hide();
                }

                function disableConfigStep3FinishBtn() {
                    $(".configPanel .configStep3 .finishBtn")[0].onclick = null;
                    $(".configPanel .configStep3 .finishBtn")[0].style.backgroundColor = "#D9D9D9";
                    $(".configPanel .configStep3 .vlanId .vlanTip").show();
                }

                $(".configPanel .configStep3 .selectWorkMode .directMode")[0].onclick = function() {
                    $(".configPanel .configStep3 .vlanId").hide();
                    enableConfigStep3FinishBtn();
                    configData.workMode = "direct";
                };
                $(".configPanel .configStep3 .selectWorkMode .vlanMode")[0].onclick = function() {
                    $(".configPanel .configStep3 .vlanId .textA")[0].value = "0";
                    $(".configPanel .configStep3 .vlanId").show();
                    disableConfigStep3FinishBtn();
                    configData.workMode = "vlan";
                };
                $(".configPanel .configStep3 .vlanId input")[0].oninput = function() {
                    if (checkVlanId(this.value)) {
                        enableConfigStep3FinishBtn();
                        configData.vlanId = this.value;
                    } else {
                        disableConfigStep3FinishBtn();
                        configData.vlanId = "";
                    }
                };
                $(".configPanel .configStep3 .vlanId input")[0].onpropertychange = function() {
                    if (checkVlanId(this.value)) {
                        enableConfigStep3FinishBtn();
                        configData.vlanId = this.value;
                    } else {
                        disableConfigStep3FinishBtn();
                        configData.vlanId = "";
                    }
                };
                $(".configPanel .configStep3 .backBtn")[0].onclick = function() {
                    $(".configPanel .configStep3").hide();
                    $(".configPanel .configStep2").show();
                };

                // 上网和IPTV分线传输 选择IPTV上联口和IPTV口
                $('.configPanel').append($('\
                <div class="uplinkITVPort configStep4">\
                    <label class="info info1">请在主路由上选择IPTV上联口用于连接光猫</label>\
                    <label class="uplinkDeviceName"></label>\
                    <div class="container2"></div>\
                    <div class="crossLine"></div>\
                    <label class="info info2">请选择IPTV口用于连接机顶盒</label>\
                    <label class="desLblA">选择路由</label>\
                    <li class="textConA textConApp">\
                        <span id="itvDeviceSel2" class="select">\
                            <span class="value hsValueA"></span>\
                            <i class="arrow"></i>\
                        </span>\
                    </li>\
                    <div class="container3"></div>\
                    <input type="button" value="完成" class="btnA subBtn finishBtn">\
                    <input type="button" value="上一步" class="btnA subBtn backBtn">\
                </div>\
                '));

                function enableConfigStep4FinishBtn() {
                    $(".configPanel .configStep4 .finishBtn")[0].onclick = function() {
                        hideIPTVConfigPanel();
                        if (configData.downlinkDev.mac === configData.uplinkDev.mac) {
                            if (configData["downlinkDev"]["port"][configData["uplinkDev"]["uplinkPort"]].name === "LAN") {
                                configData["downlinkDev"]["port"][configData["uplinkDev"]["uplinkPort"]] = {
                                    state: "active",
                                    name: "IPTV上联口",
                                    rate: configData["downlinkDev"]["port"][configData["uplinkDev"]["uplinkPort"]].rate,
                                    isSfp: configData["downlinkDev"]["port"][configData["uplinkDev"]["uplinkPort"]].isSfp
                                };
                            }
                            if (configData["uplinkDev"]["port"][configData["downlinkDev"]["downlinkPort"]].name === "LAN") {
                                configData["uplinkDev"]["port"][configData["downlinkDev"]["downlinkPort"]] = {
                                    state: "active",
                                    name: "IPTV口",
                                    rate: configData["uplinkDev"]["port"][configData["downlinkDev"]["downlinkPort"]].rate,
                                    isSfp: configData["uplinkDev"]["port"][configData["downlinkDev"]["downlinkPort"]].isSfp
                                };
                            }
                        }
                        enableIPTVConfig(wanIndex, configData);
                    };
                    $(".configPanel .configStep4 .finishBtn")[0].style.backgroundColor = "#FBEB1A";
                }

                function disableConfigStep4FinishBtn() {
                    $(".configPanel .configStep4 .finishBtn")[0].onclick = null;
                    $(".configPanel .configStep4 .finishBtn")[0].style.backgroundColor = "#D9D9D9";
                }

                $(".configPanel .uplinkITVPort .backBtn")[0].onclick = function() {
                    $(".configPanel .uplinkITVPort").hide();
                    $(".configPanel .linkMode").show();
                };
            });
        }

        function hideIPTVConfigPanel() {
            $(".configPanel").remove();
            hideCoverB();
        }

        function initIPTVModule(res) {
            var wanPortArr = [];
            if(gMulWanSupport){
                for (var idx = 0, len = res["mwanRes"].length; idx < len; idx++) {
                    if (res["mwanRes"][idx][uciPortConfig.optName.enable] === uciPortConfig.optValue.enable.on) {
                        wanPortArr.push(idx);
                    }
                }
            }

            if (wanPortArr.length === 0) {
                wanPortArr = [0];
            }

            appendIPTVPanelSwitchLabel(wanPortArr);
            appendIPTVPanel(wanPortArr);

            if (wanPortArr.length >= 2) {
                $("#iptvPortConfig .wanPortSwitch").show();
                initIPTVPanelSwitch(wanPortArr[0]);
                initIPTVPanel(wanPortArr[0], res);
            } else {
                $("#iptvPortConfig .wanPortSwitch").hide();
                initIPTVPanel(wanPortArr[0], res);
            }
        }

        // @ Module: Game Module
        // @ Author: Zhou Yang
        // @ Data:   2021-03-31

        var gameConfigData = {      // 用于展示端口配置的数据格式
            setted: null,           // 用户是否设置过 Game 口
            enable: null,           // Game 是否开启
            gameDev: {              // Game 信息（目前仅支持设置一个 Game ）
                mac: null,          // 设备 MAC
                name: null,         // 设备名称
                port: null,         // 设备端口信息
                gamePort: null,     // Game 序号
                powerPos: null,     // 电源位置
                powerIdx: null,     // 电源偏移量
                state: null,        // 设备状态
                role: null          // 设备身份
            }
        };

        function checkGameLanNum(devInfo, mode) {
            var capLanNum = 0;
            var routerLanNum = 0;
            var temPortInfo;

            for (var idx = 0, len = devInfo.length; idx < len; idx++) {
                temPortInfo = transformGamePort(devInfo[idx][uciPortConfig.dynOptName.phyInfo], mode, devInfo[idx][uciPortConfig.dynOptName.sfpCapability]);

                for (var i = 0, l = temPortInfo.length; i < l; i++) {
                    if (temPortInfo[i]["name"] === "LAN") {
                        if (devInfo[idx][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap) {
                            capLanNum++;
                        }
                        routerLanNum++;
                    }
                }
            }

            return {
                capLanNum: capLanNum,
                routerLanNum: routerLanNum
            };
        }

        function transformGamePort(portInfo, mode, sfpCapabilityList) {
            var result = [];
            var transformRule = {
                display: {
                    "lan":  { state: "disable", name: "LAN" },
                    "wan1": { state: "disable", name: "WAN1" },
                    "wan2": { state: "disable", name: "WAN2" },
                    "downlink1": { state: "disable", name: "IPTV口" },
                    "downlink2": { state: "disable", name: "IPTV口" },
                    "uplink1": { state: "disable", name: "IPTV上联口" },
                    "uplink2": { state: "disable", name: "IPTV上联口" },
                    "lag": { state: "disable", name: "聚合口" },
                    "game": { state: "active", name: "游戏专用口" }
                },
                setting: {
                    "lan":  { state: "normal",  name: "LAN" },
                    "wan1": { state: "disable", name: "WAN1" },
                    "wan2": { state: "disable", name: "WAN2" },
                    "downlink1": { state: "disable", name: "IPTV口" },
                    "downlink2": { state: "disable", name: "IPTV口" },
                    "uplink1": { state: "disable", name: "IPTV上联口" },
                    "uplink2": { state: "disable", name: "IPTV上联口" },
                    "lag": { state: "disable", name: "聚合口" },
                    "game": { state: "normal", name: "LAN" }
                }
            };

            for (var idx = 0, len = portInfo.length; idx < len; idx++) {
                var portItem = JSON.parse(JSON.stringify(transformRule[mode][portInfo[idx][uciPortConfig.dynOptName.role]]));
                portItem.rate = getPhySpeedByIndex(portInfo,idx,sfpCapabilityList);
                portItem.isSfp = portInfo[idx].type.toUpperCase() == "SFP";
                result.push(portItem);
            }

            return result;
        }

        function transformGameSetting(portInfo) {
            var result = [];

            for (var idx = 0, len = portInfo.length; idx < len; idx++) {
                result.push({
                    state: portInfo[idx].state === "active" ? "active" : "disable",
                    name: portInfo[idx].name,
                    rate: portInfo[idx].rate,
                    isSfp: portInfo[idx].isSfp
                });
            }

            return result;
        }

        function getGameElements() {
            return {
                $gameEnable: $("#gameModule .gameEnable"),
                $gameOn: $("#gameModule .gameEnable .gameOn"),
                $gameOff: $("#gameModule .gameEnable .gameOff"),
                $gameConfig:  $("#gameModule .gameConfig"),
                $devName: $("#gameModule .gameConfig .devName"),
                $container: $("#gameModule .gameConfig .container"),
                $tip: $("#gameModule .gameConfig .tip"),
                $gameBtns: $("#gameModule .gameBtns"),
                $resetBtn: $("#gameModule .gameBtns .resetBtn"),
                $saveBtn: $("#gameModule .gameBtns .saveBtn")
            };
        }

        function enableGameConfig(configData) {
            var $els = getGameElements();

            // 事件解绑
            $els.$gameOn[0].onclick = null;
            $els.$gameOff[0].onclick = null;

            // DOM 赋值
            $els.$gameOn[0].checked = true;
            if (configData.gameDev.state === "online") {
                $els.$devName[0].innerHTML = configData.gameDev.name;
            } else {
                $els.$devName[0].innerHTML = configData.gameDev.name + labelText.offlineText;
                $els.$tip[0].innerHTML = labelText.offlineTip;
            }

            new PortConfig().init({
                element: $els.$container[0],
                type: "display",
                port: configData.gameDev.port,
                powerPos: configData.gameDev.powerPos,
                powerIdx: configData.gameDev.powerIdx
            });

            // 事件绑定
            $els.$gameOn[0].onclick = function() {
                return;
            };
            $els.$gameOff[0].onclick = function() {
                if (configData.setted && configData.enable === "on") {
                    disableGameConfig(configData);
                }
                if (configData.setted && configData.enable === "off") {
                    queryPortConfigData(initGameModule);
                }
                if (!configData.setted && configData.enable === "on") {
                    return;
                }
                if (!configData.setted && configData.enable === "off") {
                    queryPortConfigData(initGameModule);
                }
            };
            $els.$resetBtn[0].onclick = function() {
                showGameConfigPanel(configData, function() {});
            };
            $els.$saveBtn[0].onclick = function() {
                saveGameConfig(configData);
            };

            // DOM 显示
            if (configData.gameDev.state === "online") {
                $els.$tip.hide();
            } else {
                $els.$tip.show();
            }
            $els.$gameConfig.show();
            $els.$resetBtn.show();
        }

        function disableGameConfig(configData) {
            var $els = getGameElements();

            // 事件解绑
            $els.$gameOn[0].onclick = null;
            $els.$gameOff[0].onclick = null;

            // DOM 赋值
            $els.$gameOff[0].checked = true;

            // 事件绑定
            $els.$gameOn[0].onclick = function() {
                if (configData.setted && configData.enable === "on") {
                    queryPortConfigData(initGameModule);
                }
                if (configData.setted && configData.enable === "off") {
                    var isPortConflict = false;

                    showInfoPanel("checking");
                    queryPortConfigData(function(res) {
                        isPortConflict = checkPortConflict([
                            {
                                mac: configData.gameDev.mac,
                                portNum: configData.gameDev.gamePort,
                                portRole: uciPortConfig.dynOptValue.role.lan
                            }
                        ], res["devRes"]);
                        hideInfoPanel(true);
                        if (isPortConflict) {
                            var routerLanNum = checkGameLanNum(res["devRes"], "setting")["routerLanNum"];

                            if (routerLanNum < 1) {
                                showAlert("路由可定义端口数不足，请先关闭其他端口定义功能", null, null, function() {
                                    queryPortConfigData(initGameModule);
                                });
                            } else {
                                showAlert("原有设置的端口已被占用，请重新选择", null, null, function() {
                                    showGameConfigPanel(configData, function() {
                                        queryPortConfigData(initGameModule);
                                    });
                                });
                            }
                        } else {
                            enableGameConfig(configData);
                        }
                    });
                }
                if (!configData.setted && configData.enable === "on") {
                    return;
                }
                if (!configData.setted && configData.enable === "off") {
                    showInfoPanel("checking");
                    queryPortConfigData(function(res) {
                        var routerLanNum = checkGameLanNum(res["devRes"], "setting")["routerLanNum"];

                        if (routerLanNum < 1) {
                            hideInfoPanel(true);
                            showAlert("路由可定义端口数不足，请先关闭其他端口定义功能", null, null, function() {
                                queryPortConfigData(function(res) {
                                    initIPTVPanel(wanIndex, res);
                                });
                            });
                            return;
                        } else {
                            hideInfoPanel(false);
                            showGameConfigPanel(configData, function() {
                                queryPortConfigData(initGameModule);
                            });
                        }
                    });
                }
            };
            $els.$gameOff[0].onclick = function() {
                return;
            };
            $els.$saveBtn[0].onclick = function() {
                saveGameConfig(configData);
            };

            // DOM 显示
            $els.$gameConfig.hide();
            $els.$resetBtn.hide();
        }

        function saveGameConfig(configData) {
            var $els = getGameElements();
            var req = {};

            if ($els.$gameOn[0].checked) {
                req[uciPortConfig.fileName] = {};
                req[uciPortConfig.fileName][uciPortConfig.secType.game] = {};
                req[uciPortConfig.fileName][uciPortConfig.secType.game][uciPortConfig.optName.enable] = uciPortConfig.optValue.enable.on;
                req[uciPortConfig.fileName][uciPortConfig.secType.game][uciPortConfig.optName.gameList] = [];
                req[uciPortConfig.fileName][uciPortConfig.secType.game][uciPortConfig.optName.gameList][0] = {};
                req[uciPortConfig.fileName][uciPortConfig.secType.game][uciPortConfig.optName.gameList][0][uciPortConfig.optName.gameDev] = configData.gameDev.role === "cap" ? "FF-FF-FF-FF-FF-FF" : configData.gameDev.mac;
                req[uciPortConfig.fileName][uciPortConfig.secType.game][uciPortConfig.optName.gameList][0][uciPortConfig.optName.gamePhy] = configData.gameDev.gamePort;
            } else {
                req[uciPortConfig.fileName] = {};
                req[uciPortConfig.fileName][uciPortConfig.secType.game] = {};
                req[uciPortConfig.fileName][uciPortConfig.secType.game][uciPortConfig.optName.enable] = uciPortConfig.optValue.enable.off;
            }

            setLoadingId("saveGameConfig");
            hsLoading(true);
            $.modify(req, function(res) {
                hsLoading(false);
                if (!errHandler(res[ERR_CODE])) {
                    return;
                }

                initPortConfig();
            });
        }

        function showGameConfigPanel(configData, onCancel) {
            var devInfo = [];       // 设备信息
            var devOpts = [];       // 下拉框选项
            var devOptsBack = {};   // 下拉框选项查询表
            var capInfo;            // 主路由设备信息
            var initData;           // PortConfig 初始化数据
            var portConfig;         // PortConfig 组件实例

            queryPortConfigData(function(res) {
                for (var idx = 0, len = res["devRes"].length; idx < len; idx++) {
                    if(checkSupportFeature(res["devRes"][idx],'game')){
                        devInfo.push({
                            name: res["devRes"][idx][uciPortConfig.dynOptName.name],
                            mac: res["devRes"][idx][uciPortConfig.dynOptName.mac],
                            port: transformGamePort(res["devRes"][idx][uciPortConfig.dynOptName.phyInfo], "setting",res["devRes"][idx][uciPortConfig.dynOptName.sfpCapability]),
                            powerPos: res["devRes"][idx][uciPortConfig.dynOptName.powerPos],
                            powerIdx: res["devRes"][idx][uciPortConfig.dynOptName.powerIdx],
                            role: res["devRes"][idx][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap ? "cap" : "re"
                        });

                        if (res["devRes"][idx][uciPortConfig.dynOptName.cap] === uciPortConfig.dynOptValue.cap.cap) {
                            capInfo = devInfo[idx];
                            devOpts.push({
                                str: res["devRes"][idx][uciPortConfig.dynOptName.name] + "(主路由)",
                                value: res["devRes"][idx][uciPortConfig.dynOptName.mac]
                            });
                        } else {
                            devOpts.push({
                                str: res["devRes"][idx][uciPortConfig.dynOptName.name],
                                value: res["devRes"][idx][uciPortConfig.dynOptName.mac]
                            });
                        }

                        devOptsBack[res["devRes"][idx][uciPortConfig.dynOptName.mac]] = idx;
                    }
                }

                configData = JSON.parse(JSON.stringify(configData));
                configData.gameDev.mac = capInfo.mac;
                configData.gameDev.name = capInfo.name;
                configData.gameDev.port = null;
                configData.gameDev.gamePort = null;
                configData.gameDev.powerPos = capInfo.powerPos;
                configData.gameDev.powerIdx = capInfo.powerIdx;
                configData.gameDev.state = null;
                configData.gameDev.role = capInfo.role;

                showCoverB(function(){
                    $("#CoverB").css("opacity", "0.45");
                });
                $("body").append($('\
                <div id="gameConfigPanel">\
                    <label class="title">游戏专用口设置</label>\
                    <i class="closeBtn"/></i>\
                </div>\
                '));
                $("#gameConfigPanel")[0].style.left = ($("#Confirm")[0].offsetWidth - $("#gameConfigPanel")[0].offsetWidth) / 2 + "px";
                $("#gameConfigPanel .closeBtn")[0].onclick = function() {
                    hideGameConfigPanel();
                    onCancel();
                };

                $("#gameConfigPanel").append($('\
                <div class="configStep1">\
                    <label class="info">请选择游戏专用口</label>\
                    <label class="desLblA">选择路由</label>\
                    <li class="textConA textConApp">\
                        <span id="gameSel" class="select">\
                            <span class="value hsValueA"></span>\
                            <i class="arrow"></i>\
                        </span>\
                    </li>\
                    <div class="container"></div>\
                    <input type="button" value="完成" class="btnA subBtn gameBtn finishBtn">\
                    <input type="button" value="取消" class="btnA subBtn gameBtn cancelBtn">\
                </div>\
                '));
                initData = {
                    element: $("#gameConfigPanel .configStep1 .container")[0],
                    type: "setting",
                    port: JSON.parse(JSON.stringify(devInfo[0].port)),
                    powerPos: devInfo[0].powerPos,
                    powerIdx: devInfo[0].powerIdx,
                    callback: function(args) {
                        if (initData["port"][args.index]["state"] === "active") {
                            initData.port = JSON.parse(JSON.stringify(devInfo[0].port));
                            initData["port"][args.index]["state"] = "active";
                            initData["port"][args.index]["name"] = "游戏专用口";
                            configData.gameDev.gamePort = args.index;
                            configData.gameDev.port = transformGameSetting(initData.port);
                            configData.gameDev.state = "online";
                            enableConfigStep1FinishBtn();
                        } else {
                            initData.port = JSON.parse(JSON.stringify(devInfo[0].port));
                            configData.gameDev.gamePort = null;
                            configData.gameDev.port = null;
                            configData.gameDev.state = null;
                            disableConfigStep1FinishBtn();
                        }
                        portConfig.refresh();
                    }
                };
                portConfig = new PortConfig().init(initData);
                initCombobox("gameSel", devOpts, devOpts[0].value, function(value) {
                    configData.gameDev.mac = value;
                    configData.gameDev.name = id("gameSel").querySelector(".hsValueA").innerHTML;
                    configData.gameDev.powerPos = devInfo[devOptsBack[value]]["powerPos"];
                    configData.gameDev.powerIdx = devInfo[devOptsBack[value]]["powerIdx"];
                    configData.gameDev.role = devInfo[devOptsBack[value]]["role"];
                    initData.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                    initData.powerPos = devInfo[devOptsBack[value]]["powerPos"];
                    initData.powerIdx = devInfo[devOptsBack[value]]["powerIdx"];
                    initData.callback = function(args) {
                        if (initData["port"][args.index]["state"] === "active") {
                            initData.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                            initData["port"][args.index]["state"] = "active";
                            initData["port"][args.index]["name"] = "游戏专用口";
                            configData.gameDev.gamePort = args.index;
                            configData.gameDev.port = transformGameSetting(initData.port);
                            configData.gameDev.state = "online";
                            enableConfigStep1FinishBtn();
                        } else {
                            initData.port = JSON.parse(JSON.stringify(devInfo[devOptsBack[value]]["port"]));
                            configData.gameDev.gamePort = null;
                            configData.gameDev.port = null;
                            configData.gameDev.state = null;
                            disableConfigStep1FinishBtn();
                        }
                        portConfig.refresh();
                    };
                    portConfig.refresh();
                });

                function enableConfigStep1FinishBtn() {
                    $("#gameConfigPanel .configStep1 .finishBtn")[0].onclick = function() {
                        hideGameConfigPanel();
                        enableGameConfig(configData);
                    };
                    $("#gameConfigPanel .configStep1 .finishBtn")[0].style.backgroundColor = "#FBEB1A";
                }

                function disableConfigStep1FinishBtn() {
                    $("#gameConfigPanel .configStep1 .finishBtn")[0].onclick = null;
                    $("#gameConfigPanel .configStep1 .finishBtn")[0].style.backgroundColor = "#D9D9D9";
                }

                $("#gameConfigPanel .configStep1 .cancelBtn")[0].onclick = function() {
                    hideGameConfigPanel();
                    onCancel();
                };
                disableConfigStep1FinishBtn();
            });
        }

        function hideGameConfigPanel() {
            $("#gameConfigPanel").remove();
            hideCoverB();
        }

        function initGameModule(res) {
            var configData = JSON.parse(JSON.stringify(gameConfigData));
            var capInfo = getCapInfo(res["devRes"]);
            var reInfo;

            configData.setted = !(res["gameRes"][uciPortConfig.optName.gameList].length === 0);
            configData.enable = res["gameRes"][uciPortConfig.optName.enable] === uciPortConfig.optValue.enable.on ? "on" : "off";
            if (configData.setted) {
                configData.gameDev.mac = res["gameRes"][uciPortConfig.optName.gameList][0][uciPortConfig.optName.gameDev];
                configData.gameDev.gamePort = res["gameRes"][uciPortConfig.optName.gameList][0][uciPortConfig.optName.gamePhy];
                if (configData.gameDev.mac === "FF-FF-FF-FF-FF-FF") {
                    configData.gameDev.mac = capInfo[uciPortConfig.dynOptName.mac];
                    configData.gameDev.name = capInfo[uciPortConfig.dynOptName.name];
                    configData.gameDev.port = transformGamePort(capInfo[uciPortConfig.dynOptName.phyInfo], "display",capInfo[uciPortConfig.dynOptName.sfpCapability]);
                    configData.gameDev.powerPos = capInfo[uciPortConfig.dynOptName.powerPos];
                    configData.gameDev.powerIdx = capInfo[uciPortConfig.dynOptName.powerIdx];
                    configData.gameDev.state = capInfo[uciPortConfig.dynOptName.online] === uciPortConfig.dynOptValue.online.online ? "online" : "offline";
                    configData.gameDev.role = "cap";
                } else {
                    reInfo = getDevInfoByMac(res["devRes"], configData.gameDev.mac);
                    configData.gameDev.name = reInfo[uciPortConfig.dynOptName.name];
                    configData.gameDev.port = transformGamePort(reInfo[uciPortConfig.dynOptName.phyInfo], "display",reInfo[uciPortConfig.dynOptName.sfpCapability]);
                    configData.gameDev.powerPos = reInfo[uciPortConfig.dynOptName.powerPos];
                    configData.gameDev.powerIdx = reInfo[uciPortConfig.dynOptName.powerIdx];
                    configData.gameDev.state = reInfo[uciPortConfig.dynOptName.online] === uciPortConfig.dynOptValue.online.online ? "online" : "offline";
                    configData.gameDev,role = "re";
                }
                configData.gameDev.port[parseInt(configData.gameDev.gamePort)]["state"] = "active";
                configData.gameDev.port[parseInt(configData.gameDev.gamePort)]["name"] = "游戏专用口";
            }

            if (configData.enable === "on") {
                enableGameConfig(configData);
            } else {
                disableGameConfig(configData);
            }
        }

        function initPortConfig() {
            if (gMWanLoadBalanceSupport) {
                $("#loadBalanceCon").removeClass("disNone");
                $("div.dnsBalanceInfo").removeClass("disNone");
                $.query({"function":{"name":"new_module_spec"}}, function(result) {
                    var loadBalanceMode = result.function.new_module_spec.mwan_load_balance_mode;
                    dnsBalanceOptions = [];
                    for (var i = 0; i < loadBalanceMode.length; ++i) {
                        switch(loadBalanceMode[i]) {
                            case 'topspeed_mode':
                                dnsBalanceOptions.push({str:"极速模式",value:"topspeed_mode"});
                                break;
                            case 'compat_mode':
                                dnsBalanceOptions.push({str:"兼容模式",value:"compat_mode"});
                                break;
                            case 'dns_balance':
                                dnsBalanceOptions.push({str:"DNS均衡",value:"dns_balance"});
                                break;
                        }
                    }
                }, false);
            }

            queryPortConfigData(function(res) {
                if(gMulWanSupport){
                    $("#dualWanSetting").show();
                    if (curSysMode != uciSystem.optValue.sysMode.routerMode
                        || curDhcpdStatus == uciDhcpd.optValue.enable.off) {
                        $("#dualWanTip").show();
                        $("#wanPanel").hide();
                        disableBtn("saveWanSelOpen", true);
                        $("#wanOn").attr("disabled", true);
                        id("wanOff").checked = true;
                        $("#wanOff").attr("disabled", true);
                        if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
                            if (curSysMode == uciSystem.optValue.sysMode.apMode) {
                                $("#dualWanTipText").text("上网方式为AP（有线中继）时，无法使用双WAN口功能");
                            } else {
                                $("#dualWanTipText").text("上网方式为桥接（无线中继）时，无法使用双WAN口功能");
                            }
                        } else {
                            $("#dualWanTipText").text("DHCP服务器关闭时，无法使用双WAN口功能");
                        }
                    } else {
                        initMultiWanModule(res);
                    }
                }else{
                    $("#dualWanSetting").hide();
                }
                if(gSfpRateSupport){
                    $("#sfpRateSetting").show();
                    initSFPModule(res);
                }else{
                    $("#sfpRateSetting").hide();
                }
                if(gLagSupport){
                    $("#lanTogetherSetting").show();
                    initLagModule(res);
                }else{
                    $("#lanTogetherSetting").hide();
                }
                if(gIptvSupport){
                    $("#iptvPortConfig").show();
                    initIPTVModule(res);
                }else{
                    $("#iptvPortConfig").hide();
                }
                if(gGameSupport){
                    $("#gameModule").show();
                    initGameModule(res);
                }else{
                    $("#gameModule").hide();
                }
            });
        }

        function errHandler(errCode)
        {
            var showStr = "";

            switch (errCode) {
                case ENONE:
                    return true;
                case EIPTVTABLEFULL:
                    showStr = errStr.iptvTableFull;
                    break;
                case EIPTVENTRYCONFLIC:
                    showStr = errStr.iptvEntryConflict;
                    break;
                case EIPTVENTRYNOTEXIST:
                    showStr = errStr.iptvEntryNoExist;
                    break;
                case EIPTVLINKMODEERROR:
                    showStr = errStr.iptvLinkModeError;
                    break;
                case EIPTVWORKMODEERROR:
                    showStr = errStr.iptvWorkModeError;
                    break;
                case EIPTVVLANIDERROR:
                    showStr = errStr.iptvVlanIdError;
                    break;
                case EIPTVWANINDEXERROR:
                    showStr = errStr.iptvWanIndexError;
                    break;
            }

            showAlert(showStr);
            return false;
        }

        var data = {"dhcpd":{"name":"udhcpd"}};
        if (gSysModeSupport) {
            data.system = {"name":"sys_mode"};
        }

        $.query(data, function(result) {
            if (gSysModeSupport) {
                curSysMode = result.system.sys_mode.mode;
            }
            curDhcpdStatus = result.dhcpd.udhcpd.enable;
            initPortConfig();
        });
    });
</script>
<div id="dualWanSetting" class="hcCo portSetWrapper disNone">
    <div class="title">
        <label class="title">双WAN口</label>
    </div>
    <div class="block" id="wanStable">
        <p class="portFeatureInfo">支持2条宽带接入，双线上网，带宽叠加。</p>
        <ul class="gridLine">
            <label class="desLblA switchLabelName">双WAN口</label>
            <input id="wanOn" name="wanRadio" class="switchRadio" type="radio" />
            <label class="noteLbl" for="wanOn">开</label>
            <input id="wanOff" name="wanRadio" class="switchRadio switchRadioR" type="radio" />
            <label class="noteLbl" for="wanOff">关</label>
        </ul>
        <ul class="gridLine gridLineA gridLineTips" id="dualWanTip">
            <div class="warnCon">
                <img src="../web-static/images/routerBg.png" />
            </div>
            <span id="dualWanTipText"></span>
        </ul>
        <div class="blockFuncA savePortSelWrapper">
            <input id="saveWanSelOpen" type="button" value="保存" class="btnA subBtn saveBtn" />
        </div>
        <div id="wanPanel" class="disNone">
            <label class="routerName">路由器名称A</label>
            <div class="wanDisplayContainer"></div>
            <div class="wanSetInfo">请在"上网设置"中进行WAN口设置</div>
        </div>
        <div id="wanSetItems" class="disNone">
            <ul class="gridLine gridLineA">
                <label class="desLblA bandwidthSet dualWanLabel">带宽设置</label>
                <li class="textConA textCon">
                    <span id="bandWidthSel" class="select">
                        <span class="value hsValueA"></span>
                        <i class="arrow"></i>
                    </span>
                </li>
            </ul>
            <div class="wanBandWidthWrap">
                <ul class="gridLine gridLineA gridLineA2">
                    <label class="desLblA dualWanLabel">WAN1口带宽</label>
                    <li class="textConA textCon"><input id="wanBandWidth1" class="textA text hoverBd imeModeN" maxLength="6" /></li>
                    <label class="bandWidthEnd">Mbps</label>
                    <label id="bandWidthTip1" class="bandWidthTip disNone">请输入1-100000的整数</label>
                </ul>
                <ul class="gridLine gridLineA gridLineA2">
                    <label class="desLblA dualWanLabel">WAN2口带宽</label>
                    <li class="textConA textCon"><input id="wanBandWidth2" class="textA text hoverBd imeModeN" maxLength="6" /></li>
                    <label class="bandWidthEnd">Mbps</label>
                    <label id="bandWidthTip2" class="bandWidthTip disNone">请输入1-100000的整数</label>
                </ul>
            </div>
            <ul class="gridLine gridLineA disNone" id="loadBalanceCon">
                <label class="desLblA bandwidthSet dualWanLabel">均衡模式</label>
                <li class="textConA textCon">
                    <span id="dnsBalanceSel" class="select">
                        <span class="value hsValueA"></span>
                        <i class="arrow"></i>
                    </span>
                </li>
            </ul>
            <div class="dnsBalanceInfo disNone">极速模式可提升上网速率，但可能存在兼容性问题。若上网出现问题，请选择兼容模式。</div>
            <div class="blockFuncA selPortArea">
                <input id="reSelWanPort" type="button" value="重新选择端口" class="btnA subBtn portBtn" />
                <input id="saveDualWan" type="button" value="保存" class="btnA subBtn portBtn" />
            </div>
        </div>
    </div>
</div>
<div id="iptvPortConfig" class="hcCo disNone">
    <div class="title iptvPortTitle">
        <label class="title titleText">IPTV口</label>
    </div>
    <p class="portFeatureInfo">设置IPTV接口，可支持不同场景下的IPTV数据传输。</p>
    <div class="block wanPortSwitch">
        <ul class="gridLine switchBtns"></ul>
    </div>
</div>
<div id="gameModule" class="hcCo disNone">
    <div class="title gameModuleTitle">
        <label class="title titleText">游戏专用口</label>
    </div>
    <div class="block">
        <p class="portFeatureInfo">设置游戏专用线口，优先转发，降低延时。</p>
        <ul class="gridLine gameEnable">
            <label class="desLblA">游戏专用口</label>
            <input id="gameOn" name="gameEnableSwitch" class="switchRadio gameOn" type="radio"/>
            <label class="noteLbl" for="gameOn">开</label>
            <input id="gameOff' + idx + '" name="gameEnableSwitch" class="switchRadio switchRadioR gameOff" type="radio" />
            <label class="noteLbl" for="gameOff">关</label>
        </ul>
        <ul class="gridLine gameConfig">
            <label class="devName"></label>
            <div class="container"></div>
            <label class="tip"></label>
        </ul>
        <div class="blockFuncA gameBtns savePortSelWrapper">
            <input type="button" value="重新选择端口" class="btnA subBtn gameBtn resetBtn">
            <input type="button" value="保存" id="saveGameConfig" class="btnA subBtn gameBtn saveBtn">
        </div>
    </div>
</div>
<div id="lanTogetherSetting" class="hcCo portSetWrapper disNone">
    <div class="title">
        <label class="title">端口聚合</label>
    </div>
    <div class="block">
        <p class="portFeatureInfo">将2个LAN口聚合，实现网口速率叠加。</p>
        <ul class="gridLine">
            <label class="desLblA switchLabelName">端口聚合</label>
            <input id="togetherOn" name="togetherRadio" class="switchRadio" type="radio" />
            <label class="noteLbl" for="togetherOn">开</label>
            <input id="togetherOff" name="togetherRadio" class="switchRadio switchRadioR" type="radio" />
            <label class="noteLbl" for="togetherOff">关</label>
        </ul>
        <div class="blockFuncA savePortSelWrapper">
            <input id="saveTogetherSel" type="button" value="保存" class="btnA subBtn saveBtn" />
        </div>
        <div id="togetherPanel">
            <div id="lagDisplayList">
                <div class="lagDisplayItem">
                    <label class="routerName">路由器名称A</label>
                    <div class="togetherDisplayContainer"></div>
                    <div class="portInfo">
                        <i class="errIcon"></i>
                        <label>设备已离线，请检查路由器连接或重新选择端口</label>
                    </div>
                </div>
            </div>
            <div class="blockFuncA selPortArea">
                <input id="reSelTogetherPort" type="button" value="更改/添加端口" class="btnA subBtn portBtn" />
                <input id="saveTogetherPort" type="button" value="保存" class="btnA subBtn portBtn" />
            </div>
        </div>
    </div>
</div>
<div id="sfpRateSetting" class="hcCo portSetWrapper disNone">
    <div class="title">
        <label class="title">{%label.sfpRate%}</label>
    </div>
    <div class="block">
        <p class="portFeatureInfo">{%label.sfpInfo%}</p>
        <div id="SFPRatePanel">
            <table id="SFPRateSetTbl" class="dataGrid"></table>
            <div class="blockFuncA selPortArea">
                <input id="saveSFPRate" type="button" value="保存" class="btnA subBtn portBtn" />
            </div>
        </div>
    </div>
</div>