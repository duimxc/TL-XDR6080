<style type="text/css">
	#dualWanIpv6Wrapper{
		top:2px;
		width: 680px;
	}
	.dualWanWrapper ul{
		display:inline-block;
	}
	.dualWanWrapper ul label{
		display:table-cell;
		width: 160px;
        font-size: 14px;
        color: #FFFFFF;
        line-height: 32px;
        text-align: center;
        border: 1px solid #FFFFFF;
        cursor: pointer;
	}
	.dualWanWrapper ul label.selected {
        color: #2BA2D8;
        background-color: #FFFFFF;
	}
	.dualWanWrapper ul label:first-child {
        border-radius: 4px 0 0 4px;
	}
	.dualWanWrapper ul label:last-child {
        border-radius: 0 4px 4px 0;
	}
	.dualWanWrapper{
		text-align: center;
		padding-bottom: 32px;
		position: relative;
		top: 0px;
	}
	#ipv6Content{
		display: none;
	}
	ul.dnsSetting{
		display: none;
	}
	li.macCloneLi label.macCloneLi{
		color:#FFFFFF;
		font-size:12px;
		line-height:20px !important;
	}
	#wanStatus i{
		display:inline-block;
		height:13px;
		width:13px;
		vertical-align:middle;
		line-height:0px;
	}
	li.macCloneLi{
		color:#FFFFFF;
		font-size:12px;
		line-height:20px !important;
	}
	ul.addrleaseLine{
		display:none;
	}
	#ipv6LanDetalis{
		display: none;
	}
	ul.gridLine input.disable{
		opacity: 0.8;
	}
	#ipv6WanHelp{
		display: none;
	}
	ul.gridLineTips{
		margin-top:8px !important;
		height:auto;
		display:none;
		line-height: unset;
	}
	ul.gridLineTips span{
		width:225px;
		color:#FFF;
		line-height:18px;
		font-size:12px;
	}
	div.warnCon {
		width: 16px;
		height: 16px;
		overflow: hidden;
		display: inline-block;
		vertical-align: top;
	}
	div.warnCon img {
		margin-top: -187px;
		margin-left: -467px;
	}
</style>
<div id="hcCo" class="hcCo">
	<div id="dualWanIpv6Wrapper" class="dualWanWrapper disNone">
		<ul class="gridLine">
			<label>{%label.wan1Port%}</label>
			<label>{%label.wan2Port%}</label>
		</ul>
	</div>
	<div class="title">
		<label class="title">{%label.basicSet%}</label>
		<i class="helpBtn" id="ipv6WanHelp"></i>
	</div>
	<ul class="gridLine gridLineA gridLineTips" id="relayTip">
		<div class="warnCon">
			<img src="../web-static/images/routerBg.png" />
		</div>
		<span id="relayTipText"></span>
	</ul>
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.ipv6Enable%}</label>
		<input id="ipv6On" name="ipv6Switch" class="switchRadio" type="radio" /><label class="noteLbl" for="ipv6On">{%label.ipv6On%}</label>
		<input id="ipv6Off" name="ipv6Switch" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="ipv6Off">{%label.ipv6Off%}</label>
	</ul>
	<div id="ipv6Content">
		<div id="ipv6WanDetalis"></div>
		<div id="ipv6LanDetalis">
			<div class="title">
				<label class="title">{%label.ipv6LanSetting%}</label>
				<i class="helpBtn" id="ipv6LanHelp"></i>
			</div>
			<div class="block">
				<ul class="gridLine gridLineA">
					<label class="desLblA">{%label.ipv6HostSetting%}</label>
					<li class="textConA textCon">
						<span id="hostSettingSel" class="select">
							<span class="value hsValueA"></span>
							<i class="arrow"></i>
						</span>
					</li>
				</ul>
				<ul id="lanPrefixUl" class="gridLine gridLineA">
					<label class="desLblA">{%label.ipv6Pre%}</label>
					<!--<li class="textConA textCon">
						<input id="ipv6Pre" class="textA text hoverBd" maxLength="39" />
						<i class="tip"></i>
					</li>-->
					<li class="textConA textCon"><input id="ipv6Pre" class="textA text hoverBd" maxLength="39" /><i class="tip"></i></li>
					<label class="noteLbl macCloneLi"></label>
					<label class="noteLbl">/64</label>
				</ul>
				<ul class="gridLine gridLineA addrleaseLine">
					<label class="desLblA">{%label.ipv6AddrLease%}</label>
					<li class="textConB textCon">
						<input id="ipv6Lease" class="textB text hoverBd" maxLength="4" />
						<i class="tip"></i>
					</li>
					<label class="noteLbl">{%label.ipv6AddrLeaseTip%}</label>
				</ul>
				<ul class="gridLine gridLineA dnsSetting">
					<label class="desLblA">{%label.ipv6DnsSetting%}</label>
					<li class="textConA textCon">
						<span id="lanDnsSel" class="select">
							<span class="value hsValueA"></span>
							<i class="arrow"></i>
						</span>
					</li>
				</ul>
				<ul class="gridLine gridLineA mpPhoneRgt10">
					<label class="desLblA">{%label.dns0%}</label>
					<label id="lan_pri_dns" class="noteLbl"></label>
				</ul>
				<ul class="gridLine gridLineA mpPhoneRgt10">
					<label class="desLblA">{%label.dns1%}</label>
					<label id="lan_snd_dns" class="noteLbl"></label>
				</ul>
				<ul class="gridLine gridLineA mpPhoneRgt10">
					<label class="desLblA">{%label.ipv6LanGlobalAddr%}</label>
					<label id="lan_addr" class="noteLbl"></label>
				</ul>
				<ul class="gridLine gridLineA mpPhoneRgt10">
					<label class="desLblA">{%label.ipv6LanLocalAddr%}</label>
					<label id="lan_local_addr" class="noteLbl"></label>
				</ul>
				<div class="blockFuncA">
					<input id="lanSave" type="button" value="{%btn.save%}" class="btnA subBtn" />
				</div>
			</div>
		</div>
	</div>
</div>
<script type="text/javascript">
	var ROUTER_MAC = "routerMac";
	var CLONE_MAC = "cloneMac";
	var CUSTOM_MAC = "customMac";
	var HOST_DHCPv6 = "0";
	var HOST_SLAAC = "1";
	var DNS_DHCPv6 = "0";
	var DNS_RDNSS = "1";

	var DHCP_NAME = "dhcpcv6";
	var STATIC_NAME = "staticv6";
	var PPPoE_NAME = "pppoev6";
	var BRIDGE_NAME = "bridgev6";
	var WAN_NAME = "wanv6";
	var LAN_NAME = "lanv6";
	var WAN_STATUS_NAME = "wanv6_status";
	var LAN_STATUS_NAME = "lanv6_status";

	var SWITCH_ON = 1;		// IPv6功能开启
	var SWITCH_OFF = 0;		// IPv6功能关闭

	var SWITCH_STATUS_IDLE_SUCCESS = 0;
	var SWITCH_STATUS_SWITCHING = 1;
	var SWITCH_STATUS_FAILED = 2;

	var IPV6_State;
	var isSwitchLoading = false;

	var reconnectLanCount = 0;
	var reconnectLanCountMax = 3;

	var wanTypesToVal = {};
	wanTypesToVal[DHCP_NAME] = 0;
	wanTypesToVal[STATIC_NAME] = 1;
	wanTypesToVal[PPPoE_NAME] = 2;
	wanTypesToVal[BRIDGE_NAME] = 8;

	var LAN_DHCP6 = "dhcpsv6";
	var LAN_SLAAC = "slaac";
	var LAN_RDNSS = "rdnss";

	var IP_CONFIG_AUTO = "auto";
	var IP_CONFIG_DHCPV6 = "dhcpv6";
	var IP_CONFIG_SLAAC = "slaac";
	var IP_CONFIG_STATIC = "static";

	var PD_MODE_NON_TEMP = "non_temp";
	var PD_MODE_PREFIX = "prefix";

	var DNS_MODE_DYN = "dynamic";
	var DNS_MODE_MAN = "manual";

	var lanHostFlag = null;
	var preDelgOnFlag = false;
	var updateLanHandle = null, updateTimerHandle = null, updateReconnectLanHandle = null;
	var refreshWanStatus = null;

	var wanOptions = [{str:label.pppoe, value:2},
					  {str:label.staticIp, value:1},
					  {str:label.dhcpIpv6, value:0},
					  {str:label.bridgeIpv6, value:8}];

	var wanMacOptions = [{str:label.routerMac, value:ROUTER_MAC},
						 {str:label.cloneMac, value:CLONE_MAC},
						 {str:label.customMac, value:CUSTOM_MAC}];

	var hostSettingOptions = [{str:label.ipv6DHCPv6, value:HOST_DHCPv6},
							  {str:label.ipv6SLAAC, value:HOST_SLAAC}];

	var lanDnsOptions = [{str:label.ipv6DHCPv6, value:DNS_DHCPv6},
						 {str:label.ipv6RDNSS, value:DNS_RDNSS}];

	var wanTypes = ['DynamicIpv6.htm', 'StaticIpv6.htm', 'PPPoEIpv6.htm'];
	wanTypes[LINK_TYPE_BRIDGE] = 'BridgeIpv6.htm';

	var WAN = uciNetwork.optValue.ifname.wan;
	var HOST = uciNetwork.optValue.ifname.host;
	var FACTORY = uciNetwork.optValue.ifname.factory;
	var wanMacVal, hostMacVal, factoryMacVal;
	var curLanPrefix, localLanAddr;

	var wanSelectRefreshHandle = null;
	var wanSelectRefreshCount = 0;

	var EIPV66TO4ADDR = -56999;

	var curSysMode = uciSystem.optValue.sysMode.routerMode;

	/* START: MAC SETTING */
	function wanMacErrHandle(errNo, objOrId)
	{
		var showStr = "";

		switch (errNo)
		{
		case ENONE:
			return false;
		case EINVMACFMT:
			showStr = errStr.macFmtErr;
			break;
		case EINVMACZERO:
			showStr = errStr.macZeroErr;
			break;
		case EINVMACBROAD:
			showStr = errStr.macBroadErr;
			break;
		case EINVMACGROUP:
			showStr = errStr.macGroupErr;
			break;
		default:
			showStr = errStr.invRequestFail;
			break;
		}

		showAlert(showStr, objOrId);
		return true;
	}

	function setMacInfo(data,currentWanPortIdx)
	{
		var mac = data[uciNetwork.fileName][uciNetwork.dynData.ifaceMac];

		var wanMac = id("wanMac");
		var wanMacSel;

		//wanMacVal = mac[WAN];
		var wanKey = "wan";
		if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
			wanKey = "wan";
		}else{
			wanKey = "wan_" + currentWanPortIdx;
		}

		wanMacVal = data.protocol[wanKey]["macaddr"];
		hostMacVal = mac[HOST];
		factoryMacVal = data.protocol[wanKey]["fac_macaddr"];

		wanMac.value = wanMacVal.toUpperCase();

		if (wanMacVal.toUpperCase() == factoryMacVal.toUpperCase())
		{
			wanMacSel = ROUTER_MAC;
		}
		else if (wanMacVal.toUpperCase() == hostMacVal.toUpperCase())
		{
			wanMacSel = CLONE_MAC;
		}
		else
		{
			wanMacSel = CUSTOM_MAC;
		}

		selectInit("wanMacSel", wanMacOptions, wanMacSel, wanMacSelectChange);
		wanMacSelectChange(wanMacSel);
		if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
			id("wanMacSel").disable(true);
		}
	}

	function wanMacSelectChange(value)
	{
		var INLINE_BLOCK = ((isIESix || isIESeven) ? "inline":"inline-block");
		var macMac = id("wanMac");
		var li = $("#macCloneUl li");

		switch (value)
		{
		case ROUTER_MAC:
			macMac.value = li[1].innerHTML = factoryMacVal.toUpperCase();
			li[1].style.display = INLINE_BLOCK;
			li[0].style.display = "none";
			break;
		case CLONE_MAC:
			macMac.value = li[1].innerHTML = hostMacVal.toUpperCase();
			li[1].style.display = INLINE_BLOCK;
			li[0].style.display = "none";
			break;
		case CUSTOM_MAC:
			macMac.value = wanMacVal.toUpperCase();
			li[0].style.display = INLINE_BLOCK;
			li[1].style.display = "none";
			break;
		default:
			break;
		}
	}
	/* END: MAC SETTING */

	function wanCheckWDS(callBack, option, alertCallback, alertStr)
	{
		var rqData = {};

		rqData[uciWireless.fileName] = {};
		rqData[uciWireless.fileName][KEY_NAME] = [uciWireless.dynData.wds_2g, uciWireless.dynData.wds_5g];

		$.query(rqData, function(result){
			var tmp, g_wdsStatus;

			if (result[ERR_CODE] == ENONE &&
				(result[uciWireless.fileName][uciWireless.dynData.wds_2g][uciWireless.dynOptName.enable] == uciWireless.dynOptValue.enable.on) ||
				(result[uciWireless.fileName][uciWireless.dynData.wds_5g][uciWireless.dynOptName.enable] == uciWireless.dynOptValue.enable.on))
			{
				if (typeof alertStr == "undefined")
				{
					showAlert(label.wanWDSTip);
				}
				else
				{
					showAlert(alertStr);
				}

				typeof alertCallback == "function" && alertCallback();
			}
			else
			{
				typeof callBack == "function" && callBack(option);
			}
		});
	}

	function lanErrHandle(errNo, objOrId)
	{
		var showStr = "";

		switch (errNo)
		{
		case ENONE:
			return false;
		case EIPV6INVIP:
			showStr = errStr.ipv6PrefixErr;
			break;
		case EIPV6INVIPFMT:
			showStr = errStr.ipv6AddrFmtErr;
			break;
		case EIPV6INVGROUPIP:
			showStr = errStr.ipv6PrefixGroupErr;
			break;
		case EIPV6LOOP:
			showStr = errStr.ipv6PrefixLoopErr;
			break;
		case EIPV6INVPREFIX:
			showStr = errStr.ipv6InvPrefix;
			break;
		case EINVLEASETIME:
			showStr = errStr.dhcpsLeaseErr;
			break;
		case EIPV6LINKLOCAL:
			showStr = errStr.ipv6PrefixLinkLoaclErr;
			break;
		case EIPV66TO4ADDR:
			showStr = errStr.ipv6Prefix6To4Err;
			break;
		default:
			showStr = errStr.invRequestFail;
			break;
		}

		showAlert(showStr, objOrId);
		return true;
	}

	/* START: CHECK_INPUT FUNCTION*/
	function getIpv6Info(value)
	{
		var doubleColonCounts = 0, singleColonCounts = 0, valueCounts = 0, colonArray, valueArray;

		/* 提取冒号 */
		value = value.replace(/：/g, ":");
		colonArray = value.match(/:+/g) || null;
		valueArray = value.split(/:+/g) || null;

		if (colonArray != null && colonArray.length < 8)
		{
			for (var i = 0; i < colonArray.length; i++)
			{
				if (colonArray[i] == ":")
				{
					singleColonCounts++;
				}
				else if (colonArray[i] == "::")
				{
					doubleColonCounts++;
				}
				else
				{
					//除了:和::,一律非法
					return {valid: false};
				}
			}

			/* 只允许出现一次零压缩法 */
			if (doubleColonCounts > 1)
			{
				return {valid: false};
			}
			else if (doubleColonCounts == 1)
			{
				/* 存在零压缩法，地址数不可超过6个 */
				for (i = 0; i < valueArray.length; i++)
				{
					if (valueArray[i] != "")
					{
						valueCounts++;
					}
				}

				if (valueCounts > 6)
				{
					return {valid: false};
				}
			}else
			{
				if (singleColonCounts < 7)
				{
					return {valid: false};
				}
			}

			/* 不允许单冒号前后不存在数值的情况 */
			if ((valueArray[0] == "" && colonArray[0] == ":") ||
				(valueArray[valueArray.length - 1] == "" && colonArray[colonArray.length - 1] == ":"))
			{
				return {valid: false};
			}

			return {valid: true, singleColonCounts: singleColonCounts, doubleColonCounts: doubleColonCounts};
		}
		else
		{
			//大于7个或者没有冒号,肯定非法
			return {valid: false};
		}
	}

	function checkIPv6Format(value)
	{
		var str, singleColonCounts, doubleColonCounts, ipAddrs, regs;

		var ret = getIpv6Info(value);

		if (ret.valid != true)
		{
			return EIPV6INVIPFMT;
		}

		singleColonCounts = ret.singleColonCounts;
		doubleColonCounts = ret.doubleColonCounts;

		/* 补全成完整格式的IPv6地址 */
		str = value.replace("::", new Array(7 - singleColonCounts + 1).join(":"));

		ipAddrs = str.split(":");

		if (ipAddrs.length != 8)
		{
			return EIPV6INVIPFMT;
		}

		regs = /^[0-9a-fA-F]{1,4}$/;
		for (var i = 0; i < ipAddrs.length; i++)
		{
			if (ipAddrs[i] != "" && !regs.test(ipAddrs[i]))
			{
				return EIPV6INVIPFMT;
			}
		}

		return ENONE;
	}

	/* 转为16进制完整形式 */
	function ipv6Init(value)
	{
		var ipv6State = getIpv6Info(value);
		var str = value.replace("::", new Array(7 - ipv6State.singleColonCounts + 1).join(":"));
		var ipAddrs = str.split(":");

		for (var i = 0; i < ipAddrs.length; i++)
		{
			if (ipAddrs[i].length < 4)
			{
				ipAddrs[i] = "0x" + new Array(4 - ipAddrs[i].length + 1).join("0") + ipAddrs[i];
			}
			else
			{
				ipAddrs[i] = "0x" + ipAddrs[i];
			}
		}

		return ipAddrs;
	}

	/* IPv6地址比较 */
	function ipv6Compare(value, target)
	{
		value = value.replace(/：/g, ":");
		target = target.replace(/：/g, ":");

		if (checkIPv6Format(value) != ENONE || checkIPv6Format(target) != ENONE)
		{
			return false;
		}

		var valueArr = ipv6Init(value);
		var targetArr = ipv6Init(target);

		for (var i = 0; i < 8; i++)
		{
			if (valueArr[i].toLowerCase() != targetArr[i].toLowerCase())
			{
				return false;
			}
		}

		return true;
	}

	function checkIPv6(value, options)
	{
		var ret, ipaddrs;

		value = value.replace(/：/g, ":");

		/* 先检查格式 */
		ret = checkIPv6Format(value);

		if (ret != ENONE)
		{
			return ret;
		}

		/* 开始检查地址类型 */
		ipaddrs = ipv6Init(value);

		/* 链路本地地址 */
		if (ipaddrs[0] >= 0xFE80 && ipaddrs[0] <= 0xFEBF)
		{
			if (options != undefined && options["allow_localLink"] == true)
			{
				if (ipaddrs[0] == 0xFE80)
				{
					return ENONE;
				}
			}
			return EIPV6LINKLOCAL;
		}

		if (ipaddrs[0] == 0 && ipaddrs[1] == 0 &&
			ipaddrs[2] == 0 && ipaddrs[3] == 0 &&
			ipaddrs[4] == 0 && ipaddrs[5] == 0 &&
			ipaddrs[6] == 0)
		{
			if (ipaddrs[7] == 0x01)	/* 环回地址 */
			{
				return EIPV6LOOP;
			}
			else if (ipaddrs[7] == 0)	/* 未指定地址 */
			{
				return EIPV6INVIP;
			}
		}

		/* 组播地址 */
		if (ipaddrs[0] >= 0xFF00 && ipaddrs[0] <= 0xFF0F)
		{
			return EIPV6INVGROUPIP;
		}

		/* 目前可用的全球单播地址为2000::/3 */
		if (ipaddrs[0] > 0x3FFF || ipaddrs[0] < 0x2000)
		{
			return EIPV6INVIP;
		}

		/* 目前不允许6to4地址设置 */
		if (ipaddrs[0] == 0x2002)
		{
			return EIPV66TO4ADDR;
		}

		return ENONE;
	}

	function checkGatewayV6(value)
	{
		var options = {"allow_localLink": true};
		return ENONE != checkIPv6(value, options) ? EIPV6INVGTW : ENONE;
	}

	function checkPriDnsV6(value)
	{
		return ENONE != checkIPv6(value) ? EIPV6INVFDNSVR : ENONE;
	}

	function checkSeDnsV6(value)
	{
		if ("" == value)
		{
			return ENONE;
		}

		return ENONE != checkIPv6(value) ? EIPV6INVSDNSVR : ENONE;
	}

	function checkLanPrefix(value)
	{
		value = value.replace(/：/g, ":");

		var retu = checkIPv6Format(value);
		if (retu != ENONE) {
			return EIPV6INVPREFIX;
		}

		var ipaddrs = ipv6Init(value);

		/* 此处作限制只是针对后缀长度为固定64的情况, 之后若前缀长度开放设置，此处逻辑需要修改 */
		if (ipaddrs[4] != 0 || ipaddrs[5] != 0 || ipaddrs[6] != 0 || ipaddrs[7] != 0)
		{
			return EIPV6INVPREFIX;
		}

		var ret = checkIPv6(value);
		if (ret != ENONE)
		{
			return ret;
		}

		return ENONE;
	}

	function checkLeastTime(value)
	{
		if ((false == checkNum(value)) ||
			(false == checkNumRange(parseInt(value, 10), 2880, 1)))
		{
			return EINVLEASETIME;
		}

		return ENONE;
	}
	/* END: CHECK_INPUT FUNCTION */

	/* 前缀开启切换*/
	/* value: true - 开启, false - 关闭 */
	function lanPrefixChange(value)
	{
		var INLINE_BLOCK = ((isIESix || isIESeven) ? "inline":"inline-block");
		var lanPrefix = id("ipv6Pre");
		var li = $("#lanPrefixUl li");
		var label = $("#lanPrefixUl label");
		if (label[1].innerHTML.length == 0)
		{
			label[1].innerHTML = "::";
		}

		if (value)
		{
			label[1].style.display = INLINE_BLOCK;
			li[0].style.display = "none";
		}
		else
		{
			li[0].style.display = INLINE_BLOCK;
			label[1].style.display = "none";
			id("ipv6Pre").value = $("#lanPrefixUl label")[1].innerHTML;
		}
	}

	function setHelpStr(type, targetID)
	{
		var helpStr;

		switch (type)
		{
		case LINK_TYPE_DHCP:
			helpStr = "dynamicIpv6Help";
			break;
		case LINK_TYPE_STATIC_IP:
			helpStr = "staticIpv6Help";
			break;
		case LINK_TYPE_PPPOE:
			helpStr = "PPPoEv6Help";
			break;
		case LINK_TYPE_BRIDGE:
			helpStr = "Bridgev6Help";
			break;
		case HOST_DHCPv6:
			helpStr = "lanHostDhcpv6Help";
			break;
		case HOST_SLAAC:
			helpStr = "lanHostSlaacHelp";
			break;
		}

		$("#" + targetID).attr("helpStr", helpStr);
		loadPageHandleBg();
	}

	function wanSelectChange(value)
	{
		if ("" == value.toString())
		{
			value = LINK_TYPE_PPPOE;
		}

		/* 切换帮助信息 */
		setHelpStr(value, "ipv6WanHelp");

		wanSelectRefreshCount = 0;

		if (wanSelectRefreshHandle != null)
		{
			clearTimeout(wanSelectRefreshHandle);
		}

		wanSelectRefreshHandle = $.setTimeout(function(){
			wanSelectRefreshCount++;

			if (wanSelectRefreshCount > 4)
			{
				wanSelectRefreshCount = 0;
				return;
			}

			load();
		}, 2 * 1000);

		function load()
		{
			loadPage(wanTypes[value], "ipv6WanDetalis", function(){
				if (wanSelectRefreshHandle != null)
				{
					clearTimeout(wanSelectRefreshHandle);
					wanSelectRefreshHandle = null;
				}

				wanSelectRefreshCount = 0;

				if (value == LINK_TYPE_BRIDGE)
				{
					$("#ipv6LanDetalis").css("display", "none");
				}
				else if ($("#ipv6LanDetalis").css("display") == "none")
				{
					$("#ipv6LanDetalis").css("display", "block");
				}
			});
		}

		load();
	}

	function hostSetSelectChange(value)
	{
		if (value == HOST_DHCPv6)
		{
			$("ul.dnsSetting").css("display", "none");
			$("ul.addrleaseLine").css("display", "block");
			lanHostFlag = LAN_DHCP6;
		}
		else
		{
			$("ul.dnsSetting").css("display", "block");
			$("ul.addrleaseLine").css("display", "none");
			id("lanDnsSel").changeSel(DNS_DHCPv6);
		}

		/* 切换帮助信息 */
		setHelpStr(value, "ipv6LanHelp");
	}

	function lanDnsSelectChange(value)
	{
		lanHostFlag = value == DNS_DHCPv6 ? LAN_SLAAC : LAN_RDNSS;
	}

	function IPv6EnableClick(stateClick,currentWanPortIdx)
	{
		wanCheckWDS(function(){
			var data;
			if (IPV6_State == stateClick)
			{
				return;
			}
			if(typeof currentWanPortIdx == "undefined" || currentWanPortIdx == 1){
				// 多WAN未开启
				if (stateClick == SWITCH_ON)
				{
					data = {"protocol":{"switch_ipv6":{"enable": "on"}}};
				}
				else
				{
					data = {"protocol":{"switch_ipv6":{"enable": "off"}}};
				}
			}else{
				// 多WAN开启
				if (stateClick == SWITCH_ON)
				{
					data = {"protocol":{"switch_ipv6":{"enable": "on","index":currentWanPortIdx.toString()}}};
				}
				else
				{
					data = {"protocol":{"switch_ipv6":{"enable": "off","index":currentWanPortIdx.toString()}}};
				}
			}

			showLoading("正在切换设置，请稍后...", undefined, undefined, false);
			$.action(data, function(result){
				closeLoading();
				if (result[ERR_CODE] == ENONE)
				{
					if (updateTimerHandle)
					{
						clearTimeout(updateTimerHandle);
					}

					if (updateLanHandle)
					{
						clearTimeout(updateLanHandle);
					}

					getSwitchStatus(currentWanPortIdx);
				}
				else
				{
					showAlert("目前正在切换设置，请稍后再试。");

					id("ipv6On").checked = IPV6_State;
					id("ipv6Off").checked = 1 - IPV6_State;
				}
			});
		}, null, function(){
			if (IPV6_State != stateClick)
			{
				id("ipv6On").checked = IPV6_State;
				id("ipv6Off").checked = 1 - IPV6_State;
			}
		});
	}

	function wanCfgInit(currentWanPortIdx)
	{
		var reqData = {};

		reqData["protocol"] = {};
		var wanV6Cfg = "";
		if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
			wanV6Cfg = "wanv6";
		}else{
			wanV6Cfg = "wanv6_" + currentWanPortIdx;
		}
		reqData["protocol"][KEY_NAME] = wanV6Cfg;
		$.query(reqData, function(dataObj){
			var wanType = dataObj["protocol"][wanV6Cfg][uciProto.optName.type];

			wanSelectChange(wanTypesToVal[wanType]);
		});
	}

	function lanCfgInit(currentWanPortIdx)
	{
		var data = {};
		data["network"] = {};
		data["network"][KEY_NAME] = LAN_STATUS_NAME;
		data["protocol"] = {};
		data["protocol"][KEY_NAME] = LAN_DHCP6;

		$.query(data, function(result){
			var lan_status = result["network"][LAN_STATUS_NAME];
			var dhcp_data = result["protocol"][LAN_DHCP6];

			if (lan_status.proto == LAN_DHCP6) /* dhcpsv6 */
			{
				id("hostSettingSel").changeSel(HOST_DHCPv6);
				$("ul.addrleaseLine").css("display", "block");
			}
			else if (lan_status.proto == LAN_SLAAC)	/* slaac */
			{
				id("hostSettingSel").changeSel(HOST_SLAAC);
				id("lanDnsSel").changeSel(DNS_DHCPv6);
			}
			else  /* rdnss */
			{
				id("hostSettingSel").changeSel(HOST_SLAAC);
				id("lanDnsSel").changeSel(DNS_RDNSS);
			}

			id("ipv6Lease").value = dhcp_data.lease_time / 60;

			$("#lanPrefixUl label")[1].innerHTML = lan_status.prefix;
			id("ipv6Pre").value = lan_status.prefix;
			curLanPrefix = lan_status.prefix;

			setLanStatus(lan_status);
			refreshLanStatus(currentWanPortIdx);
		});
	}

	function setLanStatus(data)
	{
		id("lan_pri_dns").innerHTML = data["pri_dns"];
		id("lan_snd_dns").innerHTML = data["snd_dns"];
		id("lan_addr").innerHTML = data["ip6addr"] + "/64";
		id("lan_local_addr").innerHTML = data["local_ip6addr"];
		localLanAddr = data["local_ip6addr"];

		$("#lanPrefixUl label")[1].innerHTML = data.prefix;
		curLanPrefix = data.prefix;
	}

	function reconncectLan(currentWanPortIdx)
	{
		reconnectLanCount++;

		if (reconnectLanCount <= reconnectLanCountMax)
		{
			refreshLanStatus(currentWanPortIdx);
		}
	}

	function refreshLanStatus(currentWanPortIdx)
	{
		var data = {};
		data["network"] = {};
		data["network"][KEY_NAME] = LAN_STATUS_NAME;
		var currentPort = currentWanPortIdx;

		if (updateLanHandle)
		{
			clearTimeout(updateLanHandle);
		}

		if (!updateReconnectLanHandle)
		{
			clearTimeout(updateReconnectLanHandle);
			updateReconnectLanHandle = null;
		}

		updateReconnectLanHandle = $.setTimeout(function(){
			reconncectLan(currentPort);
		}, 5000);

		$.query(data, function(data){
			if (updateReconnectLanHandle)
			{
				clearTimeout(updateReconnectLanHandle);
				updateReconnectLanHandle = null;

				/* 若此前有重连过，则wan_status也应当重新刷 */
				if (reconnectLanCount != 0)
				{
					updateTimerHandle = $.setTimeout(function(){
						refreshWanStatus(currentPort);
					}, 0);
				}

				reconnectLanCount = 0;
			}

			setLanStatus(data["network"][LAN_STATUS_NAME]);
			updateLanHandle = $.setTimeout(function(){
				refreshLanStatus(currentPort)
			}, 2000);
		});
	}

	function checkLanIpChange()
	{
		if (!preDelgOnFlag)
		{
			var prefixVal = id("ipv6Pre").value;

			if (!ipv6Compare(curLanPrefix, prefixVal))
			{
				showConfirm(label.ipv6LanPreChgTip, function(result){
					if (result)
					{
						checkoutWds();
					}
				});
			}
			else
			{
				checkoutWds();
			}
		}
		else
		{
			checkoutWds();
		}

		function checkoutWds()
		{
			wanCheckWDS(saveLanSet);
		}
	}

	function saveLanSet()
	{
		var cfgData = {}, cfgProto = {},cfgLan = {}, cfgProtocol = {};

		var protocolVal = lanHostFlag;
		var prefixVal = id("ipv6Pre").value;
		var leasetimeVal = id("ipv6Lease").value;

		if (protocolVal != LAN_DHCP6 && protocolVal != LAN_SLAAC && protocolVal != LAN_RDNSS)
		{
			return;
		}

		/* 这里要判断一下前缀和地址租期的合法性 */

		cfgData[uciProto.fileName] = cfgProto;
		cfgProto[LAN_NAME] = cfgLan;
		cfgLan[uciProto.optName.proto] = protocolVal;

		cfgProto[protocolVal] = cfgProtocol;

		if (!preDelgOnFlag)
		{
			if (lanErrHandle(checkLanPrefix(prefixVal), "ipv6Pre"))
			{
				return;
			}

			/* 不需要去掉前导0，但要替换中文冒号 */
			prefixVal = prefixVal.replace(/：/g, ":");
			$("#ipv6Pre").val(prefixVal);

			cfgProtocol["prefix"] = prefixVal;
		}

		cfgProtocol["prefixlen"] = "64";

		if (protocolVal == LAN_DHCP6)
		{
			if (!preDelgOnFlag)
			{
				cfgProtocol["start_ip"] = "1000";
				cfgProtocol["end_ip"] = "2000";
			}

			if (lanErrHandle(checkLeastTime(leasetimeVal), "ipv6Lease"))
			{
				return;
			}
			cfgProtocol["lease_time"] = leasetimeVal * 60;
		}

		disableBtnAll(true);
		setLoadingId("lanSave");
		hsLoading(true);

		$.modify(cfgData, function(result){
			hsLoading(false, function(){
				disableBtnAll(false);
			});
		});
	}

	function disableBtnAll(tag)
	{
		if (id("save"))
		{
			disableBtn("save", tag);
		}
		if (id("connect"))
		{
			disableBtn("connect", tag);
		}
		if (id("disconnect"))
		{
			disableBtn("disconnect", tag);
		}
		if (id("saveHighSet"))
		{
			disableBtn("saveHighSet", tag);
		}
	}

	function initLoad(data,currentWanPortIdx)
	{
		if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
			// 获取单WAN或WAN1的切换结果
			IPV6_State = data["protocol"]["ipv6_info"]["enable"] == "on" ? SWITCH_ON : SWITCH_OFF;
		}else{
			IPV6_State = data["protocol"]["ipv6_info_" + currentWanPortIdx]["enable"] == "on" ? SWITCH_ON : SWITCH_OFF;
		}

		id("ipv6On").checked = IPV6_State;
		id("ipv6Off").checked = 1 - IPV6_State;

		id("ipv6Content").style.display = (IPV6_State == SWITCH_ON) ? "block" : "none";
		if (IPV6_State == SWITCH_ON)
		{
			$("#ipv6WanHelp").css("display", "block");
			wanCfgInit(currentWanPortIdx);
			lanCfgInit(currentWanPortIdx);
		}
		else
		{
			$("#ipv6WanHelp").css("display", "none");
		}
	}

	function preLoadData(currentWanPortIdx)
	{
		var data = {};
		data["protocol"] = {};
		if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
			// 获取单WAN或WAN1的切换结果
			data["protocol"][KEY_NAME] = "ipv6_info";
		}else{
			data["protocol"][KEY_NAME] = "ipv6_info_" + currentWanPortIdx;
		}
		$.query(data, function(res){
			initLoad(res,currentWanPortIdx);
		});
	}

	function getSwitchStatus(currentWanPortIdx)
	{
		var data = {};

		data["network"] = {};
		if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
			// 获取单WAN或WAN1的切换状态
			data["network"][KEY_NAME] = "ipv6_switch_status";
		}else{
			data["network"][KEY_NAME] = "ipv6_switch_status_" + currentWanPortIdx;
		}
		$.query(data, function(result){
			var switchStatus;
			var err_code = result[ERR_CODE];

			if (err_code == ENONE)
			{
				//switchStatus = result["network"]["ipv6_switch_status"]["status"];
				if(currentWanPortIdx == 1 || typeof currentWanPortIdx == "undefined"){
					// 获取单WAN或WAN1的切换结果
					switchStatus = result["network"]["ipv6_switch_status"]["status"];
				}else{
					switchStatus = result["network"]["ipv6_switch_status_" + currentWanPortIdx]["status"];
				}

				if (SWITCH_STATUS_IDLE_SUCCESS == switchStatus)
				{
					preLoadData(currentWanPortIdx);

					if (isSwitchLoading)
					{
						closeLoading();
						isSwitchLoading = false;
					}
				}
				else
				{
					if (!isSwitchLoading)
					{
						showLoading("正在切换设置，请稍后...", undefined, undefined, false);
						isSwitchLoading = true;
					}

					/* 此处默认当switchStatus为失败时也继续Loading，日后优化 */
					getSwitchStatusHandle = $.setTimeout(getSwitchStatus, 1000);
				}
			}
			else
			{
				showAlert(err_code);	//此处需优化
			}
		});
	}

	function initPage(currentWanPortIdx){
		id("ipv6On").onclick = function()
		{
			IPv6EnableClick(SWITCH_ON,currentWanPortIdx);
		}

		id("ipv6Off").onclick = function()
		{
			IPv6EnableClick(SWITCH_OFF,currentWanPortIdx);
		}

		id("lanSave").onclick = checkLanIpChange;

		selectInit("hostSettingSel", hostSettingOptions, HOST_DHCPv6, hostSetSelectChange);
		selectInit("lanDnsSel", lanDnsOptions, DNS_DHCPv6, lanDnsSelectChange);

		if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
			disableInput("ipv6On", true);
			disableInput("ipv6Off", true);
			disableInput("ipv6Pre", true);
			disableInput("ipv6Lease", true);
			disableBtn("lanSave",true);
			id("hostSettingSel").disable(true);
			id("lanDnsSel").disable(true);

			$("#relayTip").show();
			if (curSysMode == uciSystem.optValue.sysMode.apMode) {
				$("#relayTipText").text("上网方式为AP（有线中继）时，无法使用IPv6功能");
			} else {
				$("#relayTipText").text("上网方式为桥接（无线中继）时，无法使用IPv6功能");
			}
		}
		/* 以下需要读数据来初始化 */
		getSwitchStatus(currentWanPortIdx);
	}

	function clearWanBtnArea(){
		$("#dualWanIpv6Wrapper ul").html("");
		$("#dualWanIpv6Wrapper").hide();
	}
	function initWanBtnArea(currentActiveWan){
		// 根据当前开启的WAN口数量控制WAN口按钮栏的显示和方法绑定
		if(currentActiveWan >= 2){
			// 多WAN开启(至少有两个WAN口)
			clearWanBtnArea();
			for(var i=0;i<currentActiveWan;i++){
				var newWanLabel = document.createElement("label");
				newWanLabel.className = "ipv6WanPort";
				newWanLabel.innerHTML = "WAN" + (i+1) + "口";
				$("#dualWanIpv6Wrapper ul").append($(newWanLabel));
			}
			initWanBtnClickHandler();
			$("#dualWanIpv6Wrapper").show();
		}else{
			// 多WAN未开启，与未加入多WAN时页面逻辑保持一致
			clearWanBtnArea();
			initPage();
		}
	}
	function initWanBtnClickHandler(){
		var portSwitch = $("#dualWanIpv6Wrapper").find("label");
		portSwitch.click(function(){
			var currentSelPort = $(this).index();
			var currentWanPortIdx = currentSelPort+1;
			initPage(currentWanPortIdx);
			$(this).addClass("selected");
			$(this).siblings().removeClass("selected");
			gBasicRouteSetRNiceScroll.scrollTo(0);
		});
		portSwitch.eq(0).click();
	}
	function initDualWanPort(){
		// 多WAN开启时初始化WAN口选择栏和相关参数
		if(gMulWanSupport){
			var data = {"port_manage":{"table":"mwan"}};
			if (gSysModeSupport) {
				data.system = {"name":"sys_mode"};
			}
			$.query(data,function(res){
				var currentActiveWan = 0;
				var wanNum = 2;
				for(var i=0; i<wanNum; i++){
					if(res.port_manage.mwan[i]["mwan_"+(i+1)].enable == 1){
						currentActiveWan++;
					}
				}
				if (gSysModeSupport) {
					curSysMode = res.system.sys_mode.mode;
				}
				initWanBtnArea(currentActiveWan);
			});
		}else{
			if (gSysModeSupport) {
				$.query({"system":{"name":"sys_mode"}}, function(ret) {
					if (ENONE == ret.error_code) {
						curSysMode = ret.system.sys_mode.mode;
						initWanBtnArea(0);
					}
				});
			} else {
				initWanBtnArea(0);
			}
		}
	}
	initDualWanPort();
</script>