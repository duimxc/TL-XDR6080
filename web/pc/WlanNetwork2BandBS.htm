<script type="text/javascript">
	function init()
	{
		var HOST_TYPE_WIRELESS = uciHostsInfo.optValue.linkType.hostWireless;
		var IS_CURRENT_HOST = 1;

		var wlanWidth = id("wlanWidth");
		var wlanWidth5g = id("wlanWidth5g");
		var channel = id("channel");
		var channel5g = id("channel5g");
		var mode = id("wlanMode");
		var mode5g = id("wlanMode5g");

		var hostSecName = uciWireless.dynData.host_2g;
		var wdsSecName = uciWireless.dynData.wds_2g;
		var hostSecName5g = uciWireless.dynData.host_5g;
		var wdsSecName5g = uciWireless.dynData.wds_5g;

		var BW_160M_SUPPORT = false;				// 是否支持80+80MHz
		var BW_160M_DISCONNECTED = "80MHz+80MHz";

		var muMimoAvailable2g = false;  // 2g是否支持MU-MIMO功能
		var muMimoAvailable5g = false;  // 5g是否支持MU-MIMO功能
		var twtAvailable2g = false;     // 2.4g是否支持TWT功能
		var twtAvailable5g = false;     // 5g是否支持TWT功能
		var ofdmaAvailable2g = false;   // 2.4g是否支持OFDMA功能
		var ofdmaAvailable5g = false;   // 5g是否支持OFDMA功能

		var wlanPwd = id("wlanPwd");

		var firstLoadDataGrid = true;
		var dataGridLs;

		var oldBsInfo = {};
		var oldWlanInfo = {};
		var oldSwitchInfo = {};
		var wdsInfo = {};
		var oldWlanInfo5g = {};
		var wdsInfo5g = {};
		var lastChan5gValue;

		var guestOpen = false;

		var channelOpt2g = [], channelOpt5g = [];
		var txPowerOpt = [{str:label.txPowerHigh, value:uciWireless.dynOptValue.power.high},
			{str:label.txPowerMiddle, value:uciWireless.dynOptValue.power.mid},
			{str:label.txPowerLow, value:uciWireless.dynOptValue.power.low}];

		var bandWidthOpt2g = [{str:label.wirelessAuto40M, value:uciWireless.dynOptValue.bandwidth.auto},
			{str:label.chanbw20, value:uciWireless.dynOptValue.bandwidth.bw20}];

		var authOptDefault = [{str:label.wpaPskSel, value:uciWireless.dynOptValue.auth.psk},
			{str:label.wpa2PskSel, value:uciWireless.dynOptValue.auth.psk2},
			{str:label.wirelessPsk, value:uciWireless.dynOptValue.auth.pskMixed}];

		var cipherOpt2g = [{str:label.aes, value:uciWireless.dynOptValue.cipher.aes},
			{str:label.tkip, value:uciWireless.dynOptValue.cipher.tkip}];

		var modeOpt2g;
		if (g11AxSupport["wlan2g"])
		{
			modeOpt2g = [{str:label.hwmode11bgn_ax, value:uciWireless.dynOptValue.mode.m_11bgn_ax},
				{str:label.hwmode11bgn, value:uciWireless.dynOptValue.mode.m_11bgn},
				{str:label.hwmode11bg, value:uciWireless.dynOptValue.mode.m_11bg},
				{str:label.hwmode11n, value:uciWireless.dynOptValue.mode.m_11n},
				{str:label.hwmode11g, value:uciWireless.dynOptValue.mode.m_11g},
				{str:label.hwmode11b, value:uciWireless.dynOptValue.mode.m_11b}];
		}
		else
		{
			modeOpt2g = [{str:label.hwmode11bgn, value:uciWireless.dynOptValue.mode.m_11bgn},
				{str:label.hwmode11bg, value:uciWireless.dynOptValue.mode.m_11bg},
				{str:label.hwmode11n, value:uciWireless.dynOptValue.mode.m_11n},
				{str:label.hwmode11g, value:uciWireless.dynOptValue.mode.m_11g},
				{str:label.hwmode11b, value:uciWireless.dynOptValue.mode.m_11b}];
		}

		var muMimo5g = [{str:label.muMIMOon, value:uciWireless.dynOptValue.muMIMO.on},
			{str:label.muMIMOoff, value:uciWireless.dynOptValue.muMIMO.off}];

		var bandWidthOpt5g = [{str:label.wirelessAuto40M, value:uciWireless.dynOptValue.bandwidth.auto},
			{str:label.chanbw20, value:uciWireless.dynOptValue.bandwidth.bw20}];

		var bandWidthOpt5gExt = [{str:label.wirelessAuto80M, value:uciWireless.dynOptValue.bandwidth.auto},
			{str:label.chanbw20, value:uciWireless.dynOptValue.bandwidth.bw20},
			{str:label.chanbw40, value:uciWireless.dynOptValue.bandwidth.bw40}];

		var bandWidthOpt5gSpecial = [{str:label.wirelessAuto, value:uciWireless.dynOptValue.bandwidth.auto},
			{str:label.chanbw20, value:uciWireless.dynOptValue.bandwidth.bw20},
			{str:label.chanbw40, value:uciWireless.dynOptValue.bandwidth.bw40},
			{str:label.chanbw80Add80, value:uciWireless.dynOptValue.bandwidth.bw80Add80}];
		
		var bandWidthOpt5g_160M = [{str:label.wirelessAuto160M, value:uciWireless.dynOptValue.bandwidth.auto},
			{str:label.chanbw20, value:uciWireless.dynOptValue.bandwidth.bw20},
			{str:label.chanbw40, value:uciWireless.dynOptValue.bandwidth.bw40},
			{str:label.chanbw80, value:uciWireless.dynOptValue.bandwidth.bw80}];

		var bandWidthOpt5g_ax_band4 = [{str:label.chanbw20, value:uciWireless.dynOptValue.bandwidth.bw20},
			{str:label.chanbw40, value:uciWireless.dynOptValue.bandwidth.bw40},
			{str:label.chanbw80, value:uciWireless.dynOptValue.bandwidth.bw80}];

		var authOpt5g = [{str:label.wpaPskSel, value:uciWireless.dynOptValue.auth.psk},
			{str:label.wpa2PskSel, value:uciWireless.dynOptValue.auth.psk2},
			{str:label.wirelessPsk, value:uciWireless.dynOptValue.auth.pskMixed}];

		var cipherOpt5g = [{str:label.aes, value:uciWireless.dynOptValue.cipher.aes},
			{str:label.tkip, value:uciWireless.dynOptValue.cipher.tkip}];

		var authOptStr = [label.wirelessPsk, label.wpaPskSel, label.wpa2PskSel, label.wirelessWpa2PskWpa3Sae, label.wirelessWpa3Sae];

		var modeOpt5g;
		if (g11AxSupport["wlan5g"])
		{
			modeOpt5g = [{str:label.hwmode11ac_ax, value:uciWireless.dynOptValue.mode.m_11ac_ax},
				{str:label.hwmode11ac, value:uciWireless.dynOptValue.mode.m_11ac},
				{str:label.hwmode11an, value:uciWireless.dynOptValue.mode.m_11an}];
		}
		else
		{
			modeOpt5g = [{str:label.hwmode11ac, value:uciWireless.dynOptValue.mode.m_11ac},
				{str:label.hwmode11an, value:uciWireless.dynOptValue.mode.m_11an}];
		}

		var uciGuestFile = uciGuestNet.fileName;
		var uciGuest = uciGuestNet.secName.wireless2G;
		var uciGuest5G = uciGuestNet.secName.wireless5G;
		var uciGuestEnable = uciGuestNet.optName.enable;

		function onPreSave()
		{
			if (gWifiSwitchSupport || gCustomWifiSwitchSupport) {
				/* 获取访客网络状态
					先从后台获取访客网络状态再执行onSaveBasic() */
				var guestData = {};
				guestData[uciGuestFile] = {};
				guestData[uciGuestFile][KEY_NAME] = [uciGuest];
				if (gGuest5GSupport) {
					guestData[uciGuestFile][KEY_NAME].push(uciGuest5G);
				}
				$.query(guestData, function(result){
					if (ENONE == result[ERR_CODE]) {
						if (result[uciGuestFile][uciGuest][uciGuestEnable] == 1) {
							guestOpen = true;
						} else if (gGuest5GSupport && result[uciGuestFile][uciGuest5G][uciGuestEnable] == 1) {
							guestOpen = true;
						} else {
							guestOpen = false;
						}
					}
					onSaveBasic();
				});
			} else {
				onSaveBasic();
			}
		}

		function disableWifiBSSet(disabled)
		{
			disableInput("wifiUniteOn", disabled);
			disableInput("wifiUniteOff", disabled);
			disableInput("wifiSwitchOn", disabled);
			disableInput("wifiSwitchOff", disabled);
			disableInput("ssid", disabled);
			disableInput("wlanPwd", disabled);
			id("ssidBrd").disabled = disabled;
			if (gAuthSupport || gAuthSupport2g || gAuthSupport5g) {
				id("auth").disable(disabled);
			}
			if (gCipherSupport || gCipherSupport2g || gCipherSupport5g) {
				id("cipher").disable(disabled);
			}
			if (!disabled)
			{
				if (gCipherSupport || gCipherSupport2g || gCipherSupport5g) {
					/* 在11n或SAE3下，加密算法仍然保持AES */
					if (uciWireless.dynOptValue.mode.m_11n == $("#wlanMode").val() ||
						uciWireless.dynOptValue.auth.psk2_sae3 == $("#auth").val() ||
						uciWireless.dynOptValue.auth.sae3 == $("#auth").val())
					{
						id("cipher").disable(true);
					}
				}
			}
			disableBtn("saveBasic", disabled);
			id("saveBasic").onclick = disabled ? null : onSaveBasic;
		}

		function disable2GWifiSet(disabled)
		{
			id("channel").disable(disabled);
			id("wlanMode").disable(disabled);
			id("wlanWidth").disable(disabled);
			disableInput("TWTSwitchOn", disabled);
			disableInput("TWTSwitchOff", disabled);
			disableInput("MUMimoSwitchOn", disabled);
			disableInput("MUMimoSwitchOff", disabled);
			disableInput("OFDMASwitchOn", disabled);
			disableInput("OFDMASwitchOff", disabled);
			if (!disabled)
			{
				if (gCipherSupport || gCipherSupport2g || gCipherSupport5g) {
					if (uciWireless.dynOptValue.mode.m_11n == $("#wlanMode").val())
					{
						id("cipher").disable(true);
					}
				}
				/* 在11b,11g,11bg下，带宽选项仍然保持禁用 */
				if (uciWireless.dynOptValue.mode.m_11bg == $("#wlanMode").val() ||
					uciWireless.dynOptValue.mode.m_11b == $("#wlanMode").val() ||
					uciWireless.dynOptValue.mode.m_11g == $("#wlanMode").val())
				{
					id("wlanWidth").disable(true);
				}
			}
			disableBtn("saveAdvanced2g", disabled);
			id("saveAdvanced2g").onclick = disabled ? null : onSaveAdvanced;
		}

		function disable5GWifiSet(disabled)
		{
			id("channel5g").disable(disabled);
			id("wlanMode5g").disable(disabled);
			id("wlanWidth5g").disable(disabled);
			disableInput("TWTSwitchOn5g", disabled);
			disableInput("TWTSwitchOff5g", disabled);
			disableInput("OFDMASwitchOn5g", disabled);
			disableInput("OFDMASwitchOff5g", disabled);
			if (muMimoAvailable5g)
			{
				disableInput("MUMimoSwitchOn5g", disabled);
				disableInput("MUMimoSwitchOff5g", disabled);
			}
			if (!disabled)
			{
				if (165 == parseInt(id("channel5g").value))
				{
					id("wlanWidth5g").disable(true);
				}
			}
			disableBtn("saveAdvanced5g", disabled);
			id("saveAdvanced5g").onclick = disabled ? null : onSaveAdvanced;
		}

		function disableWpsSet(disabled)
		{
			disableInput("wpsRouterPinOn", disabled);
			disableInput("wpsRouterPinOff", disabled);
			disableBtn("genVendorPin", disabled);
			id("genVendorPin").onclick = disabled ? null : onGenPinCode;
			disableBtn("saveWpsRouterPin", disabled);
			id("saveWpsRouterPin").onclick = disabled ? null : onSaveWpsRouterPin;
			disableInput("wpsMethodButton", disabled);
			disableInput("wpsMethodPin", disabled);
			disableInput("wpsTerminalPinCode", disabled);
			disableBtn("wpsConnect", disabled);
			id("wpsConnect").onclick = disabled ? null : onWpsConnect;
		}

		function initChannel(moduleSpecChannel)
		{
			var channelOpt = [];
			var len = moduleSpecChannel.length;
			for (var i = 0; i < len; i++)
			{
				if ("auto" == moduleSpecChannel[i])
				{
					channelOpt[i] = {str:label.wirelessAuto, value:"0"};
				}
				else
				{
					channelOpt[i] = {str:moduleSpecChannel[i], value:moduleSpecChannel[i]};
				}
			}

			return channelOpt;
		}

		function initAuthType(moduleSpecAuthType)
		{
			var authOpt = [];
			if (moduleSpecAuthType == undefined) {
				authOpt = authOptDefault;
			} else {
				for (var i = 0; i < moduleSpecAuthType.length; ++i) {
					var val = moduleSpecAuthType[i];
					authOpt[i] = {str:authOptStr[val], value: val};
				}
			}

			return authOpt;
		}

		function errHandle(errNo, objOrId)
		{
			var showStr = "";

			switch(errNo)
			{
				case ENONE:
					return false;
				case EINVSSIDLEN:
					showStr = errStr.wlanSsidLenErr;
					break;
				case EINVSSIDBLANK:
					showStr = errStr.wlanSsidBlank;
					break;
				case EINVPSKLEN:
					showStr = errStr.wlanPwdLenValid;
					break;
				case EWLANPWDBLANK:
					showStr = errStr.wlanPwdNull;
					break;
				case EINVSSIDEMPTY:
					showStr = errStr.wlanSsidErr;
					break;
				case EINVWLANPWD:
					showStr = errStr.wlanPwdInvalid;
					break;
				case ESYSBUSY:
					showStr = errStr.invRequestFailTrylater;
					break;
				case EINVCHNAMODEBAND:
					showStr = gSysModeSupport ? errStr.wlanInvOptionsWithWDSOn1 : errStr.wlanInvOptionsWithWDSOn;
					break;
				default:
					showStr = errStr.invRequestFail;
					break;
			}

			showAlert(showStr, objOrId);
			return true
		}

		function channelSelectHandler5g(channelVal)
		{
			var modeVal = parseInt(id("wlanMode5g").value);
			var isBandChange = false, lastWlanWidth5gValue;

			if (gWlanHost5gSupport160MBandWidth)
			{
				if ((channelVal >= 149 && lastChan5gValue < 149) 
			    ||(channelVal < 149 && lastChan5gValue >= 149))
				{
					isBandChange = true;
				}

				/* 只有非11an才需要注意是否要修改160MHz */
				if (isBandChange && modeVal != uciWireless.dynOptValue.mode.m_11an)
				{
					lastWlanWidth5gValue = parseInt(wlanWidth5g.value);

					if (channelVal >= 149)
					{
						wlanWidth5g.resetOptions(bandWidthOpt5g_ax_band4, uciWireless.dynOptValue.bandwidth.bw80);
					}
					else
					{
						wlanWidth5g.resetOptions(bandWidthOpt5g_160M, uciWireless.dynOptValue.bandwidth.auto);
					}

					if (lastWlanWidth5gValue == 0 && channelVal >= 149)
					{
						wlanWidth5g.changeSel(uciWireless.dynOptValue.bandwidth.bw80);
					}
					else
					{
						wlanWidth5g.changeSel(lastWlanWidth5gValue);
					}
				}
			}

			if(165 == parseInt(channelVal))
			{
				wlanWidth5g.changeSel(uciWireless.dynOptValue.bandwidth.bw20);
				wlanWidth5g.disable(true);
			}
			else
			{
				wlanWidth5g.disable(false);
			}

			if (gMeshSupport && channelVal >= 52 && channelVal <= 64) {
				id ("channel5gTips").style.display = "block";
			} else {
				id ("channel5gTips").style.display = "none";
			}

			lastChan5gValue = channelVal;
		}

		/* set bandwidth if choose special mode */
		function modeSelectHandler(modeVal)
		{
			if(uciWireless.dynOptValue.mode.m_11b == modeVal ||
				uciWireless.dynOptValue.mode.m_11g == modeVal ||
				uciWireless.dynOptValue.mode.m_11bg == modeVal)
			{
				wlanWidth.changeSel(uciWireless.dynOptValue.bandwidth.bw20);
				wlanWidth.disable(true);
			}
			else
			{
				wlanWidth.changeSel(uciWireless.dynOptValue.bandwidth.auto);
				wlanWidth.disable(false);
			}

			if (gCipherSupport || gCipherSupport2g || gCipherSupport5g) {
				/* 认证类型为WPA3-SAE3或无线模式为11n时，加密算法只能是AES */
				if ((gAuthSupport || gAuthSupport2g || gAuthSupport5g) &&
					(uciWireless.dynOptValue.auth.psk2_sae3 == $("#auth").val() || uciWireless.dynOptValue.auth.psk2_sae3 == $("#auth").val()))
				{
					id("cipher").changeSel(uciWireless.dynOptValue.cipher.aes);
					id("cipher").disable(true);
				}
				else if (uciWireless.dynOptValue.mode.m_11n == modeVal)
				{
					id("cipher").changeSel(uciWireless.dynOptValue.cipher.aes);
					id("cipher").disable(true);
				}
				else
				{
					id("cipher").changeSel(oldBsInfo[uciWireless.dynOptName.cipher]);
					id("cipher").disable(false);
				}
			}

			if (g11AxSupport["wlan2g"])
			{
				$("#wlanModeAxTips2G").css("display", (uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ? "block" : "none");
				$("#TWTSel").css("display", (twtAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ? "block" : "none");
				$("#MUMimoSel").css("display", (muMimoAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ? "block" : "none");
				$("#OFDMASel").css("display", (ofdmaAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ? "block" : "none");
			}
		}

		function modeSelectHandler5g(modeVal)
		{
			var wlanWidth5gValue;

			if(uciWireless.dynOptValue.mode.m_11an == modeVal)
			{
				wlanWidth5g.resetOptions(bandWidthOpt5g, uciWireless.dynOptValue.bandwidth.auto);
				$("#MUMimoSel5g").css("display", "none");
			}
			else
			{
				if (BW_160M_SUPPORT)
				{
					wlanWidth5g.resetOptions(bandWidthOpt5gSpecial, uciWireless.dynOptValue.bandwidth.auto);
				}
				else
				{
					if (gWlanHost5gSupport160MBandWidth)
					{
						wlanWidth5g.resetOptions(bandWidthOpt5g_160M, uciWireless.dynOptValue.bandwidth.auto);
					}
					else
					{
						wlanWidth5g.resetOptions(bandWidthOpt5gExt, uciWireless.dynOptValue.bandwidth.auto);
					}
				}
				$("#MUMimoSel5g").css("display", muMimoAvailable5g ? "block" : "none");
			}

			var chan5gVal = parseInt(id("channel5g").value);

			/* 刚进页面时, channel5g下拉框尚未初始化。会导致parseInt(id("channel5g").value)的值为NaN */
			if (id("channel5g").value == undefined)
			{
				chan5gVal = parseInt(lastChan5gValue);
			}

			if (gWlanHost5gSupport160MBandWidth)
			{
				if (uciWireless.dynOptValue.mode.m_11an != modeVal && 149 <= chan5gVal)
				{
					/* 若为band4，不支持160MHz */
					wlanWidth5g.resetOptions(bandWidthOpt5g_ax_band4, uciWireless.dynOptValue.bandwidth.bw80);
				}
			}

			if(165 == chan5gVal)
			{
				wlanWidth5g.changeSel(uciWireless.dynOptValue.bandwidth.bw20);
				wlanWidth5g.disable(true);
			}
			else
			{
				if (gWlanHost5gSupport160MBandWidth)
				{
					if (uciWireless.dynOptValue.mode.m_11an != modeVal && 149 <= chan5gVal)
					{
						wlanWidth5gValue = uciWireless.dynOptValue.bandwidth.bw80;
					}
					else
					{
						wlanWidth5gValue = uciWireless.dynOptValue.bandwidth.auto;
					}

					wlanWidth5g.changeSel(wlanWidth5gValue);
				}
				else
				{
					wlanWidth5g.changeSel(uciWireless.dynOptValue.bandwidth.auto);
				}

				wlanWidth5g.disable(false);
			}

			if (g11AxSupport["wlan5g"])
			{
				$("#wlanModeAxTips5G").css("display", (uciWireless.dynOptValue.mode.m_11ac_ax == modeVal) ? "block" : "none");
				$("#OFDMASel5g").css("display", (ofdmaAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal) ? "block" : "none");
				$("#TWTSel5g").css("display", (twtAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal) ? "block" : "none");
			}
		}

		function authSelectHandler(authVal)
		{
			if (authVal == uciWireless.dynOptValue.auth.psk2_sae3) {
				id("authTips").style.display="block";
			} else {
				id("authTips").style.display="none";
			}

			if (gCipherSupport || gCipherSupport2g || gCipherSupport5g)
			{
				/* 认证类型为WPA3-SAE3或无线模式为11n时，加密算法只能是AES */
				if (uciWireless.dynOptValue.auth.psk2_sae3 == authVal ||
					uciWireless.dynOptValue.auth.sae3 == authVal ||
					uciWireless.dynOptValue.mode.m_11n == $("#wlanMode").val())
				{
					id("cipher").changeSel(uciWireless.dynOptValue.cipher.aes);
					id("cipher").disable(true);
				}
				else
				{
					id("cipher").changeSel(oldWlanInfo[uciWireless.dynOptName.cipher]);
					id("cipher").disable(false);
				}
			}
		}

		function checkCfgChged(oldCfg, newCfg, uciOpts)
		{
			for (var idx in uciOpts)
			{
				if (newCfg[uciOpts[idx]] != undefined && oldCfg[uciOpts[idx]] != newCfg[uciOpts[idx]])
				{
					return true;
				}
			}

			return false;
		}

		function checkCfgChgedBasic(oldCfg, newCfg)
		{
			var uciOpts = [uciWireless.dynOptName.ssid,
				uciWireless.dynOptName.key,
				uciWireless.dynOptName.ssidbrd,
				uciWireless.dynOptName.encryption,
				uciWireless.optName.bsEnable,
				uciWireless.optName.wifiEnable];

			if (gAuthSupport || gAuthSupport2g || gAuthSupport5g) {
				uciOpts.push(uciWireless.dynOptName.auth);
			}
			if (gCipherSupport || gCipherSupport2g || gCipherSupport5g) {
				uciOpts.push(uciWireless.dynOptName.cipher);
			}

			return checkCfgChged(oldCfg, newCfg, uciOpts);
		}

		function checkCfgChgedAdvanced(oldCfg, newCfg, band)
		{
			var uciOpts = [uciWireless.dynOptName.channel,
				uciWireless.dynOptName.mode,
				uciWireless.dynOptName.bandwidth];

			var modeVal = $("#wlanMode").val();
			var modeVal5g = $("#wlanMode5g").val();

			if ((band == "2g" && twtAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ||
				(band == "5g" && twtAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g))
			{
				uciOpts.push(uciWireless.dynOptName.twt);
			}

			if ((band == "2g" && ofdmaAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ||
				(band == "5g" && ofdmaAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g))
			{
				uciOpts.push(uciWireless.dynOptName.ofdma);
			}

			if ((band == "2g" && muMimoAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ||
				(band == "5g" && muMimoAvailable5g && (uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g || uciWireless.dynOptValue.mode.m_11ac == modeVal5g)))
			{
				uciOpts.push(uciWireless.dynOptName.muMIMO);
			}

			return checkCfgChged(oldCfg, newCfg, uciOpts);
		}

		function checkSwitchCfgChged(oldSec, newSec)
		{
			var uciOpts = [uciWireless.dynOptName.enable];
			if (gWifiSwitchSplit) {
				uciOpts.push(uciWireless.dynOptName.enable_2g);
				uciOpts.push(uciWireless.dynOptName.enable_5g);
			}

			for (var idx in uciOpts)
			{
				if (oldSec[uciOpts[idx]] != newSec[uciOpts[idx]])
				{
					return true;
				}
			}

			return false;
		}

		function getWDSInfo(callBack)
		{
			var queryData = {};
			queryData[uciWireless.fileName] = {};
			queryData[uciWireless.fileName][KEY_NAME] = [wdsSecName, wdsSecName5g];

			$.query(queryData, function(data){
				if(ENONE == data[ERR_CODE]){
					callBack(data[uciWireless.fileName]);
				}
				else{
					errHandle(data[ERR_CODE]);
				}
			});
		}

		function makeWifiSwitchSendData()
		{
			var data = {};
			if (gWifiSwitchSplit) {
				if (id("wifiSwitchOnAll2g").checked)
				{
					data[uciWireless.dynOptName.enable_2g] = "on";
					data[uciWireless.dynOptName.enable] = "on";
				}
				else
				{
					data[uciWireless.dynOptName.enable_2g] = "off";
				}
				if (id("wifiSwitchOnAll5g").checked)
				{
					data[uciWireless.dynOptName.enable_5g] = "on";
					data[uciWireless.dynOptName.enable] = "on";
				}
				else
				{
					data[uciWireless.dynOptName.enable_5g] = "off";
				}
			} else {
				if (id("wifiSwitchOnAll").checked)
				{
					data[uciWireless.dynOptName.enable] = "on";
				}
				else
				{
					data[uciWireless.dynOptName.enable] = "off";
				}
			}

			return data;
		}

		function makeSendDataBasic()
		{
			var keySsid = uciWireless.dynOptName.ssid;
			var keyKey = uciWireless.dynOptName.key;
			var keySSidbrd = uciWireless.dynOptName.ssidbrd;
			var keyEncry = uciWireless.dynOptName.encryption;
			var keyAuth = uciWireless.dynOptName.auth;
			var keyCipher = uciWireless.dynOptName.cipher;

			function makeData(argMap)
			{
				var data = {}

				for (var key in argMap)
				{
					var obj = argMap[key];

					switch(key)
					{
						case uciWireless.optName.wifiEnable:
							data[key] = obj.checked == true ? 1 : 0;
							break;

						case keySsid:
						case keyKey:
						case keyAuth:
						case keyCipher:
							data[key] = obj.val();
							break;

						case keySSidbrd:
							if (obj.checked)
							{
								data[key] = uciWireless.dynOptValue.ssidbrd.on;
							}
							else
							{
								data[key] = uciWireless.dynOptValue.ssidbrd.off;
							}
							break;

						case keyEncry:
							if ("" == obj.val())
							{
								data[key] = 0;
							}
							else
							{
								data[key] = 1;
							}
							break;

						default:
							break;
					}
				}

				return data;
			}

			var data = {};

			var mapBs = {};
			mapBs[uciWireless.optName.wifiEnable] = id("wifiSwitchOn");
			mapBs[keySsid] = $("#ssid");
			mapBs[keyKey] = $("#wlanPwd");
			mapBs[keySSidbrd] = id("ssidBrd");
			mapBs[keyEncry] = $("#wlanPwd");
			if (gAuthSupport || gAuthSupport2g || gAuthSupport5g) {
				mapBs[keyAuth] = $("#auth");
			}
			if (gCipherSupport || gCipherSupport2g || gCipherSupport5g) {
				mapBs[keyCipher] = $("#cipher");
			}

			data[uciFunction.optName.wlanBS] = makeData(mapBs);

			data[uciFunction.optName.wlanBS][uciWireless.optName.bsEnable] = ENABLE;

			return data;
		}

		function makeSendDataAdvanced(saveId)
		{
			var keyChannel = uciWireless.dynOptName.channel;
			var keyMode = uciWireless.dynOptName.mode;
			var keyBandwidth = uciWireless.dynOptName.bandwidth;
			var keyMimo = uciWireless.dynOptName.muMIMO;
			var keyTWT = uciWireless.dynOptName.twt;
			var keyOFDMA = uciWireless.dynOptName.ofdma;
			var data = {};

			if (saveId == "saveAdvanced2g")
			{
				data[hostSecName] = {};
				data[hostSecName][keyChannel] = parseInt($("#channel").val());
				data[hostSecName][keyMode] = parseInt($("#wlanMode").val());
				data[hostSecName][keyBandwidth] = parseInt($("#wlanWidth").val());

				var modeVal = $("#wlanMode").val();

				if (twtAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal)
				{
					data[hostSecName][keyTWT] = $("#TWTSwitchOn")[0].checked == true ? 1 : 0;
				}

				if (ofdmaAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal)
				{
					data[hostSecName][keyOFDMA] = $("#OFDMASwitchOn")[0].checked == true ? 1 : 0;
				}

				if (muMimoAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal)
				{
					data[hostSecName][keyMimo] = $("#MUMimoSwitchOn")[0].checked == true ? 1 : 0;
				}
			}
			else
			{
				data[hostSecName5g] = {};
				data[hostSecName5g][keyChannel] = parseInt($("#channel5g").val());
				data[hostSecName5g][keyMode] = parseInt($("#wlanMode5g").val());
				data[hostSecName5g][keyBandwidth] = parseInt($("#wlanWidth5g").val());

				var modeVal5g = $("#wlanMode5g").val();

				if (twtAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g)
				{
					data[hostSecName5g][keyTWT] = $("#TWTSwitchOn5g")[0].checked == true ? 1 : 0;
				}

				if (ofdmaAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g)
				{
					data[hostSecName5g][keyOFDMA] = $("#OFDMASwitchOn5g")[0].checked == true ? 1 : 0;
				}

				if (muMimoAvailable5g && (uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g || uciWireless.dynOptValue.mode.m_11ac == modeVal5g))
				{
					data[hostSecName5g][keyMimo] = $("#MUMimoSwitchOn5g")[0].checked == true ? 1 : 0;
				}
			}

			return data;
		}

		function sendData(data)
		{
			var wrapData = {}
			wrapData[uciWireless.fileName] = data;

			hsLoading(true);
			$.modify(wrapData, function(ret){
				var timeout = 0;
				if(ENONE == ret[ERR_CODE])
				{
					if (ret["dfs_wait_time"] && ret["dfs_wait_time"] != 0)
					{
						showDFSPopUpWindow(function () {
							getCfg(showCfg);
						}, parseInt(ret["dfs_wait_time"]));
					}
					else
					{
						getCfg(showCfg);
					}
					timeout = APPLY_WIRELESS_SECONDS;
				}
				else
				{
					errHandle(ret[ERR_CODE]);
				}

				$.setTimeout(function(){
					hsLoading(false);
					disableBtn("saveBasic", false);
					disableBtn("saveAdvanced2g", false);
					disableBtn("saveAdvanced5g", false);
				}, timeout);
			});
		}

		function sendSwitchData(data, secName)
		{
			var wrapData = {}
			var fileName = "";
			if (gWifiSwitchSupport && gWifiSwitchUseWireless) {
				fileName = "wireless";
			} else if (gCustomWifiSwitchSupport || (gWifiSwitchSupport && !gWifiSwitchUseWireless)) {
				fileName = "custom_wireless";
			}
			wrapData[fileName] = {};
			wrapData[fileName][secName] = data;

			setLoadingId("saveAll");
			disableBtn("saveBasic", true);
			disableBtn("saveAdvanced2g", true);
			disableBtn("saveAdvanced5g", true);

			hsLoading(true);
			$.modify(wrapData, function(ret){
				var timeout = 0;
				if(ENONE == ret[ERR_CODE])
				{
					if (ret["dfs_wait_time"] && ret["dfs_wait_time"] != 0)
					{
						showDFSPopUpWindow(function () {
							getCfg(showCfg);
						}, parseInt(ret["dfs_wait_time"]));
					}
					else
					{
						getCfg(showCfg);
					}
					timeout = APPLY_WIRELESS_SECONDS;
				}
				else
				{
					errHandle(ret[ERR_CODE]);
				}

				if (gWifiSwitchSplit) {
					var wifiSwitchAllOn2G = id("wifiSwitchOnAll2g").checked;
					var wifiSwitchAllOn5G = id("wifiSwitchOnAll5g").checked;

					disable2GWifiSet(!wifiSwitchAllOn2G);
					disable5GWifiSet(!wifiSwitchAllOn5G);

					if (wifiSwitchAllOn2G || wifiSwitchAllOn5G)
					{
						disableWifiBSSet(false);
						if (gPinWpsSupport) {
							disableWpsSet(false);
						}
					}
					else
					{
						disableWifiBSSet(true);
						if (gPinWpsSupport) {
							disableWpsSet(true);
						}
					}
				} else {
					if (id("wifiSwitchOnAll").checked)
					{
						disable2GWifiSet(false);
						disable5GWifiSet(false);
						id("wifiSwitchOffTip").style.display = "none"
						disableWifiBSSet(false);

						if (gPinWpsSupport) {
							disableWpsSet(false);
						}
					}
					else
					{
						disable2GWifiSet(true);
						disable5GWifiSet(true);
						disableWifiBSSet(true);
						id("wifiSwitchOffTip").style.display = "block"

						if (gPinWpsSupport) {
							disableWpsSet(true);
						}
					}
				}

				$.setTimeout(function(){
					hsLoading(false);
					disableBtn("saveBasic", false);
					disableBtn("saveAdvanced2g", false);
					disableBtn("saveAdvanced5g", false);
				}, timeout);
			});
		}

		function pwdCheckMixChars(str)
		{
			var hasNum = false;
			var hasLetter = false;
			var hasSymbol = false;

			hasNum = /\d/g.test(str);
			hasLetter = /[a-zA-Z]/g.test(str);
			hasSymbol = /[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]/g.test(str);

			return (hasNum && hasSymbol && hasLetter);
		}

		function checkTWTStatus(secName)
		{
			if (secName == hostSecName)
			{
				if ($("#TWTSwitchOn")[0].checked == true)
				{
					id("TWTCompatibilityTip2g").style.display = "block";
					id("compatibilityNote2g").style.visibility = "visible";
				}
				else
				{
					id("TWTCompatibilityTip2g").style.display = "none";
					id("compatibilityNote2g").style.visibility = "hidden";
				}
			}
			else if (secName == hostSecName5g)
			{
				if ($("#TWTSwitchOn5g")[0].checked == true)
				{
					id("TWTCompatibilityTip5g").style.display = "block";
					id("compatibilityNote5g").style.visibility = "visible";
				}
				else
				{
					id("TWTCompatibilityTip5g").style.display = "none";
					id("compatibilityNote5g").style.visibility = "hidden";
				}
			}
		}

		function checkWlanPwdDep()
		{
			var width = 24, tip = "";
			var lgPwdlessTip = "none";
			var pwdValue;
			pwdValue = replaceUnicodeBlank(wlanPwd);

			var len = pwdValue.length;
			var lgPwdNoteVi = "visible";
			var iClass = "warn";

			if (len >= 0 && len < 8)
			{
				lgPwdNoteVi = "hidden";
				lgPwdlessTip = "inline-block";
			}
			else if (/^\d+$/.test(pwdValue) ||
				/^[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]+$/.test(pwdValue) ||
				/^[a-zA-Z]+$/.test(pwdValue))
			{
				if (len <= 12)
				{
					tip = label.weak;
					width = width;
				}
				else
				{
					tip = label.media;
					width = width*2;
				}
			}
			else if (true == pwdCheckMixChars(pwdValue))
			{
				tip = label.strong;
				iClass = "correct";
				width = width*3;
			}
			else
			{
				if (len <= 12)
				{
					tip = label.media;
					width = width*2;
				}
				else
				{
					tip = label.strong;
					iClass = "correct";
					width = width*3;
				}
			}

			id("pwdDepNote2G").style.visibility = lgPwdNoteVi;
			id("pwdDep2G").innerHTML = tip;
			id("chgPwdDep2G").style.width = width + "px";
			id("pwdDepI").className = iClass;
		}

		function reset2gPhyConfig()
		{
			channel.resetOptions(channelOpt2g, oldWlanInfo[uciWireless.dynOptName.channel]);
			wlanWidth.resetOptions(bandWidthOpt2g, oldWlanInfo[uciWireless.dynOptName.bandwidth]);
			mode.resetOptions(modeOpt2g, oldWlanInfo[uciWireless.dynOptName.mode]);
			wlanWidth.disable(false);
		}

		function reset5gPhyConfig()
		{
			channel5g.resetOptions(channelOpt5g, oldWlanInfo5g[uciWireless.dynOptName.channel]);
			wlanWidth5g.resetOptions(bandWidthOpt5g, oldWlanInfo5g[uciWireless.dynOptName.bandwidth]);
			mode5g.resetOptions(modeOpt5g);
			wlanWidth5g.disable(false);
			mode5g.changeSel(oldWlanInfo5g[uciWireless.dynOptName.mode]);
		}

		function wlan2gPhyConfigChanged()
		{
			if ((oldWlanInfo[uciWireless.dynOptName.bandwidth]) != parseInt($("#wlanWidth").val()) ||
				(oldWlanInfo[uciWireless.dynOptName.mode]) != parseInt($("#wlanMode").val()) ||
				(oldWlanInfo[uciWireless.dynOptName.channel]) != parseInt($("#channel").val()))
			{
				return true;
			}

			return false;
		}

		function wlan5gPhyConfigChanged()
		{
			if ((oldWlanInfo5g[uciWireless.dynOptName.bandwidth]) != parseInt($("#wlanWidth5g").val()) ||
				(oldWlanInfo5g[uciWireless.dynOptName.mode]) != parseInt($("#wlanMode5g").val()) ||
				(oldWlanInfo5g[uciWireless.dynOptName.channel]) != parseInt($("#channel5g").val()))
			{
				return true;
			}

			return false;
		}

		/* 保存基本设置 */
		function onSaveBasic()
		{
			var ssidObj = id("ssid");
			if (errHandle(checkSsid(ssidObj.value), ssidObj))
			{
				return;
			}

			var pwdVal = replaceUnicodeBlank(wlanPwd);
			if (errHandle(checkWlanPwd(pwdVal), wlanPwd))
			{
				return;
			}

			var newWlanCfg = makeSendDataBasic();
			var switchVal = newWlanCfg[uciFunction.optName.wlanBS][uciWireless.optName.wifiEnable];

			/* 数据未改变，则直接返回 */
			if (!checkCfgChgedBasic(oldBsInfo, newWlanCfg[uciFunction.optName.wlanBS]))
			{
				return;
			}

			getWDSInfo(function(wdsInfo){
				if ((0 == switchVal) &&
					(oldBsInfo[uciWireless.optName.wifiEnable] != switchVal) &&
					((uciWireless.dynOptValue.enable.on == wdsInfo[wdsSecName][uciWireless.dynOptName.enable]) ||
						(uciWireless.dynOptValue.enable.on == wdsInfo[wdsSecName5g][uciWireless.dynOptName.enable])))
				{
					/* 弹出确认框 */
					var tips = gSysModeSupport ? label.wirelessSwitchTipForWDS1 : label.wirelessSwitchTipForWDS;
					showConfirm(tips, function(result){
							if (true == result)
							{
								onSaveSendBasic(newWlanCfg);
							}
							else
							{
								id("wifiSwitchOn").checked = true;
							}
						}
					);
				}
				else
				{
					onSaveSendBasic(newWlanCfg);
				}
			});
		}

		function onSaveAdvanced()
		{
			var that = this;
			var newWlanCfg = makeSendDataAdvanced(that.id);

			/* 数据未改变，则直接返回 */
			if (that.id == "saveAdvanced2g" && !checkCfgChgedAdvanced(oldWlanInfo, newWlanCfg[hostSecName], "2g") ||
				that.id == "saveAdvanced5g" && !checkCfgChgedAdvanced(oldWlanInfo5g, newWlanCfg[hostSecName5g], "5g"))
			{
				return;
			}

			if ($("#TWTSwitchOn")[0].checked == true)
			{
				id("TWTCompatibilityTip2g").style.display = "block";
				id("compatibilityNote2g").style.visibility = "visible";
			}
			else
			{
				id("TWTCompatibilityTip2g").style.display = "none";
				id("compatibilityNote2g").style.visibility = "hidden";
			}

			if ($("#TWTSwitchOn5g")[0].checked == true)
			{
				id("TWTCompatibilityTip5g").style.display = "block";
				id("compatibilityNote5g").style.visibility = "visible";
			}
			else
			{
				id("TWTCompatibilityTip5g").style.display = "none";
				id("compatibilityNote5g").style.visibility = "hidden";
			}

			function toSave(){
				getWDSInfo(function(wdsInfo){

					if (that.id == "saveAdvanced2g" && wlan2gPhyConfigChanged() &&
						(uciWireless.dynOptValue.enable.on == wdsInfo[wdsSecName][uciWireless.dynOptName.enable]))
					{
						/* WDS开启时，不允许修改信道 */
						var str = gSysModeSupport ? errStr.wlanInvOptionsWithWDSOn1 : errStr.wlanInvOptionsWithWDSOn;
						showAlert(str);
						reset2gPhyConfig();
						return;
					}
					else if (that.id == "saveAdvanced5g" && wlan5gPhyConfigChanged() &&
						(uciWireless.dynOptValue.enable.on == wdsInfo[wdsSecName5g][uciWireless.dynOptName.enable]))
					{
						/* WDS开启时，不允许修改信道 */
						var str = gSysModeSupport ? errStr.wlanInvOptionsWithWDSOn1 : errStr.wlanInvOptionsWithWDSOn;
						showAlert(str);
						reset5gPhyConfig();
						return;
					}
					else
					{
						onSaveSendAdvanced(newWlanCfg, that.id);
					}
				});
			}

			if (that.id == "saveAdvanced5g")
			{
				if (gMeshSupport && (oldWlanInfo5g.channel != newWlanCfg[hostSecName5g].channel) &&
					(newWlanCfg[hostSecName5g].channel >= 52 && newWlanCfg[hostSecName5g].channel <= 64)) {
					showConfirm(label.band2CompatibilityTips1, function(result) {
						if (result) {
							if (uciWireless.dynOptValue.bandwidth.bw20 == parseInt($("#wlanWidth5g").val())) {
								showConfirm(label.bw20Tips, function(result){
									if (true == result)
									{
										toSave();
									}
								});
							} else {
								toSave();
							}
						}
					});
				} else if (uciWireless.dynOptValue.bandwidth.bw20 == parseInt($("#wlanWidth5g").val())) {
					showConfirm(label.bw20Tips, function(result){
						if (true == result)
						{
							toSave();
						}
					});
				} else {
					toSave();
				}
			}
			else if (that.id == "saveAdvanced2g" && $("#wlanMode").val() == uciWireless.dynOptValue.mode.m_11n)
			{
				if (gCipherSupport || gCipherSupport2g || gCipherSupport5g)
				{
					newWlanCfg[hostSecName][uciWireless.dynOptName.cipher] = uciWireless.dynOptValue.cipher.aes;
					if (oldBsInfo[uciWireless.dynOptName.cipher] == uciWireless.dynOptValue.cipher.tkip)
					{
						newWlanCfg[uciFunction.optName.wlanBS] = {};
						newWlanCfg[uciFunction.optName.wlanBS][uciWireless.dynOptName.cipher] = uciWireless.dynOptValue.cipher.aes;
					}
				}
				toSave();
			}
			else
			{
				toSave();
			}
		}

		/* 发送无线高级数据 */
		function onSaveSendAdvanced(newWlanCfg, saveId)
		{
			setLoadingId(saveId);
			if (saveId == "saveAdvanced2g")
			{
				disableBtn("saveAdvanced5g", true);
				disableBtn("saveBasic", true);
			}
			else
			{
				disableBtn("saveAdvanced2g", true);
				disableBtn("saveBasic", true);
			}

			if (!newWlanCfg[uciFunction.optName.wlanBS])
			{
				newWlanCfg[uciFunction.optName.wlanBS] = {};
			}
			newWlanCfg[uciFunction.optName.wlanBS][uciWireless.optName.bsEnable] = id("wifiUniteOn").checked ? ENABLE : DISABLE;
			sendData(newWlanCfg);
		}

		function showDisconnectConfirm(newWlanCfg)
		{
			var switchChange = false;
			var wifiDevChange = false;

			/* 无线设备连接时，如果关闭所连频段的无线，则弹出确认提示 */
			if ((oldBsInfo[uciWireless.optName.wifiEnable] != newWlanCfg[uciFunction.optName.wlanBS][uciWireless.optName.wifiEnable])
				&& (newWlanCfg[uciFunction.optName.wlanBS][uciWireless.optName.wifiEnable] == DISABLE))
			{
				switchChange = true;
			}

			if (switchChange)
			{
				var reqData = {"hosts_info":{"table": "host_info"}};
				$.query(reqData, function(result){
					var epStaList = formatTableData(result["hosts_info"]["host_info"]);
					var len = epStaList.length

					for (var index = 0; index < len; index++)
					{
						var item = epStaList[index];
						if (item["is_cur_host"] == IS_CURRENT_HOST)
						{
							/* 无线主人网络设备 */
							if (item["type"] == HOST_TYPE_WIRELESS)
							{

								wifiDevChange = true;
							}
							else
							{
								/* 有线连接 */
								setLoadingId("saveBasic");
								disableBtn("saveAdvanced2g", true);
								disableBtn("saveAdvanced5g", true);
								sendData(newWlanCfg);
							}

							break;
						}
					}

					/* 无线设备连接时，如果关闭所连频段的无线，则弹出确认提示 */
					if (wifiDevChange)
					{
						showConfirm(label.wirelessSwitchTip, function(result){
								if (true == result){
									setLoadingId("saveBasic");
									disableBtn("saveAdvanced2g", true);
									disableBtn("saveAdvanced5g", true);
									sendData(newWlanCfg);
								}
								else{
									id("wifiSwitchOn").checked = true;
								}
							}
						);
					}
				});
			}
			else
			{
				/* 无线开关未改变 */
				setLoadingId("saveBasic");
				disableBtn("saveAdvanced2g", true);
				disableBtn("saveAdvanced5g", true);
				sendData(newWlanCfg);
			}
		}

		/* 发送无线基本数据 */
		function onSaveSendBasic(newWlanCfg)
		{
			var confirmMsg;
			if (newWlanCfg[uciFunction.optName.wlanBS][uciWireless.optName.wifiEnable] == 0) {
				if (gWifiSwitchSupport || gCustomWifiSwitchSupport) {
					if (guestOpen) {
						confirmMsg = "关闭该网络后，仅能通过网线连接进入路由器管理页。请确认是否仍要关闭？";
					} else {
						confirmMsg = label.closeHostPassive;
					}

					showConfirm(confirmMsg, function(result) {
						if (true == result) {
							setLoadingId("saveBasic");
							disableBtn("saveAdvanced2g", true);
							disableBtn("saveAdvanced5g", true);
							sendData(newWlanCfg);
						} else {
							id("wifiSwitchOn").checked = true;
						}
					});
				} else {
					showDisconnectConfirm(newWlanCfg);
				}
			} else {
				setLoadingId("saveBasic");
				disableBtn("saveAdvanced2g", true);
				disableBtn("saveAdvanced5g", true);
				sendData(newWlanCfg);
			}
		}

		function onSaveAll()
		{
			function doOnSaveAll()
			{
				var newSwitchCfgOff = false;
				if (gWifiSwitchSplit) {
					newSwitchCfgOff = newSwitchCfg[uciWireless.dynOptName.enable_2g] == "off" || newSwitchCfg[uciWireless.dynOptName.enable_5g] == "off";
				} else {
					newSwitchCfgOff = newSwitchCfg[uciWireless.dynOptName.enable] == "off";
				}
				if (newSwitchCfgOff)
				{
					showConfirm(label.closeDirect,function(result){
						if (true == result){
							onSaveSwitchSendData(newSwitchCfg, uciCustomWireless.dynData.wifi_switch);
						}
						else{
							id("wifiSwitchOnAll").checked = true;
							id("wifiSwitchOffAll").checked = false;
						}
					});
				}
				else
				{
					onSaveSwitchSendData(newSwitchCfg, uciWireless.dynData.wifi_switch);
				}
			}

			var newSwitchCfg = makeWifiSwitchSendData();

			/* 数据未改变，则直接返回 */
			if (!checkSwitchCfgChged(oldSwitchInfo, newSwitchCfg))
			{
				return;
			}

			function isSaveAll()
			{
				getWDSInfo(doOnSaveAll);
			}
			isSaveAll();
		}

		function onSaveSwitchSendData(newSwitchCfg, secSwitch)
		{
			sendSwitchData(newSwitchCfg, secSwitch);
		}

		function onGenPinCode()
		{
			var data = {};
			data[uciCustomWireless.fileName] = {};
			data[uciCustomWireless.fileName][uciCustomWireless.actionName.wpsGeneratePin] = null;

			$.action(data,function(result){
				if (ENONE == result[ERR_CODE])
				{
					$("#wpsRouterPinCode").val(result[uciCustomWireless.fileName][uciCustomWireless.actionName.wpsGeneratePin][uciCustomWireless.optName.vendorPin]);
				}
			});
		}

		function onSaveWpsRouterPin()
		{
			/* 当前页面路由器PIN码开关状态 */
			var wpsRouterPinEnable = id("wpsRouterPinOn").checked ? "on" : "off";
			/* 当前PIN码值 */
			var wpsRouterPinCode = $("#wpsRouterPinCode").val();

			if(id("wpsRouterPinOn").checked && errHandle(checkPin(wpsRouterPinCode), id("genVendorPin")))
			{
				return;
			}

			/* 路由器PIN码设置没有改变，直接返回 */
			if (wpsRouterPinEnable == oldWpsConfig[uciCustomWireless.optName.pinEnable]
					&& wpsRouterPinCode == oldWpsConfig[uciCustomWireless.optName.pinCode])
			{
				return;
			}

			var data = {};
			data[uciCustomWireless.fileName] = {};
			data[uciCustomWireless.fileName][uciCustomWireless.secName.wpsConfig] = {};
			data[uciCustomWireless.fileName][uciCustomWireless.secName.wpsConfig][uciCustomWireless.optName.pinEnable] = wpsRouterPinEnable;
			data[uciCustomWireless.fileName][uciCustomWireless.secName.wpsConfig][uciCustomWireless.optName.pinCode] = wpsRouterPinCode;

			setLoadingId("saveWpsRouterPin");
			hsLoading(true);

			$.modify(data, function(ret) {
				var timeout = 1;
				if(ENONE == ret[ERR_CODE])
				{
					oldWpsConfig = data[uciCustomWireless.fileName][uciCustomWireless.secName.wpsConfig];
				}
				else
				{
					errHandle(ret[ERR_CODE], id("saveWpsRouterPin"));
				}

				$.setTimeout(function() {
					hsLoading(false);
				}, timeout);
			});
		}

		function onWpsConnect()
		{
			var data = {};
			data[uciCustomWireless.fileName] = {};
			data[uciCustomWireless.fileName][uciCustomWireless.actionName.wpsLink] = {};
			data[uciCustomWireless.fileName][uciCustomWireless.actionName.wpsLink][uciCustomWireless.optName.linkType] = id("wpsMethodButton").checked ? uciCustomWireless.optValue.linkType.button : uciCustomWireless.optValue.linkType.pin;
			data[uciCustomWireless.fileName][uciCustomWireless.actionName.wpsLink][uciCustomWireless.optName.band] = "all";

			if (id("wpsMethodPin").checked)
			{
				var wpsTerminalPinCode = $("#wpsTerminalPinCode").val();
				if(errHandle(checkPin(wpsTerminalPinCode), id("wpsTerminalPinCode")))
				{
					return;
				}
				data[uciCustomWireless.fileName][uciCustomWireless.actionName.wpsLink][uciCustomWireless.optName.terminalPinCode] = wpsTerminalPinCode;
			}

			setLoadingId("wpsConnect");
			hsLoading(true);

			$.action(data,function(result){
				hsLoading(false);
				if (ENONE != result[ERR_CODE])
				{
					errHandle(result[ERR_CODE], id("wpsConnect"));
				}
			});
		}

		function getWpsPinCfg(cb)
		{
			var args = {};
			args[uciCustomWireless.fileName] = {};
			args[uciCustomWireless.fileName][KEY_NAME] = uciCustomWireless.secName.wpsConfig;

			$.query(args, function(result) {
				if(ENONE == result[ERR_CODE])
				{
					oldWpsConfig = result[uciCustomWireless.fileName][uciCustomWireless.secName.wpsConfig];
					if (cb)
					{
						cb(result);
					}
				}
			}, true);
		}

		function getCfg(funcCbk)
		{
			var args = {};

			args[uciWireless.fileName] = {};
			args[uciWireless.fileName][KEY_NAME] = [uciWireless.dynData.host_2g,
				uciWireless.dynData.wds_2g,
				uciWireless.dynData.host_5g,
				uciWireless.dynData.wds_5g,
				uciFunction.optName.wlanBS];
			args[uciFunction.fileName] = {};
			args[uciFunction.fileName][KEY_NAME] = [uciFunction.secName.newModuleSpec];
			if (gWifiSwitchSupport && gWifiSwitchUseWireless) {
				args[uciWireless.fileName][KEY_NAME].push(uciWireless.dynData.wifi_switch);
			} else if (gCustomWifiSwitchSupport || (gWifiSwitchSupport && !gWifiSwitchUseWireless)) {
				args[uciCustomWireless.fileName] = {};
				args[uciCustomWireless.fileName][KEY_NAME] = [uciCustomWireless.dynData.wifi_switch];
			}

			$.query(args,
				function(data)
				{
					if (gWifiSwitchSupport && gWifiSwitchUseWireless) {
						oldSwitchInfo = data[uciWireless.fileName][uciWireless.dynData.wifi_switch];
					} else if (gCustomWifiSwitchSupport || (gWifiSwitchSupport && !gWifiSwitchUseWireless)) {
						oldSwitchInfo = data[uciCustomWireless.fileName][uciCustomWireless.dynData.wifi_switch];
					}
					oldWlanInfo = data[uciWireless.fileName][uciWireless.dynData.host_2g];
					wdsInfo = data[uciWireless.fileName][uciWireless.dynData.wds_2g];
					oldWlanInfo5g = data[uciWireless.fileName][uciWireless.dynData.host_5g];
					wdsInfo5g = data[uciWireless.fileName][uciWireless.dynData.wds_5g];
					oldBsInfo = data[uciWireless.fileName][uciFunction.optName.wlanBS];

						if (gMultiSSIDSupport) {
							getMultiSSIDStatus(data);
						}

						if (funcCbk)
						{
							funcCbk(data);
						}
					}, true);
		}

		function showHideElement(idStr, doShow)
		{
			id(idStr).style.display = doShow ? "block" : "none";
		}

		function showWpsCfg(cfgData)
		{
			/* 路由器PIN码功能开关 */
			var wpsRouterPinEnable = cfgData[uciCustomWireless.fileName][uciCustomWireless.secName.wpsConfig][uciCustomWireless.optName.pinEnable];
			/* 路由器PIN码 */
			var wpsRouterPinCode = cfgData[uciCustomWireless.fileName][uciCustomWireless.secName.wpsConfig][uciCustomWireless.optName.pinCode];

			/* 设置PIN码输入框不可操作 */
			disableInput("wpsRouterPinCode", true);

			id("wpsRouterPinOn").checked = wpsRouterPinEnable == "on" ? true : false;
			id("wpsRouterPinOff").checked = wpsRouterPinEnable == "off" ? true : false;
			if (id("wpsRouterPinOn").checked)
			{
				showHideElement("wpsRouterPinCodeUl", true);
			}
			else if (id("wpsRouterPinOff").checked)
			{
				showHideElement("wpsRouterPinCodeUl", false);
			}
			$("#wpsRouterPinCode").val(wpsRouterPinCode);

			/* WPS连接方式默认 - 按键连接 */
			id("wpsMethodButton").checked = true;
			if (id("wpsMethodButton").checked)
			{
				showHideElement("wpsMethodPinUl", false);
			}
			else if (id("wpsMethodPin").checked)
			{
				showHideElement("wpsMethodPinUl", true);
			}
		}

		function showCfg(cfgData)
		{
			var moduleSpecInfo = cfgData[uciFunction.fileName][uciFunction.secName.newModuleSpec];

			var wlanServiceAttr2g = uciFunction.optName.wlanServiceAttr2g;
			var support_field2g = moduleSpecInfo[wlanServiceAttr2g] || "0";
			var wlanServiceAttr5g = uciFunction.optName.wlanServiceAttr5g;
			var support_field5g = moduleSpecInfo[wlanServiceAttr5g] || "0";

			function stringSearch(arr, str)
			{
				var index = arr.length;
				for (var i = 0; i < arr.length; i++)
				{
					if (arr[i] === str)
					{
						return true;
					}
				}
				return false;
			}

			/* 检测2g频段是否支持TWT */
			twtAvailable2g = stringSearch(support_field2g, 'twt');

			/* 检测5g频段是否支持TWT */
			twtAvailable5g = stringSearch(support_field5g, 'twt');

			/* 检测2g频段是否支持OFDMA */
			ofdmaAvailable2g = stringSearch(support_field2g, 'ofdma');

			/* 检测5g频段是否支持OFDMA */
			ofdmaAvailable5g = stringSearch(support_field5g, 'ofdma');

			/* 检测是否2G支持MU-MIMO */
			var mumimo = moduleSpecInfo["wireless2g_vhtmubfer"] || "0";
			muMimoAvailable2g = (1 == parseInt(mumimo, 10));

			/* BS页面参数初始化 */
			var wlanInfo = cfgData[uciWireless.fileName][uciFunction.optName.wlanBS];

			var wifiState = parseInt(wlanInfo[uciWireless.optName.wifiEnable]);
			id("wifiSwitchOn").checked = wifiState;
			id("wifiSwitchOff").checked = !wifiState;

			$("#ssid").val(wlanInfo[uciWireless.dynOptName.ssid]);
			$("#wlanPwd").val(wlanInfo[uciWireless.dynOptName.key]);

			id("ssidBrd").checked = (parseInt(wlanInfo[uciWireless.dynOptName.ssidbrd]) == uciWireless.dynOptValue.ssidbrd.on);
			if (gCipherSupport || gCipherSupport2g || gCipherSupport5g)
			{
				selectInit("cipher", cipherOpt2g, wlanInfo[uciWireless.dynOptName.cipher]);
			}
			if (gAuthSupport || gAuthSupport2g || gAuthSupport5g)
			{
				var moduleSpecAuthType2g = moduleSpecInfo[uciFunction.optName.supportWlanAuthType2g];
				var authOpt2g = initAuthType(moduleSpecAuthType2g);
				var moduleSpecAuthType5g = moduleSpecInfo[uciFunction.optName.supportWlanAuthType5g];
				var authOpt5g = initAuthType(moduleSpecAuthType5g);
				for (var i = 0; i < authOpt2g.length; i++){
					for (var j = 0; j < authOpt5g.length; j++){
						if (authOpt5g[j]['str'] === authOpt2g[i]['str'] || authOpt5g[j]['value'] === authOpt2g[i]['value']){
							authOpt5g.splice(j, 1);
						}
					}
				}

				var authOpt = authOpt2g.concat(authOpt5g);
				// authOpt.sort(function(a, b){return a - b});

				var valueConTmp = $("#auth span.value");
				var valueConWidth = parseInt(valueConTmp.css("width"));
				selectInit("auth", authOpt, wlanInfo[uciWireless.dynOptName.auth], authSelectHandler, valueConWidth);
				id("auth").changeSel(wlanInfo[uciWireless.dynOptName.auth]);
			}

			/* 2.4G页面参数初始化 */
			wlanInfo = cfgData[uciWireless.fileName][uciWireless.dynData.host_2g];
			var TWTdefault2g = parseInt(wlanInfo[uciWireless.dynOptName.twt]);
			var OFDMAdefault2g = parseInt(wlanInfo[uciWireless.dynOptName.ofdma]);
			var MUMIMOdefault2g = parseInt(wlanInfo[uciWireless.dynOptName.muMIMO]);
			id("TWTSwitchOn").checked = TWTdefault2g;
			id("TWTSwitchOff").checked = !TWTdefault2g;
			id("OFDMASwitchOn").checked = OFDMAdefault2g;
			id("OFDMASwitchOff").checked = !OFDMAdefault2g;
			id("MUMimoSwitchOn").checked = MUMIMOdefault2g;
			id("MUMimoSwitchOff").checked = !MUMIMOdefault2g;
			var moduleSpecChannel2g = moduleSpecInfo[uciFunction.optName.channel2g] || label.wlanChannels;
			channelOpt2g = initChannel(moduleSpecChannel2g);
			selectInit("wlanWidth", bandWidthOpt2g, wlanInfo[uciWireless.dynOptName.bandwidth]);

			selectInit("wlanMode", modeOpt2g, wlanInfo[uciWireless.dynOptName.mode], modeSelectHandler);
			modeSelectHandler(wlanInfo[uciWireless.dynOptName.mode]);
			wlanWidth.changeSel(wlanInfo[uciWireless.dynOptName.bandwidth]);

			selectInit("channel", channelOpt2g, wlanInfo[uciWireless.dynOptName.channel]);

			/* 检查是否支持带宽80+80MHZ*/
			var availableBandWidth = moduleSpecInfo[uciFunction.optName.bandWidth5g];
			if (availableBandWidth)
			{
				for (var idx = 0; idx < availableBandWidth.length; idx++)
				{
					if (BW_160M_DISCONNECTED == decodeURIComponent(availableBandWidth[idx]))
					{
						BW_160M_SUPPORT = true;
						break;
					}
				}
			}

			/* 检查是否支持MU-MIMO */
			var vhtmubfer = moduleSpecInfo["wireless5g_vhtmubfer"] || "0";
			muMimoAvailable5g = (1 == parseInt(vhtmubfer, 10));

			/* 5G页面参数初始化 */
			wlanInfo = cfgData[uciWireless.fileName][uciWireless.dynData.host_5g];
			var TWTdefault5g = parseInt(wlanInfo[uciWireless.dynOptName.twt]);
			var OFDMAdefault5g = parseInt(wlanInfo[uciWireless.dynOptName.ofdma]);
			var MUMIMOdefault5g = parseInt(wlanInfo[uciWireless.dynOptName.muMIMO]);
			id("TWTSwitchOn5g").checked = TWTdefault5g;
			id("TWTSwitchOff5g").checked = !TWTdefault5g;
			id("OFDMASwitchOn5g").checked = OFDMAdefault5g;
			id("OFDMASwitchOff5g").checked = !OFDMAdefault5g;
			id("MUMimoSwitchOn5g").checked = MUMIMOdefault5g;
			id("MUMimoSwitchOff5g").checked = !MUMIMOdefault5g;
			var moduleSpecChannel5g = moduleSpecInfo[uciFunction.optName.channel5g] || label.wlanChannels5g;
			channelOpt5g = initChannel(moduleSpecChannel5g);
			lastChan5gValue = wlanInfo[uciWireless.dynOptName.channel];
			tmpBandWidthOpt5g = BW_160M_SUPPORT ? bandWidthOpt5gSpecial : bandWidthOpt5g;
			selectInit("wlanWidth5g", tmpBandWidthOpt5g, wlanInfo[uciWireless.dynOptName.bandwidth], undefined, 20);
			/* 检查是否支持MU-MIMO */
			var vhtmubfer = moduleSpecInfo["wireless5g_vhtmubfer"] || "0";
			muMimoAvailable5g = (1 == parseInt(vhtmubfer, 10));

			/* 2.4G无线设置帮助信息确定 */
			var helpBtn2g = id("wlanHelp");
			var help2GIdArrayStr = "wlanNetworkHelpAdvanced";
			if(twtAvailable2g){
				help2GIdArrayStr += " wlanTWTHelp";
			}
			if(muMimoAvailable2g){
				help2GIdArrayStr += " wlanMUMIMOHelp";
			}
			if(ofdmaAvailable2g){
				help2GIdArrayStr += " wlanOFDMAHelp";
			}
			helpBind(helpBtn2g,help2GIdArrayStr);

			/* 5G无线设置帮助信息确定 */
			var helpBtn5g = id("wlanHelp5G");
			var help5GIdArrayStr = "wlanNetworkHelpAdvanced";
			if(twtAvailable5g){
				help5GIdArrayStr += " wlanTWTHelp";
			}
			if(muMimoAvailable5g){
				help5GIdArrayStr += " wlanMUMIMOHelp";
			}
			if(ofdmaAvailable5g){
				help5GIdArrayStr += " wlanOFDMAHelp";
			}
			helpBind(helpBtn5g,help5GIdArrayStr);

			selectInit("wlanMode5g", modeOpt5g, wlanInfo[uciWireless.dynOptName.mode], modeSelectHandler5g);
			modeSelectHandler5g(wlanInfo[uciWireless.dynOptName.mode]);

			selectInit("channel5g", channelOpt5g, wlanInfo[uciWireless.dynOptName.channel], channelSelectHandler5g);
			channelSelectHandler5g(wlanInfo[uciWireless.dynOptName.channel]);

			wlanWidth5g.changeSel(wlanInfo[uciWireless.dynOptName.bandwidth]);
			if (gWifiSwitchSupport || gCustomWifiSwitchSupport) {
				/* 无线总开关 */
				var switchInfo;
				var switchAll;
				if (gWifiSwitchUseWireless) {
					switchInfo = cfgData[uciWireless.fileName][uciWireless.dynData.wifi_switch];
					switchAll = switchInfo[uciWireless.dynOptName.enable] == "on";
				} else {
					switchInfo = cfgData[uciCustomWireless.fileName][uciCustomWireless.dynData.wifi_switch]
					switchAll = switchInfo[uciCustomWireless.dynOptName.enable] == "on";
				}

				if (gWifiSwitchSplit) {
					var switch2g = switchAll && (switchInfo[uciCustomWireless.dynOptName.enable_2g] == "on");
					var switch5g = switchAll && (switchInfo[uciCustomWireless.dynOptName.enable_5g] == "on");
					id("wifiSwitchOnAll2g").checked = switch2g;
					id("wifiSwitchOnAll5g").checked = switch5g;
					id("wifiSwitchOffAll2g").checked = !(switch2g);
					id("wifiSwitchOffAll5g").checked = !(switch5g);

					disable2GWifiSet(!switch2g);
					disable5GWifiSet(!switch5g);

					if (switch2g || switch5g)
					{
						disableWifiBSSet(false);
						if (gPinWpsSupport) {
							disableWpsSet(false);
						}
					}
					else
					{
						disableWifiBSSet(true);
						if (gPinWpsSupport) {
							disableWpsSet(true);
						}
					}
				} else {
					id("wifiSwitchOnAll").checked = switchAll;
					id("wifiSwitchOffAll").checked = !(switchAll);
					id("wifiSwitchOffTip").style.display = switchAll? "none": "block";

					if (id("wifiSwitchOffAll").checked) {
						disable2GWifiSet(true);
						disable5GWifiSet(true);
						disableWifiBSSet(true);
						if (gPinWpsSupport) {
							disableWpsSet(true);
						}
					}
				}
			}
			if (gCipherSupport || gCipherSupport2g || gCipherSupport5g) {
				if (uciWireless.dynOptValue.mode.m_11n == wlanInfo[uciWireless.dynOptName.mode])
				{
					id("cipher").disable(true);
				}
			}


			id("TWTCompatibilityTip2g").style.display = id("TWTSwitchOn").checked ? "block":"none";
			id("compatibilityNote2g").style.visibility = id("TWTSwitchOn").checked ? "visible":"hidden";
			id("TWTCompatibilityTip5g").style.display = id("TWTSwitchOn5g").checked ? "block":"none";
			id("compatibilityNote5g").style.visibility = id("TWTSwitchOn5g").checked ? "visible":"hidden";

			var modeVal = parseInt(id("wlanMode").value);
			var modeVal5g = parseInt(id("wlanMode5g").value);
			id("TWTSel").style.display = (twtAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ? "block" : "none";
			id("MUMimoSel").style.display = (muMimoAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ? "block" : "none";
			id("OFDMASel").style.display = (ofdmaAvailable2g && uciWireless.dynOptValue.mode.m_11bgn_ax == modeVal) ? "block" : "none";
			id("OFDMASel5g").style.display = (ofdmaAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g) ? "block" : "none";
			id("TWTSel5g").style.display = (twtAvailable5g && uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g) ? "block" : "none";
			id("MUMimoSel5g").style.display = (muMimoAvailable5g && (uciWireless.dynOptValue.mode.m_11ac_ax == modeVal5g || uciWireless.dynOptValue.mode.m_11ac == modeVal5g)) ? "block" : "none";
		}

		function multiSSIDInit(list)
		{
			if (firstLoadDataGrid)
			{
				firstLoadDataGrid = false;
				dataGridLs = new DataGrid();
				dataGridLs.init({
					id:"SSIDTable",									// table ID
					data:list,											// 数据源
					hasSelBox:false,
					edit:false,
					head:[{field:label.multiSSIDIndex, width:90},				// 表头选项
						{field:label.wirelessName, width:160},
						{field:label.wirelessPwd, width:118},
						{field:label.multiSSIDBand, width:90},
						{field:label.multiSSIDStatus, width:90},
						{field:label.multiSSIDSetUp, width:90}],
					list:[{edit:false, name:"multiSSIDIndex", type:"str"},
						{edit:false, name:"wirelessName", type:"str"},
						{edit:false, name:"wirelessPwd", type:"str"},
						{edit:false, name:"multiSSIDBand", type:"str"},
						{edit:false, name:"multiSSIDStatus", type:"str"},
						{edit:false, name:"multiSSIDSetUp", type:"str", className:"setUp"}]/*,
					 niceScroll:gBasicRouteSetRNiceScroll*/
				});

			}
			else
			{
				dataGridLs.setDataSource(list);
				dataGridLs.refresh();
			}

			var $setUpButtons = $(".setUp");
			$setUpButtons.attr("title", "");
			var srcArr = ["../web-static/images/multi_ssid_host_2g.png", "../web-static/images/multi_ssid_guest_2g.png",
				"../web-static/images/multi_ssid_cmcc.png", "../web-static/images/multi_ssid_cmcc.png",
				"../web-static/images/multi_ssid_host_5g.png", "../web-static/images/multi_ssid_guest_5g.png",
				"../web-static/images/multi_ssid_cmcc.png", "../web-static/images/multi_ssid_cmcc.png"];

			if (gElinkSupport)
			{
				srcArr[2] = srcArr[3] = srcArr[6] = srcArr[7] = "../web-static/images/multi_ssid_ctcc.png";
			}

			for (var i = 0; i < list.length; i++)
			{
				(function(num) {
					var img = new Image();
					img.src = srcArr[num];
					img.onload = function() {
						var imgOffsetX = img.width - 82;	//82为单元格宽度和图片尖尖部分的偏移。
						var imgOffsetY = 26;

						$setUpButtons.eq(num).mouseover(function(event) {
							var scrollbarWidth = 0;
							// 判断是否有滚动条，有滚动条时需要算上滚动条的宽度。
							if (document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight))
							{
								var scrollDiv = document.createElement("div");
								scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
								document.body.appendChild(scrollDiv);
								scrollbarWidth = (scrollDiv.offsetWidth - scrollDiv.clientWidth) / 2;
								document.body.removeChild(scrollDiv);
							}
							// 获取滚动条位置！！！！已知问题：360浏览器极速模式无法成功获取！！！！
							var scrollX = (((t = document.documentElement) || (t = document.body.parentNode)) && typeof t.scrollLeft == 'number' ? t : document.body).scrollLeft;
							var scrollY = (((t = document.documentElement) || (t = document.body.parentNode)) && typeof t.scrollTop == 'number' ? t : document.body).scrollTop;

							var toast = $('<div class="showTips"></div>').append(img);
							$('body').append(toast);
							var target = event.srcElement || event.target;
							var clientRect = target.getBoundingClientRect();

							$('.showTips').css({
								position: "absolute",
								top: clientRect.top + imgOffsetY + scrollY + "px",
								left: clientRect.left - imgOffsetX + scrollX - scrollbarWidth + "px",
								zIndex: 1001
							});
						});
						$setUpButtons.eq(num).mouseleave(function() {
							$('.showTips').remove();
						});

					}

				})(i);
			}
		}

		function getMultiSSIDStatus(data)
		{
			var args = {};
			args[uciMultiSsid.fileName] = {};
			args[uciMultiSsid.fileName][KEY_NAME] = [uciMultiSsid.secName.wlan_multi_ssid_2g_1,
				uciMultiSsid.secName.wlan_multi_ssid_2g_2,
				uciMultiSsid.secName.wlan_multi_ssid_5g_1,
				uciMultiSsid.secName.wlan_multi_ssid_5g_2];
			args[uciGuestNet.fileName] = {};
			args[uciGuestNet.fileName][KEY_NAME] = [uciGuestNet.secName.wireless2G,
				uciGuestNet.secName.wireless5G];
			$.query(args, function(res) {
				var switchInfo = data[uciCustomWireless.fileName][uciCustomWireless.dynData.wifi_switch];
				var switchAll = switchInfo[uciCustomWireless.dynOptName.enable] == "on";
				var switch2g = switchAll && switchInfo[uciCustomWireless.dynOptName.enable_2g] == "on";
				var switch5g = switchAll && switchInfo[uciCustomWireless.dynOptName.enable_5g] == "on";
				var dataList = [];
				var dataIndex = {};
				//构建数据
				var host_5g_4 = res[uciMultiSsid.fileName][uciMultiSsid.secName.wlan_multi_ssid_5g_2];
				var host_5g_3 = res[uciMultiSsid.fileName][uciMultiSsid.secName.wlan_multi_ssid_5g_1];
				var guest_5g = res[uciGuestNet.fileName][uciGuestNet.secName.wireless5G];
				var host_5g = data[uciWireless.fileName][uciWireless.dynData.host_5g];
				var host_2g_4 = res[uciMultiSsid.fileName][uciMultiSsid.secName.wlan_multi_ssid_2g_2];
				var host_2g_3 = res[uciMultiSsid.fileName][uciMultiSsid.secName.wlan_multi_ssid_2g_1];
				var guest_2g = res[uciGuestNet.fileName][uciGuestNet.secName.wireless2G];
				var host_2g = data[uciWireless.fileName][uciWireless.dynData.host_2g];

				if (gSupportBS && data[uciWireless.fileName][uciWireless.secName.wlanBS] != undefined &&
				data[uciWireless.fileName][uciWireless.secName.wlanBS][uciWireless.optName.bsEnable] == uciWireless.optValue.bsEnable.enable)
				{
					for (key in data[uciWireless.fileName][uciWireless.secName.wlanBS])
					{
						host_2g[key] = data[uciWireless.fileName][uciWireless.secName.wlanBS][key];
						host_5g[key] = data[uciWireless.fileName][uciWireless.secName.wlanBS][key];
					}
					host_2g[uciWireless.optName.enable] = host_2g[uciWireless.optName.wifiEnable];
					host_5g[uciWireless.optName.enable] = host_5g[uciWireless.optName.wifiEnable];
				}

				var dataObjs = [[host_5g_4, uciMultiSsid.optName.encryption, uciMultiSsid.optName.key],
					[host_5g_3, uciMultiSsid.optName.encryption, uciMultiSsid.optName.key],
					[guest_5g, uciGuestNet.optName.encrypt, uciGuestNet.optName.key],
					[host_5g, uciWireless.optName.keyType, uciWireless.optName.key],
					[host_2g_4, uciMultiSsid.optName.encryption, uciMultiSsid.optName.key],
					[host_2g_3, uciMultiSsid.optName.encryption, uciMultiSsid.optName.key],
					[guest_2g, uciGuestNet.optName.encrypt, uciGuestNet.optName.key],
					[host_2g, uciWireless.optName.keyType, uciWireless.optName.key]];

				for (var i = 0; i < dataObjs.length; i++)
				{
					dataIndex = {};
					var dataObj = dataObjs[i];
					dataIndex.multiSSIDIndex = "SSID-" + (8-i);
					dataIndex.wirelessName = dataObj[0]["ssid"];
					dataIndex.wirelessPwd = (0 == parseInt(dataObj[0][dataObj[1]])) ? "无加密" : dataObj[0][dataObj[2]];
					dataIndex.multiSSIDBand = i < 4 ? "5GHz" : "2.4GHz";
					switchAll = i < 4 ? switch5g : switch2g;
					dataIndex.multiSSIDStatus = (switchAll && (parseInt(dataObj[0]["enable"]) || dataObj[0]["enable"] == "on")) ? "开启" : "关闭";
					dataIndex.multiSSIDSetUp = "设置方法";
					dataList[i] = dataIndex;
				}

				multiSSIDInit(dataList);
			});
		}

		if (gMultiSSIDSupport)
		{
			// 帮助信息默认为移动定制的多SSID功能帮助信息，判断如果是电信定制机型则修改其中的平台信息
			if (gElinkSupport)
			{
				$("#multiSSIDHelp .ispName").text(label.chinaTelecom);
				$("#multiSSIDHelp .ispPlatformName").text(label.chinaTelecomPlatform);
			}

			$("#multiSSIDDiv").removeClass("disNone");
		}

		if (gPinWpsSupport) {
			$("#wpsDiv").removeClass("disNone");
			getWpsPinCfg(showWpsCfg);
		}

		if (gWifiSwitchSupport || gCustomWifiSwitchSupport) {
			$("#wifiSwitchDiv").removeClass("disNone");
			if (gWifiSwitchSplit) {
				$("#wifiSwitchSplit").removeClass("disNone");
			} else {
				$("#wifiSwitchUnity").removeClass("disNone");
			}
		}
		(gAuthSupport || gAuthSupport2g || gAuthSupport5g) && $("#authDiv").removeClass("disNone");
		(gCipherSupport || gCipherSupport2g || gCipherSupport5g) && $("#cipherDiv").removeClass("disNone");
		getCfg(showCfg);
		wlanPwd.onkeyup = function(){checkWlanPwdDep();};

		id("TWTSwitchOn").onclick = function(){checkTWTStatus(hostSecName);};
		id("TWTSwitchOff").onclick = function(){checkTWTStatus(hostSecName);};
		id("TWTSwitchOn5g").onclick = function(){checkTWTStatus(hostSecName5g);};
		id("TWTSwitchOff5g").onclick = function(){checkTWTStatus(hostSecName5g);};

		$("#saveBasic").click(onPreSave);
		$("#saveAdvanced2g").click(onSaveAdvanced);
		$("#saveAdvanced5g").click(onSaveAdvanced);
		$("#saveAll").click(onSaveAll);

		/* PIN WPS */
		$("#genVendorPin").click(onGenPinCode);
		$("#saveWpsRouterPin").click(onSaveWpsRouterPin);
		$("#wpsConnect").click(onWpsConnect);
		$("#wpsRouterPinOn").click(function(){showHideElement("wpsRouterPinCodeUl", true);});
		$("#wpsRouterPinOff").click(function(){showHideElement("wpsRouterPinCodeUl", false);});
		$("#wpsMethodButton").click(function(){showHideElement("wpsMethodPinUl", false);});
		$("#wpsMethodPin").click(function(){showHideElement("wpsMethodPinUl", true);});

		$('input[name="wifiUnite"]').on("click", function(){
			bsSelectChange(this.id == "wifiUniteOn" ? ENABLE : DISABLE);
		});

		id("wifiUniteOn").checked  = true;
		id("wifiUniteOff").checked = false;
	}
	init();
</script>
<style type="text/css">
	#compatibilityNote2g,#compatibilityNote5g {
		visibility: visible;
	}
    input.wlanBroadCase{
        margin-left:12px;
    }
    input.wlanSecEnable{
        margin-left:12px;
    }
    label.desLblWU{
        width:296px;
        font-size:16px;
        font-weight:bold;
    }
    ul.gridLineBS{
        margin-top: 50px;
    }
	ul.gridLineTips{
		margin-top:8px !important;
		height:auto;
		display:none;
	}
	ul.gridLineTips span{
		width:225px;
		margin-left:261px;
		color:#FFFFFF;
		line-height:18px;
		font-size:12px;
		display: block;
	}
	li{
		list-style: none;
		text-align: left;
	}
	div.display{
		margin-top: 10px;
		margin-left: 260px;
	}
	span.warnText{
		color:#FFFFFF;
		font-size:12px;
		width: 210px;
	}
	ul.gridLineB2{
		margin-top: 10px;
	}
	div.warnCon {
		width: 16px;
		height: 16px;
		overflow: hidden;
		display: inline-block;
		vertical-align: top;
	}
	div.warnCon img {
		margin-top: -187px;
		margin-left: -467px;
	}
</style>
<div id="hcCo" class="hcCo">
    <div id="wifiSwitchDiv" class="disNone">
        <div class="title">
            <label class="title">{%label.wifiSwitch%}</label>
            <i class="helpBtn" helpstr="wlanSwitch"></i>
        </div>
        <div class="block">
			<div id="wifiSwitchUnity" class="disNone">
				<ul class="gridLine gridLineA">
					<label class="desLblA desLblWU" style="width: 268px">{%label.wifiSwitch%}</label>
					<input id="wifiSwitchOnAll" name="wifiSwitchAll" class="switchRadio" type="radio" /><label class="noteLbl" for="wifiSwitchOnAll">{%label.openStr%}</label>
					<input id="wifiSwitchOffAll" name="wifiSwitchAll" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wifiSwitchOffAll">{%label.closeStr%}</label>
				</ul>
				<p class="help_tip disNone" id="wifiSwitchOffTip">{%label.wifiSwitchOffTip%}</p>
			</div>
			<div id="wifiSwitchSplit" class="disNone">
				<ul class="gridLine gridLineA">
					<label class="desLblA">{%label.wifiSwitchAll2g%}</label>
					<input id="wifiSwitchOnAll2g" name="wifiSwitchAll2g" class="switchRadio" type="radio" /><label class="noteLbl" for="wifiSwitchOnAll2g">{%label.openStr%}</label>
					<input id="wifiSwitchOffAll2g" name="wifiSwitchAll2g" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wifiSwitchOffAll2g">{%label.closeStr%}</label>
				</ul>
				<ul class="gridLine gridLineA">
					<label class="desLblA">{%label.wifiSwitchAll5g%}</label>
					<input id="wifiSwitchOnAll5g" name="wifiSwitchAll5g" class="switchRadio" type="radio" /><label class="noteLbl" for="wifiSwitchOnAll5g">{%label.openStr%}</label>
					<input id="wifiSwitchOffAll5g" name="wifiSwitchAll5g" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wifiSwitchOffAll5g">{%label.closeStr%}</label>
				</ul>
			</div>
            <div class="blockFuncA">
                <input id="saveAll" type="button" value="{%btn.save%}" class="btnA subBtn" />
            </div>
        </div>
    </div>
    <div class="title">
        <label class="title">{%label.wifiSet%}</label>
        <i class="helpBtn" helpStr="wlanNetworkBasic"></i>
    </div>
    <div class="block">
        <ul class="gridLine gridLineA">
            <label class="desLblA desLblWU">{%label.wifiUnite%}</label>
            <input id="wifiUniteOn" name="wifiUnite" class="switchRadio" type="radio" /><label class="noteLbl" for="wifiUniteOn">{%label.openStr%}</label>
            <input id="wifiUniteOff" name="wifiUnite" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wifiUniteOff">{%label.closeStr%}</label>
        </ul>
        <p class="help_tip" id="bsTip">{%label.bsHelp%}</p>
        <ul class="gridLine gridLineA gridLineBS">
            <label class="desLblA">{%label.wlanEnabled%}</label>
            <input id="wifiSwitchOn" name="wifiSwitch" class="switchRadio" type="radio" /><label class="noteLbl" for="wifiSwitchOn">{%label.openStr%}</label>
            <input id="wifiSwitchOff" name="wifiSwitch" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wifiSwitchOff">{%label.closeStr%}</label>
        </ul>
        <ul class="gridLine gridLineA gridLineA2">
            <label class="desLblA" for="ssid">{%label.wirelessName%}</label>
            <li class="textConA textCon"><input id="ssid" class="textA text hoverBd" maxLength="32" /><i class="tip"></i></li>
            <input id="ssidBrd" class="checkbox wlanBroadCase" type="checkbox" />
            <label class="noteLbl" for="ssidBrd">{%label.wirelessSsidBrd%}</label>
        </ul>
        <ul id="pwdLine" class="gridLine gridLineA">
            <label class="desLblA" for="wlanPwd">{%label.wirelessPwd%}</label>
            <li class="textConA textCon"><input id="wlanPwd" class="textA text hoverBd imeModeN" maxLength="63" /><i class="tip"></i></li>
            <li id="pwdDepNote2G" class="note">
                <i id="pwdDepI" class="warn"></i>
                <div class="noteCon noteConRouteSet">
                    <p class="pwdDepC twoLine">{%label.chgPwdDep%}{%label.colon%}<label id="pwdDep2G">{%label.weak%}</label></p>
                    <div class="pwdDepL"><label id="chgPwdDep2G"></label></div>
                </div>
            </li>
        </ul>
		<div id="authDiv" class="disNone">
			<ul class="gridLine gridLineA">
				<label class="desLblA" for="auth">{%label.wirelessAuth%}</label>
				<li class="textConA textCon">
				<span id="auth" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
                </li>
			</ul>
			<ul class="gridLine gridLineA gridLineTips" id="authTips">
				<span>
					<div class="warnCon">
						<img src="../web-static/images/routerBg.png" />
					</div>
					{%label.authCompatibilityTips%}
				</span>
			</ul>
        </div>
        <div id="cipherDiv" class="disNone">
            <ul class="gridLine gridLineA">
                <label class="desLblA" for="cipher">{%label.wirelessCipher%}</label>
                <li class="textConA textCon">
				<span id="cipher" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
                </li>
            </ul>
        </div>
        <div class="blockFuncA">
            <input id="saveBasic" type="button" value="{%btn.save%}" class="btnA subBtn" />
        </div>
    </div>
    <div class="title">
        <label class="title">{%label.wifiAdvanceSet2G%}</label>
        <i class="helpBtn" id="wlanHelp"></i>
    </div>
    <div class="block">
        <ul class="gridLine gridLineA">
            <label class="desLblA" for="wirelessChannel">{%label.wirelessChannel%}</label>
            <li class="textConA textCon">
				<span id="channel" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
            </li>
        </ul>
        <ul class="gridLine gridLineA">
            <label class="desLblA" for="wirelessMode">{%label.wirelessMode%}</label>
            <li class="textConA textCon">
				<span id="wlanMode" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
            </li>
        </ul>
		<ul class="gridLine gridLineA gridLineTips" id="wlanModeAxTips2G">
			<span>
				<div class="warnCon">
					<img src="../web-static/images/routerBg.png" />
				</div>
				{%label.wifi802AxSelectedTips%}
			</span>
		</ul>
        <ul class="gridLine gridLineA">
            <label class="desLblA" for="wirelessWide">{%label.wirelessWidth%}</label>
            <li class="textConA textCon">
				<span id="wlanWidth" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
            </li>
        </ul>
		<div id="TWTSel">
		  <ul class="gridLine gridLineA gridLineB2">
			  <label class="desLblA">{%label.wirelessTWT%}</label>
			  <input id="TWTSwitchOn" name="TWTSwitch" class="switchRadio" type="radio">
		  	<label class="noteLbl" for="TWTSwitchOn">{%label.openStr%}</label>
			  <input id="TWTSwitchOff" name="TWTSwitch" class="switchRadio switchRadioR" type="radio">
			  <label class="noteLbl" for="TWTSwitchOff">{%label.closeStr%}</label>
		  </ul>
		  <div id="TWTCompatibilityTip2g" class="display">
			  <li id="compatibilityNote2g" class="note">
				  <i id="compatibilityLogo2g" class="warn"></i>
				  <span id="compatibilityText2g" class="warnText">{%label.TWTCompatibilityTip%}</span>
			  </li>
		  </div>
		</div>
		<ul class="gridLine gridLineA gridLineB2" id="MUMimoSel">
			<label class="desLblA">{%label.wirelessMUMimo%}</label>
			<input id="MUMimoSwitchOn" name="MUMimoSwitch" class="switchRadio" type="radio">
			<label class="noteLbl" for="MUMimoSwitchOn">{%label.openStr%}</label>
			<input id="MUMimoSwitchOff" name="MUMimoSwitch" class="switchRadio switchRadioR" type="radio">
			<label class="noteLbl" for="MUMimoSwitchOff">{%label.closeStr%}</label>
		</ul>
		<ul class="gridLine gridLineA gridLineB2" id="OFDMASel">
			<label class="desLblA">{%label.wirelessOFDMA%}</label>
			<input id="OFDMASwitchOn" name="OFDMASwitch" class="switchRadio" type="radio">
			<label class="noteLbl" for="OFDMASwitchOn">{%label.openStr%}</label>
			<input id="OFDMASwitchOff" name="OFDMASwitch" class="switchRadio switchRadioR" type="radio">
			<label class="noteLbl" for="OFDMASwitchOff">{%label.closeStr%}</label>
		</ul>
        <div class="blockFuncA">
            <input id="saveAdvanced2g" type="button" value="{%btn.save%}" class="btnA subBtn" />
        </div>
    </div>
    <div class="title">
        <label class="title">{%label.wifiAdvanceSet5G%}</label>
        <i class="helpBtn" id="wlanHelp5G"></i>
    </div>
    <div class="block">
        <ul class="gridLine gridLineA">
            <label class="desLblA">{%label.wirelessChannel%}</label>
            <li class="textConA textCon">
				<span id="channel5g" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
            </li>
		</ul>
		<ul class="gridLine gridLineA gridLineTips" id="channel5gTips">
			<span>
				<div class="warnCon">
					<img src="../web-static/images/routerBg.png" />
				</div>
				{%label.band2CompatibilityTips2%}
			</span>
		</ul>
        <ul class="gridLine gridLineA">
            <label class="desLblA">{%label.wirelessMode%}</label>
            <li class="textConA textCon">
				<span id="wlanMode5g" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
            </li>
        </ul>
		<ul class="gridLine gridLineA gridLineTips" id="wlanModeAxTips5G">
			<span>
				<div class="warnCon">
					<img src="../web-static/images/routerBg.png" />
				</div>
				{%label.wifi802AxSelectedTips%}
			</span>
		</ul>
        <ul class="gridLine gridLineA">
            <label class="desLblA">{%label.wirelessWidth%}</label>
            <li class="textConA textCon">
				<span id="wlanWidth5g" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
            </li>
        </ul>
        <!-- <ul id="muMimoCon" class="gridLine gridLineA disNone">
            <label class="desLblA">{%label.wirelessMUMimo%}</label>
            <li class="textConA textCon">
				<span id="wlanMuMimo5g" class="select">
					<span class="value hsValueA"></span>
					<i class="arrow"></i>
				</span>
            </li>
        </ul>-->
		<div id="TWTSel5g">
		  <ul class="gridLine gridLineA gridLineB2">
			  <label class="desLblA">{%label.wirelessTWT%}</label>
			  <input id="TWTSwitchOn5g" name="TWTSwitch5g" class="switchRadio" type="radio">
			  <label class="noteLbl" for="TWTSwitchOn5g">{%label.openStr%}</label>
			  <input id="TWTSwitchOff5g" name="TWTSwitch5g" class="switchRadio switchRadioR" type="radio">
			  <label class="noteLbl" for="TWTSwitchOff5g">{%label.closeStr%}</label>
		  </ul>
		  <div id="TWTCompatibilityTip5g" class="display">
			  <li id="compatibilityNote5g" class="note">
				  <i id="compatibilityLogo5g" class="warn"></i>
				  <span id="compatibilityText5g" class="warnText">{%label.TWTCompatibilityTip%}</span>
			  </li>
		  </div>
		</div>
		<ul class="gridLine gridLineA gridLineB2" id="MUMimoSel5g">
			<label class="desLblA">{%label.wirelessMUMimo%}</label>
			<input id="MUMimoSwitchOn5g" name="MUMimoSwitch5g" class="switchRadio" type="radio">
			<label class="noteLbl" for="MUMimoSwitchOn5g">{%label.openStr%}</label>
			<input id="MUMimoSwitchOff5g" name="MUMimoSwitch5g" class="switchRadio switchRadioR" type="radio">
			<label class="noteLbl" for="MUMimoSwitchOff5g">{%label.closeStr%}</label>
		</ul>
		<ul class="gridLine gridLineA gridLineB2" id="OFDMASel5g">
			<label class="desLblA">{%label.wirelessOFDMA%}</label>
			<input id="OFDMASwitchOn5g" name="OFDMASwitch5g" class="switchRadio" type="radio">
			<label class="noteLbl" for="OFDMASwitchOn5g">{%label.openStr%}</label>
			<input id="OFDMASwitchOff5g" name="OFDMASwitch5g" class="switchRadio switchRadioR" type="radio">
			<label class="noteLbl" for="OFDMASwitchOff5g">{%label.closeStr%}</label>
		</ul>
        <div class="blockFuncA">
            <input id="saveAdvanced5g" type="button" value="{%btn.save%}" class="btnA subBtn" />
        </div>
    </div>
	<div id="multiSSIDDiv" class="disNone">
		<div class="title">
			<label class="title">{%label.multiSSID%}</label>
			<i class="helpBtn" helpstr="multiSSIDHelp"></i>
		</div>
		<div class="block">
			<table id="SSIDTable" class="dataGrid"></table>
		</div>
	</div>
	<div id="wpsDiv" class="disNone">
		<div class="title" style="margin: 30px 0 0 0">
			<label class="title">{%label.wpsSet%}</label>
			<i class="helpBtn" helpstr="wpsHelp"></i>
		</div>
		<div class="block">
			<ul class="gridLine gridLineA">
				<label class="desLblA desLblWU">{%label.wpsRouterPinCode%}</label>
				<input id="wpsRouterPinOn" name="wpsRouterPin" class="switchRadio" type="radio" /><label class="noteLbl" for="wpsRouterPinOn">{%label.openStr%}</label>
				<input id="wpsRouterPinOff" name="wpsRouterPin" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wpsRouterPinOff">{%label.closeStr%}</label>
			</ul>
			<ul style="display: block;" class="gridLine gridLineA" id="wpsRouterPinCodeUl">
				<input id="genVendorPin" type="button" class="btnA subBtn" value="{%label.wpsGenPinCode%}" style="margin-left:205px; margin-right:20px">
				<li  style="width:90px" class="textConA textCon">
					<input id="wpsRouterPinCode" style="width:90px" class="textA text hoverBd" maxlength="8">
					<i class="tip"></i>
				</li>
			</ul>
			<div class="blockFuncA">
				<input id="saveWpsRouterPin" type="button" value="{%btn.save%}" class="btnA subBtn" />
			</div>
			<ul class="gridLine gridLineA">
				<label class="desLblA desLblWU">{%label.wpsMethod%}</label>
				<input id="wpsMethodButton" name="wpsMethod" class="switchRadio" type="radio" /><label class="noteLbl" for="wpsMethodButton">{%label.wpsMethodButton%}</label>
				<input id="wpsMethodPin" name="wpsMethod" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wpsMethodPin">{%label.wpsMethodPin%}</label>
			</ul>
			<ul id="wpsMethodPinUl" class="gridLine gridLineA">
				<label class="desLblA" for="wpsTerminalPinCode">{%label.wpsMethodPinNote%}</label>
				<li class="textConA textCon">
					<input id="wpsTerminalPinCode" class="textA text hoverBd" maxLength="8" />
					<i class="tip"></i>
				</li>
			</ul>
			<div class="blockFuncA">
				<input id="wpsConnect" type="button" value="{%btn.connect%}" class="btnA subBtn" />
			</div>
		</div>
	</div>
</div>
