<script type="text/javascript">
	var wdsTargetIndex = [];
	var scanRetryCounts = 1;

	function wdsTimeoutHandle()
	{
		closeLoading();
		function connectFailComfirm() {
			showConfirm("连接失败，请确定是否重试？", function(choose) {
				if (true == choose) {
					wdsNextStep();
				}
				else {
					clearTimeout(getWdsStatusHd);
					wdsCanceldHandle();
				}
			});
		}
		if (gWifiSwitchSupport || gCustomWifiSwitchSupport){
			checkWifiSwitchOff(connectFailComfirm)
		} else {
			connectFailComfirm();
		}
	}

	function wdsNextStep()
	{
		function makeSendData()
		{
			var data = {"wireless":{}};
            if (BAND_2 == gBandNum) {
                data = {"wireless":{"wlan_wds_2g":{"enable":"0","ssid":""},"wlan_wds_5g":{"enable":"0","ssid":""}}};
            } else {
                data = {"wireless":{"wlan_wds_2g":{"enable":"0","ssid":""},"wlan_wds_5g_1":{"enable":"0","ssid":""},"wlan_wds_5g_4":{"enable":"0","ssid":""}}};
            }

            for (var freq in wdsTargetSelFreq) {
                if (wdsTargetSelFreq[freq].selected) {
                    var secCfg = {};
                    secCfg.enable = "1";
                    secCfg.ssid = gRootAPInfo[freq].ssid;
                    secCfg.encryption = gRootAPInfo[freq].encryption;
                    if (gRootAPInfo[freq].encryption != "0") {
                        secCfg.key = gRootAPInfo[freq].key;
                    }
                    data.wireless[gWDSModel[freq].set_wds] = secCfg;
                    gRootAPInfo[freq].enable = "1";
                }
            }

			return data;
		}

		var data = makeSendData();

		showLoading(label.WDSConnecting, function() {
			wdsCanceldHandle();
		});

		$.modify(data, function(ret) {
			var code = ret[ERR_CODE];
			if (ENONE == code) {
				var bLinkStatusHd = null;
                var wdsStartArg = {"wireless":{}};
                for (var freq in wdsTargetSelFreq) {
                    if (wdsTargetSelFreq[freq].selected) {
                        wdsStartArg.wireless[gWDSModel[freq].wds_start] = {"set_ip_immediate":"0"};
                    }
                }

				$.action(wdsStartArg);

				if (true == bWirelessLinked) {
					var bShowLoading = false;
					var linkDetectCount = 1;

					function bLinkStatusDetect()
					{
						//查询3次，无线还没重连上，则提示重连无线
						if (linkDetectCount > 3 && bShowLoading == false) {
							var pwdStr = "";
							var showStr = "您的设备与路由器的连接已断开，请重新进行无线连接...<br />";

							if (gLocalAPInfo[curEqtFreq].encryption == "1") {
								pwdStr = "  无线密码：" + gLocalAPInfo[curEqtFreq].key;
							}

							showStr += "无线名称：" + gLocalAPInfo[curEqtFreq].ssid + pwdStr;
							bShowLoading = true;

							closeLoading();
							showLoading(showStr, undefined, undefined, false);
						}

						$.detect(function() {
							if (false == $.result.timeout) {
								clearTimeout(bLinkStatusHd);
								closeLoading();
								showLoading(label.WDSConnecting);

								connectingCount = 1;
								getWdsStatusHd = $.setTimeout(wdsStatusHd, 100);
							}
						});

						linkDetectCount++;
						bLinkStatusHd = $.setTimeout(bLinkStatusDetect, 2000);
					}

					clearTimeout(bLinkStatusHd);
					bLinkStatusHd = $.setTimeout(bLinkStatusDetect, 4000);
				}
				else {
					connectingCount = 1;
					$.setTimeout(wdsStatusHd, 5000);
				}
			}
			else {
				errHandle(code);
			}
		});
	}

	function inputPwdNext(validPwdItem) {
		for (var i = 0; i < validPwdItem.length; ++i) {
			var wlanPwd = $("#" + validPwdItem[i]).val();
			var errNo;
			if (getCNStrLen(wlanPwd) == 0) {
				errNo = EWLANPWDBLANK;
			} else {
				errNo = checkWlanPwd(wlanPwd);
			}

			if (ENONE != errNo) {
				$("#" + validPwdItem[i] + "Err").removeClass("disNone");
				switch (errNo) {
					case EWLANPWDBLANK:
						$("#" + validPwdItem[i] + "Err" + " span").text(errStr.wlanPwdNull);
						break
					case EINVWLANPWD:
						$("#" + validPwdItem[i] + "Err" + " span").text(errStr.wlanPwdInvalid);
						break;
					case EINVPSKLEN:
						$("#" + validPwdItem[i] + "Err" + " span").text(errStr.wlanPwdLenValid);
						break;
				}
				return;
			}
			$("#" + validPwdItem[i] + "Err").addClass("disNone");

			var freq = validPwdItem[i].replace(/[^0-9]/ig,"");
			if (freq == FREQ_BS) {
				if (BAND_2 == gBandNum) {
					gRootAPInfo[FREQ_2G].key = wlanPwd;
					gRootAPInfo[FREQ_2G].pwdErr = false;
					gRootAPInfo[FREQ_2G].encryption = uciWireless.dynOptValue.encryption.on;
					gRootAPInfo[FREQ_5G].key = wlanPwd;
					gRootAPInfo[FREQ_5G].pwdErr = false;
					gRootAPInfo[FREQ_5G].encryption = uciWireless.dynOptValue.encryption.on;
				} else {
					gRootAPInfo[FREQ_2G].key = wlanPwd;
					gRootAPInfo[FREQ_2G].pwdErr = false;
					gRootAPInfo[FREQ_2G].encryption = uciWireless.dynOptValue.encryption.on;
					gRootAPInfo[FREQ_5G1].key = wlanPwd;
					gRootAPInfo[FREQ_5G1].pwdErr = false;
					gRootAPInfo[FREQ_5G1].encryption = uciWireless.dynOptValue.encryption.on;
					gRootAPInfo[FREQ_5G4].key = wlanPwd;
					gRootAPInfo[FREQ_5G4].pwdErr = false;
					gRootAPInfo[FREQ_5G4].encryption = uciWireless.dynOptValue.encryption.on;
				}
			} else {
				gRootAPInfo[freq].key = wlanPwd;
				gRootAPInfo[freq].pwdErr = false;
				gRootAPInfo[freq].encryption = uciWireless.dynOptValue.encryption.on;
			}
		}

		wdsNextStep();
	}

	function generatePwdConHTML() {
		return '<div id="pwdInputCon">' +
			'<p class="WDSTitle">请输入前端路由的无线密码</p>' +
			'<div id="root0Con" class="disNone">' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>2.4G频段</label>' +
						'<label id="root0Ssid" class="noteLblWDS"></label>' +
					'</li>' +
				'</ul>' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>无线密码</label>' +
						'<label id="root0PwdLbl" class="noteLblWDS disNone">未加密</label>' +
						'<input id="root0PwdInput" maxLength="63" class="disNone"/>' +
					'</li>' +
					'<li class="errLi disNone" id="root0PwdInputErr">' +
						'<div class="warnCon">' +
							'<img src="../web-static/images/routerBg.png" />' +
						'</div>' +
						'<span class="errMsg"></span>' +
					'</li>' +
				'</ul>' +
			'</div>' +
			'<div id="root1Con" class="disNone">' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>5G频段</label>' +
						'<label id="root1Ssid" class="noteLblWDS"></label>' +
					'</li>' +
				'</ul>' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>无线密码</label>' +
						'<label id="root1PwdLbl" class="noteLblWDS disNone">未加密</label>' +
						'<input id="root1PwdInput" maxLength="63" class="disNone"/>' +
					'</li>' +
					'<li class="errLi disNone" id="root1PwdInputErr">' +
						'<div class="warnCon">' +
							'<img src="../web-static/images/routerBg.png" />' +
						'</div>' +
						'<span class="errMsg"></span>' +
					'</li>' +
				'</ul>' +
			'</div>' +
			'<div id="root2Con" class="disNone">' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>5G1频段</label>' +
						'<label id="root2Ssid" class="noteLblWDS"></label>' +
					'</li>' +
				'</ul>' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>无线密码</label>' +
						'<label id="root2PwdLbl" class="noteLblWDS disNone">未加密</label>' +
						'<input id="root2PwdInput" maxLength="63" class="disNone"/>' +
					'</li>' +
					'<li class="errLi disNone" id="root2PwdInputErr">' +
						'<div class="warnCon">' +
							'<img src="../web-static/images/routerBg.png" />' +
						'</div>' +
						'<span class="errMsg"></span>' +
					'</li>' +
				'</ul>' +
			'</div>' +
			'<div id="root3Con" class="disNone">' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>5G2频段</label>' +
						'<label id="root3Ssid" class="noteLblWDS"></label>' +
					'</li>' +
				'</ul>' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>无线密码</label>' +
						'<label id="root3PwdLbl" class="noteLblWDS disNone">未加密</label>' +
						'<input id="root3PwdInput" maxLength="63" class="disNone"/>' +
					'</li>' +
					'<li class="errLi disNone" id="root3PwdInputErr">' +
						'<div class="warnCon">' +
							'<img src="../web-static/images/routerBg.png" />' +
						'</div>' +
						'<span class="errMsg"></span>' +
					'</li>' +
				'</ul>' +
			'</div>' +
			'<div id="root4Con" class="disNone">' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>无线名称</label>' +
						'<label id="root4Ssid" class="noteLblWDS"></label>' +
					'</li>' +
				'</ul>' +
				'<ul class="inputUl">' +
					'<li class="inputLi">' +
						'<label>无线密码</label>' +
						'<label id="root4PwdLbl" class="noteLblWDS disNone">未加密</label>' +
						'<input id="root4PwdInput" maxLength="63" class="disNone"/>' +
					'</li>' +
					'<li class="errLi disNone" id="root4PwdInputErr">' +
						'<div class="warnCon">' +
							'<img src="../web-static/images/routerBg.png" />' +
						'</div>' +
						'<span class="errMsg"></span>' +
					'</li>' +
				'</ul>' +
			'</div>' +
			'<ul>' +
				'<li class="wzdSubLi">' +
					'<input id="pwdInputPre" type="button" class="btnL" value="{%btn.preStep%}" />' +
					'<input id="pwdInputNext" type="button" value="{%btn.nextStep%}" />' +
				'</li>' +
			'</ul>' +
		'</div>';
	}

	function showInputPwdCon(showPwdErr) {
		$("#pwdInputCon").remove();
		$("#WDSTblCon").addClass("disNone");
		$("#WDSTblCon").after(generatePwdConHTML());

		var validPwdItem = [];
		for (var curFreq in wdsTargetSelFreq) {
			if (wdsTargetSelFreq[curFreq].selected) {
				var freqId = curFreq;
				if (wdsTargetSelFreq[curFreq].bs) {
					freqId = FREQ_BS;
				}
				$("#root" + freqId + "Con").removeClass("disNone");
				$("#root" + freqId + "Ssid").text(gRootAPInfo[curFreq].ssid);
				if (gRootAPInfo[curFreq].encryption == "0") {
					$("#root" + freqId + "PwdLbl").removeClass("disNone");
				} else {
					$("#root" + freqId + "PwdInput").removeClass("disNone");
					validPwdItem.push("root" + freqId + "PwdInput");
					//密码错误
					if (showPwdErr) {
						$("#root" + freqId + "PwdInput").val(gRootAPInfo[curFreq].key);
						if (gRootAPInfo[curFreq].pwdErr) {
							$("#root" + freqId + "PwdInputErr").removeClass("disNone");
							$("#root" + freqId + "PwdInputErr span").text("请输入正确的无线密码");
						}
					}
				}
				//rootAP 多频合一，只显示其中一个频段的信息即可
				if (wdsTargetSelFreq[curFreq].bs) {
					break;
				}
			}
		}

		$("#pwdInputNext").click(function() {
			inputPwdNext(validPwdItem);
		});
		$("#pwdInputPre").click(function() {
			$("#pwdInputCon").remove();
			$("#WDSTblCon").removeClass("disNone");
		});
	}

	function init()
	{
		var MAX_AP_ENTRY, LOAD = 64;
		var getScanResultHd = null;
		var scanList = [];
		var wdsGrid = new DataGrid();
		var selectedFreq = {};


		/* 需要扫描的无线频段列表 */
		var scanWiFiList = [];
		scanWiFiList[FREQ_2G ] = false;
		scanWiFiList[FREQ_5G ] = false;
		scanWiFiList[FREQ_5G1] = false;
		scanWiFiList[FREQ_5G4] = false;

		selectedFreq[FREQ_2G] = false;
		selectedFreq[FREQ_5G] = false;
		selectedFreq[FREQ_5G1] = false;
		selectedFreq[FREQ_5G4] = false;

		switch(gBandNum)
		{
		case BAND_3:
			MAX_AP_ENTRY = LOAD*3;
			break;
		case BAND_2:
			MAX_AP_ENTRY = LOAD*2;
			break;
		case BAND_1:
		default:
			MAX_AP_ENTRY = LOAD;
			break;
		}

		function signalLevel(rssi)
		{
			if (rssi >= 20) {
				if (rssi >= 30) {
					if (rssi >= 50) {
						return 5;		/* rssi∈[50, 100) */
					}
					else {
						return 4;		/* rssi∈[30, 50) */
					}
				}
				else {
					return 3;			/* rssi∈[20, 30) */
				}
			}
			else {
				if (rssi >= 10) {
					return 2;			/* rssi∈[10, 20) */
				}
				else {
					return 1;			/* rssi∈[0, 10) */
				}
			}
		}

		function fmtApList(apList, freq)
		{
			var len = apList.length;
			var prefix = "ap_";
			var ftmList = [];

			for(var i = 0; i < len; i++)
			{
				var idx = i + 1;

				ftmList[i] = {};
				ftmList[i]["freq"] = freq;
				ftmList[i]["freqArr"] = [freq];
				ftmList[i]["freqInfo"] = gFreqInfo[freq];
				ftmList[i]["ssid"] = apList[i][prefix + idx]["ssid"];
				ftmList[i]["encryption"] = apList[i][prefix + idx]["encryption"];
				ftmList[i]["rssi"] = apList[i][prefix + idx]["rssi"];
				ftmList[i]["signal"] = signalLevel(apList[i][prefix + idx]["rssi"]);

				var authModeStr;
				switch (parseInt(apList[i][prefix + idx]["encryption"]))
				{
				case uciWireless.encryptionType.none:
					authModeStr = label.wirelessNoSecurity;
					break;
				case uciWireless.encryptionType.psk2_psk:
					authModeStr = label.wirelessPsk;
					break;
				case uciWireless.encryptionType.wep:
					authModeStr = label.wirelessWep;
					break;
				case uciWireless.encryptionType.wpa2_wpa:
					authModeStr = label.wirelessWpa;
					break;
				case uciWireless.encryptionType.psk2_sae3:
					authModeStr = label.wirelessWpa2PskWpa3Sae;
					break;
				case uciWireless.encryptionType.sae3:
					authModeStr = label.wirelessWpa3Sae;
					break;
				case uciWireless.encryptionType.wpa3:
					authModeStr = label.wirelessWpa3Enterprise;
					break;
				default:
					authModeStr = label.wirelessUnknow;
					break;
				}

				ftmList[i]["authMode"] = authModeStr;
			}

			return ftmList;
		}

		/* 格式化扫描到的Root AP列表 */
		function getScanApList(data)
		{
			var apList = [], name; tmpApList = {};
			for (var freq in scanWiFiList)
			{
				if (scanWiFiList[freq])
				{
					name = gWDSModel[freq].wlan_scan;
					tmpApList[freq] = fmtApList(data.wireless[name], freq);

					for (var i = 0; i < tmpApList[freq].length; ++i) {
						var found = false;
						for (var j = 0; j < apList.length; ++j) {
							//SSID相同且加密方式相同的合并
							if (apList[j].ssid == tmpApList[freq][i].ssid &&
								apList[j].encryption == tmpApList[freq][i].encryption) {
								found = true;
								apList[j].rssi = Math.max(apList[j].rssi, tmpApList[freq][i].rssi);
								apList[j].signal = Math.max(apList[j].signal, tmpApList[freq][i].signal);
								// 解决出现 2.4G & 5G & 5G，这种情况
								if ($.inArray(tmpApList[freq][i].freq, apList[j].freqArr)  == -1) {
									apList[j].freqArr.push(tmpApList[freq][i].freq);
									apList[j].freqInfo = apList[j].freqInfo + ' & ' + tmpApList[freq][i].freqInfo;
									apList[j].freq = FREQ_BS;
								}
								break;
							}
						}
						if (!found) {
							apList.push(tmpApList[freq][i]);
						}
					}
				}
			}

			return apList;
		}

		function wdsTargetSelHandler(index, params)
		{
			closeAlertC();
			var freq = scanList[index].freq;
			var freqArr = scanList[index].freqArr;
			var checked = params.obj.className == 'checkboxBtn' ? true : false;
			if (checked) {
				var encryption = scanList[index].encryption;

				if (freq == FREQ_BS) {
					for (var i = 0; i < freqArr.length; i++) {
						selectedFreq[freqArr[i]] = true;
					}
				} else {
					selectedFreq[freq] = true;
				}

				if (encryption != uciWireless.encryptionType.none && encryption != uciWireless.encryptionType.psk2_psk &&
					encryption != uciWireless.encryptionType.psk2_sae3 && encryption != uciWireless.encryptionType.sae3 &&
					encryption != uciWireless.encryptionType.wpa3)
				{
					showAlert("所选的路由器加密方式过旧，请将该路由器的加密方式更改为WPA/WPA2-PSK AES或WPA2-PSK/WPA3-SAE后重新连接。");
					params.obj.className = "checkboxBtnUn";	/* 取消选择 */
					return;
				}

				for (var i = 0; i < scanList.length; i++) {
					//已勾选的跳过
					if (i == index || $("#WDSTbl input")[scanList.length - 1 - i].className == 'checkboxBtn') continue;

					if (scanList[i].freq == FREQ_BS) {
						for (var j = 0; j < scanList[i].freqArr.length; j++) {
							if (selectedFreq[scanList[i].freqArr[j]]) {
								$("#WDSTbl input")[scanList.length - 1 - i].className = 'checkboxBtnDis';
								break;
							}
						}
					} else {
						if (selectedFreq[scanList[i].freq]) {
							$("#WDSTbl input")[scanList.length - 1 - i].className = 'checkboxBtnDis';
						}
					}
				}

				disableBtn("next", false);
				wdsTargetIndex.push(index);

				//勾选的项为合并项
				if (freq == FREQ_BS) {
					for (var i = 0; i < freqArr.length; ++i) {
						wdsTargetSelFreq[freqArr[i]] = {"selected": true, "bs": true};
						gRootAPInfo[freqArr[i]].ssid = scanList[index].ssid;
						gRootAPInfo[freqArr[i]].encryption = parseInt(encryption);
					}
				} else {
					wdsTargetSelFreq[freq] = {"selected": true, "bs": false};
					gRootAPInfo[freq].ssid = scanList[index].ssid;
					gRootAPInfo[freq].encryption = parseInt(encryption);
				}
			} else {
				if (freq == FREQ_BS) {
					for (var i = 0; i < freqArr.length; i++) {
						selectedFreq[freqArr[i]] = false;
					}
				} else {
					selectedFreq[freq] = false;
				}

				//取消勾选的项为合并项
				if (freq == FREQ_BS) {
					for (var i = 0; i < freqArr.length; ++i) {
						wdsTargetSelFreq[i] = {"selected": false, "bs": false};
					}
				} else {
					wdsTargetSelFreq[freq] = {"selected": false, "bs": false};
				}
				wdsTargetIndex.splice($.inArray(index, wdsTargetIndex),1);
				if (wdsTargetIndex.length == 0) {
					disableBtn("next", true);
					$("#WDSTbl input.checkboxBtnDis").attr("class", 'checkboxBtnUn');
				} else {
					//与勾选项频段相同的解禁
					for (var i = 0; i < scanList.length; i++) {
						if (scanList[i].freq == FREQ_BS) {
							var unSelect = true;
							for (var j = 0; j < scanList[i].freqArr.length; j++) {
								if (selectedFreq[scanList[i].freqArr[j]]) {
									unSelect = false;
									break;
								}
							}

							if (unSelect) {
								$("#WDSTbl input")[scanList.length - 1 - i].className = 'checkboxBtnUn';
							}
						} else {
							if (!selectedFreq[scanList[i].freq]) {
								$("#WDSTbl input")[scanList.length - 1 - i].className = 'checkboxBtnUn';
							}
						}
					}
				}            
			}
		}

		function wdsScanTableInit()
		{
			wdsGrid.init({
				id:"WDSTbl",
				data:scanList,
				classCol:{gridClassName:"dataGrid", ListSpanClassName:"ListSpan1"},
				head:[{field:label.select, width:40},
					  {field:label.wirelessNa, width:163},
					  {field:label.sigDep, width:63},
					  {field:"频段信息", width:100},
					  {field:label.secInfo, width:123}],
				list:[{className:"checkboxBtn", classNameUn:"checkboxBtnUn", classNameDis:"checkboxBtnDis",
				      type:"btn", subType:"checkbox", click:wdsTargetSelHandler},
					  {name:"ssid", maxSize:30},
					  {name:"signal", type:"signal"},
					  {name:"freqInfo", maxSize:24},
				      {name:"authMode", maxSize:64}
				     ],
				checkIndex:1,
				paging:{num:10, page:1},
				hasSelBox:false,
				max:MAX_AP_ENTRY,
				edit:false
			});
		}

		function wdsScanStop()
		{
			$("#WDSScanFail").css("display", "block");
			scanList = [];
			wdsGrid.setDataSource(scanList);
			wdsGrid.refresh(1);
		}

		function loadScanResult()
		{
			var arg = {"wireless":{"table": []}};
			for (var freq in scanWiFiList)
			{
				if (scanWiFiList[freq])
				{
					arg.wireless.table.push(gWDSModel[freq].wlan_scan);
				}
			}

			$.query(arg, function(data) {
				closeLoading();

				if(ENONE == data[ERR_CODE]) {
					scanList = getScanApList(data);
					scanList.sort(function(pre, next){
						var preRssi = parseInt(pre.rssi);
						var nextRssi = parseInt(next.rssi);
						if (preRssi > nextRssi) {
							return 1;
						}
						else if (preRssi == nextRssi) {
							return 0;
						}
						else {
							return -1;
						}
					});

					scanList = scanList.slice(-MAX_AP_ENTRY);
					if (0 == scanList.length) {
						$("#WDSScanFail").css("display", "block");
					}
					else {
						$("#WDSScanFail").css("display", "none");
					}
					disableBtn('next', true);
					wdsTargetIndex = [];
                	wdsTargetSelFreq = {};
				}
				else {
					scanList = [];
					scanList.length = 0;
					$("#WDSScanFail").css("display", "block");
					errHandle(data[ERR_CODE]);
				}

				wdsGrid.setDataSource(scanList);
				wdsGrid.refresh(1);
			});
		}

		function getScanResult()
		{
			if (scanRetryCounts >= 6) {
				loadScanResult();
				return;
			}

			var arg = {"wireless":{"name": []}};
			for (var freq in scanWiFiList)
			{
				if (scanWiFiList[freq])
				{
					arg.wireless.name.push(gWDSModel[freq].wlan_scan_status);
				}
			}

			$.query(arg, function(ret) {
				var bFinsh = true;
				var SCAN_FINSH = 1;
				for (var name in ret.wireless)
				{
					if (SCAN_FINSH != ret.wireless[name].status)
					{
						bFinsh = false;
					}
				}

				if (true == bFinsh) {
					loadScanResult();
				}
				else {
					scanRetryCounts++;
					getScanResultHd = $.setTimeout(getScanResult, 2000);
				}
			});
		}

		function refreshScanList()
		{
			selectedFreq[FREQ_2G] = false;
			selectedFreq[FREQ_5G] = false;
			selectedFreq[FREQ_5G1] = false;
			selectedFreq[FREQ_5G4] = false;
			showLoading(statusStr.wifiScaning, function() {
				clearTimeout(getScanResultHd);
				wdsScanStop();
			});

			for (var freq in scanWiFiList)
			{
				if (scanWiFiList[freq])
				{
					/* 发送开始扫描动作 */
					$.action(gWDSModel[freq].scan_start);
				}
			}

			scanRetryCounts = 1;
			getScanResultHd = $.setTimeout(getScanResult, 3000);
		}

		function preStep()
		{
			gIsWifiCfgChged   = false;
			gIsWifiCfg2GChged = false;
			gIsWifiCfg5GChged = false;
			gIsWifiCfg5G4Chged= false;
			gIsWifiCfgBsChged = false;
			loadPage("WizardNetwork.htm", "wizardCon");
		}

		function nextStep()
		{
			if (wdsTargetIndex.length == 0) {
				showAlert(errStr.WDSNOHostErr);
			}
			else {
				var bNeedPwd = false;
				for (var freq in wdsTargetSelFreq) {
					if (wdsTargetSelFreq[freq].selected && gRootAPInfo[freq].encryption != '0') {
						bNeedPwd = true;
						break;
					}
				}
				if (bNeedPwd) {
					showInputPwdCon(false);
				} else {
					wdsNextStep();
				}
			}
		}

		function preNextStep() {
			if (gWifiSwitchSupport || gCustomWifiSwitchSupport){
				checkWifiSwitchOff(nextStep);
			} else {
				nextStep();
			}
		}

		// 初始化需要扫描的频段列表
		if (gSupportBS && "1" == gLocalAPInfo[FREQ_BS].bs_enable)
		{
			if ("1" == gLocalAPInfo[FREQ_BS].wifi_enable)
			{
				for (var freq in gKeyNames[gBandNum].wlan_wds)
				{
					if (null != gKeyNames[gBandNum].wlan_wds[freq])
					{
						scanWiFiList[freq] = true;
					}
				}
			}
		}
		else
		{
			for (var freq in gLocalAPInfo)
			{
				if (FREQ_BS != freq)
				{
					scanWiFiList[freq] = ("1" == gLocalAPInfo[freq].enable);
				}
			}
		}

		$("#pre").click(preStep);
		$("#next").click(preNextStep);
		$("#wdsRefreshBtn").click(refreshScanList);
		disableBtn("next", true);

		$('#WDSCon').css({'visibility':'visible'});

		wdsScanTableInit();
		refreshScanList();
	}
	init();
</script>
<style type="text/css">
    #WDSTblCon {
        padding: 0 120px;
    }
	#WDSTbl{
		margin-top:25px !important;
	}
	#WDSCon{
		visibility:hidden;
	}
	#WDSScanFail{
		line-height:30px;
		color:#FFFFFF;
		background-color: transparent;
		border-width:0px 1px 1px 1px;
		border-style:solid;
		border-color:#1E96D4;
		text-align:center;
		display:none;
	}
	#wdsRefreshBtn{
		float:right;
	}
    table.dataGrid td {
        font-size: 14px;
		height: 34px;
    }
    table.dataGrid tr {
        background: transparent;
        border-bottom: 1px solid #248AB3;
    }
	div.pageListPo{
		margin-bottom:0 !important;
	}
    div.pageListPo span.listSpanS{
        color: #FFFFFF;
    }
    div.pageListPo span.ListSpan1{
        color: #248AB3;
    }
	i.signalCon{
		width:23px;
		height:13px;
		display:inline-block;
		text-align:left;
		vertical-align:middle;
		background:url(../web-static/images/wdsWizardNoneSignal.png) no-repeat;
		position: relative;
	}
	i.signalCon i.signal{
		height:100%;
		display:inline-block;
		background:url(../web-static/images/wdsWizardSignal.png) no-repeat;
		position: absolute;
	}
	input.checkboxBtn{
		height:13px;
		width:13px;
		border:0px;
		font-size:0px;
		cursor:pointer;
		outline:none;
		vertical-align:middle;
        background:url(../web-static/images/WhiteCheckboxChecked.png) no-repeat;
	}
	input.checkboxBtnUn{
		height:13px;
		width:13px;
		border:0px;
		font-size:0px;
		cursor:pointer;
		outline:none;
		vertical-align:middle;
        background:url(../web-static/images/WhiteCheckboxUncheck.png) no-repeat;
	}
    input.checkboxBtnDis{
        height:11px;
		width:11px;
		border:0px;
		font-size:0px;
		cursor:pointer;
		outline:none;
		vertical-align:middle;
        background:url(../web-static/images/WhiteCheckboxDisabled.png) no-repeat;
    }
</style>
<div class="blockTable">
	<div id="WDSTblCon">
		<div>
			<p class="WDSTitle" style="margin-bottom: 0;">
				<span>请选择想要中继的前端由器</span>
				<input id="wdsRefreshBtn" value="刷新" type="button" class="btnA subBtn" />
			</p>
			<table id="WDSTbl" class="dataGrid"></table>
			<p id="WDSScanFail">扫描不到无线路由器，重试请点击右上角的刷新按钮。</p>
		</div>
		<ul>
			<li class="wzdSubLi">
				<input id="pre" type="button" class="btnL" value="{%btn.preStep%}" />
				<input id="next" type="button" value="{%btn.nextStep%}" />
			</li>
		</ul>
	</div>
</div>