<style type="text/css">
	li.macCloneLi{
		color:#FFFFFF;
		font-size:12px;
		line-height:20px !important;
	}
</style>
<div class="block">
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.netMode%}</label>
		<li class="textConA textCon">
			<span id="wanSel" class="select">
				<span class="value hsValueA"></span>
				<i class="arrow"></i>
			</span>
		</li>
	</ul>
	<ul class="gridLine gridLineA mpPhoneRgt10">
		<label class="desLblA">{%label.ipv6LanLocalAddr%}</label>
		<label id="bridge_lan_local_addr" class="noteLbl"></label>
	</ul>
	<div class="blockFuncA">
		<input id="save" type="button" value="{%btn.save%}" class="btnA subBtn" />
	</div>
</div>
<div class="title">
	<label class="title">{%label.highSet%}</label>
	<i class="helpBtn" helpStr="Bridgev6AdvHelp"></i>
</div>
<div class="block">
	<ul class="gridLine gridLineA">
		<label class="desLblA">{%label.wanMac%}</label>
		<li class="textConA textCon">
			<span id="wanMacSel" class="select">
				<span class="value hsValueA"></span>
				<i class="arrow"></i>
			</span>
		</li>
	</ul>
	<ul id="macCloneUl" class="gridLine gridLineA">
		<li class="textConAL textCon"><input id="wanMac" class="textA text hoverBd" maxLength="17" /><i class="tip"></i></li>
		<li class="textConAL macCloneLi"></li>
	</ul>
	<div class="blockFuncA">
		<input id="saveHighSet" type="button" value="{%btn.save%}" class="btnA subBtn" />
	</div>
</div>
<script type="text/javascript">
	function init()
	{
		var uciFile = "protocol";
		var uciWan = "wan";
		var uciWanType = uciProto.optName.type;
		var uciWanMac = uciProto.optName.macaddr;
		var currentProto;

		function errHandle(errNo)
		{
			var showStr = "";

			switch (errNo)
			{
			case ENONE:
				return false;
			default:
				showStr = errStr.invRequestFail;
				break;
			}

			showAlert(showStr);
			return true;
		}

		function onSave()
		{
			wanCheckWDS(function(){
				var cfg = {}, cfgProto = {}, cfgWan = {};
				cfg[uciFile] = cfgProto;
				cfgProto[WAN_NAME] = cfgWan;

				/* protocol.wan */
				cfgWan[uciWanType] = BRIDGE_NAME;

				if (currentProto != "bridgev6")
				{
					showConfirm(label.ipv6BridgeChgTip, function(result){
						if (result)
						{
							send();
						}
					});
				}
				else
				{
					send();
				}

				function send()
				{
					setLoadingId("save");
					hsLoading(true);

					$.modify(cfg, function(result){
						currentProto = "bridgev6";
						hsLoading(false);
						//刷新WAN口状态

						updateTimerHandle = $.setTimeout(refreshWanStatus, 0);
						return errHandle(result[ERR_CODE]);
					});
				}
			});
		}

		function saveHighSet()
		{
			wanCheckWDS(function(){
				var cfg = {}, cfgProto = {}, cfgWan = {};
				cfg[uciFile] = cfgProto;
				cfgProto[uciWan] = cfgWan;

				var wanMac = id("wanMac");
				var wanMacVal = wanMac.value;

				cfgWan[uciWanMac] = wanMacVal;

				setLoadingId("saveHighSet");
				hsLoading(true);

				$.modify(cfg, function(result){
					hsLoading(false);
					return errHandle(result[ERR_CODE]);
				});

				//刷新WAN口状态
				updateTimerHandle = $.setTimeout(refreshWanStatus, 2000);
			});
		}

		function setBridgeWanStatus(data){
			var wanStatus = data[uciNetwork.fileName][WAN_STATUS_NAME];

			if (wanStatus["proto"] != BRIDGE_NAME)
			{
				clearTimeout(updateTimerHandle);
				return;
			}

			id("bridge_lan_local_addr").innerHTML = localLanAddr;
		}

		refreshWanStatus = function(){
			var data = {};
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = WAN_STATUS_NAME;

			if (updateTimerHandle)
			{
				clearTimeout(updateTimerHandle);
			}

			$.query(data, function(data){
				setBridgeWanStatus(data);
				updateTimerHandle = $.setTimeout(refreshWanStatus, 2000);
			});
		}

		function getBridgeData()
		{
			var data = {};
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = [WAN_STATUS_NAME, uciNetwork.dynData.ifaceMac];
			data[uciProto.fileName] = {};
			data[uciProto.fileName][KEY_NAME] = uciProto.secName.wan;

			$.query(data, function(ALL_DATA){
				currentProto = ALL_DATA[uciNetwork.fileName][WAN_STATUS_NAME]["proto"];

				setMacInfo(ALL_DATA);
			});
		}

		selectInit("wanSel", wanOptions, LINK_TYPE_BRIDGE, wanSelectChange);
		if (curSysMode != uciSystem.optValue.sysMode.routerMode) {
			id("wanSel").disable(true);
			disableBtn("save", true);
			disableBtn("saveHighSet", true);
		}

		getBridgeData();
		refreshWanStatus();
		refreshLanStatus();

		id("save").onclick = onSave;
		id("saveHighSet").onclick = saveHighSet;
	}

	init();
</script>