<script type="text/javascript">
	function init()
	{
		var uciFile = uciWireless.fileName;
		var uciSecWifi2G = uciWireless.dynData.host_2g;
		var uciSecWifi5G = uciWireless.dynData.host_5g;
		var uciSecWifiBs = uciWireless.secName.wlanBS;
		var optSsid = uciWireless.dynOptName.ssid;
		var optEncrypt = uciWireless.dynOptName.encryption;
		var optKey = uciWireless.dynOptName.key;
		var optBsEnable = uciWireless.optName.bsEnable;

		var wzdWirelessName2G = id("wzdWirelessName2G");
		var wzdWirelessPwd2G = id("wzdWirelessPwd2G");

		var wzdWirelessName5G = id("wzdWirelessName5G");
		var wzdWirelessPwd5G = id("wzdWirelessPwd5G");

		var usePwd2G = id("samePwd");
		var clkNotEyt = false;	/* 已经点击过“不加密”选项 */
		var clkIgnoreSsid = false; /* 已经点击过“不修改”无线名称 */

		oriWifiCfg = {};
		oriWifiCfg5G = {};
		oriWifiCfgBs = {};
		gIsWifiDevice = false;	/* 是无线设备连接管理页面 */

		function wzdWirelessPwdConfirm()
		{
			var tipStr = label.confirmNoWirelessPwd;
			var onYesCbk = function(){wzdWirelessPwd2G.focus();};
			var onNoCbk = function(){
				clkNotEyt = true;
				confirmStepTwo();
			};

			showWzdConfirm(tipStr, onYesCbk, onNoCbk, btn.toPwd, btn.unPwd);
		}

		function wzdWirelessPwdConfirm5G()
		{
			var tipStr = label.confirmNoWirelessPwd;
			var onYesCbk = function(){wzdWirelessPwd5G.focus();};
			var onNoCbk = confirmStepFour;

			showWzdConfirm(tipStr, onYesCbk, onNoCbk, btn.toPwd, btn.unPwd);
		}

		function wzdWirelessSsidConfirm()
		{
			var tipStr = label.confirmSsidHasCnStr;
			var onYesCbk = function(){wzdWirelessName2G.select();};
			var onNoCbk = function(){
				clkIgnoreSsid = true;
				confirmStepOne();
			};

			showWzdConfirm(tipStr, onYesCbk, onNoCbk);
		}

		function wzdWirelessSsidConfirm5G()
		{
			var tipStr = label.confirmSsidHasCnStr;
			var onYesCbk = function(){wzdWirelessName5G.select();};
			var onNoCbk = confirmStepThree;

			showWzdConfirm(tipStr, onYesCbk, onNoCbk);
		}

		function showConfirmSameSSID()
		{
			var p, input, frame, body, funcDiv;

			frame = document.createElement("div");
			frame.className = "confirmCon";
			document.body.appendChild(frame);

			body = document.createElement("div");
			body.className = "confirmBody";
			frame.appendChild(body);

			p = document.createElement("p");
			p.className = "confirmTitle";
			p.innerHTML = label.confirmSameSsidTitle;
			body.appendChild(p);

			p = document.createElement("p");
			p.className = "confirmText";
			p.innerHTML = label.confirmSameSsidText;
			body.appendChild(p);

			funcDiv = document.createElement("div");
			funcDiv.className = "confirmFuncCon";
			body.appendChild(funcDiv);

			input = document.createElement("input");
			input.className = "subBtn subBtnL";
			input.value = btn.rewrite;
			input.type = "button";
			input.onclick = function(){
				hideCover(function(){wzdWirelessPwd2G.select();});
				document.body.removeChild(frame);
			};
			funcDiv.appendChild(input);

			input = document.createElement("input");
			input.className = "subBtn subBtnR";
			input.value = btn.ignore;
			input.type = "button";
			input.onclick = function(){
				hideCover(confirmStepEnd);
				document.body.removeChild(frame);
			};
			funcDiv.appendChild(input);
		}

		function checkSsidInput()
		{
			var wirelessName = this.value;
			var wzdAntNoteStr = "wzdAntNote2G";
			if (this.id == wzdWirelessName5G.id)
			{
				wzdAntNoteStr = "wzdAntNote5G";
			}

			closeNote(wzdAntNoteStr);

			/* 检查合法性 */
			if (0 == wirelessName.length)
			{
				showNote(wzdAntNoteStr, errStr.wlanSsidErr);
				return false;
			}

			if (/^ +$/gi.test(wirelessName) == true)
			{
				showNote(wzdAntNoteStr, errStr.wlanSsidBlank);
				return false;
			}

			/* 检查合法性 */
			if(!checkWifiName(wirelessName, 32, 1))
		    {
				showNote(wzdAntNoteStr, errStr.wlanSsidLenErr);
				return false;
		    }

			return true;
		}

		function pwdCheckMixChars(str)
		{
			var hasNum = false;
			var hasLetter = false;
			var hasSymbol = false;

			hasNum = /\d/g.test(str);
			hasLetter = /[a-zA-Z]/g.test(str);
			hasSymbol = /[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]/g.test(str);

			return (hasNum && hasSymbol && hasLetter);
		}

		function checkWlanPwdInput2G()
		{
			closeNote("wzdPwdNote2G");
			closeNote("pwdDepNote2G");

			var pwdVal = replaceUnicodeBlank(wzdWirelessPwd2G);

			//如果“同2.4G无线密码”勾选，同步更新5G无线密码
			if (usePwd2G.checked)
			{
				wzdWirelessPwd5G.value = pwdVal;
			}

			var errorNo = checkWlanPwd(pwdVal);
			if (EINVWLANPWD == errorNo)
			{
				showNote("wzdPwdNote2G", errStr.wlanWzdPwdValid);
				return false;
			}
			else if (EINVPSKLEN == errorNo)
			{
				showNote("wzdPwdNote2G", errStr.wlanWzdPwdLenValid);
				return false;
			}

			closeNote("wzdPwdNote2G");
			return true;
		}

		function checkWlanPwdInput5G()
		{
			closeNote("wzdPwdNote5G");
			closeNote("pwdDepNote5G");

			if (usePwd2G.checked)
			{
				wzdWirelessPwd5G.value = replaceUnicodeBlank(wzdWirelessPwd2G);
				return true;
			}
			else
			{
				var errorNo = checkWlanPwd(replaceUnicodeBlank(wzdWirelessPwd5G));
				if (EINVWLANPWD == errorNo)
				{
					showNote("wzdPwdNote5G", errStr.wlanWzdPwdValid);
					return false;
				}
				else if (EINVPSKLEN == errorNo)
				{
					showNote("wzdPwdNote5G", errStr.wlanWzdPwdLenValid);
					return false;
				}

				closeNote("wzdPwdNote5G");
				return true;
			}
		}

		function checkWlanPwdDep()
		{
			var pwdValue, pwdDepNoteId, wzdPwdNoteId, pwdDepId, chgPwdDepId, pwdDepI;

			if (this.id == wzdWirelessPwd2G.id)
			{
				pwdValue = replaceUnicodeBlank(wzdWirelessPwd2G);
				pwdDepNoteId = "pwdDepNote2G";
				wzdPwdNoteId = "wzdPwdNote2G";
				pwdDepId = "pwdDep2G";
				chgPwdDepId = "chgPwdDep2G";
				pwdDepI = "pwdDepI";

				//如果“同2.4G无线密码”勾选，同步更新5G无线密码
				if (usePwd2G.checked)
				{
					wzdWirelessPwd5G.value = pwdValue;
				}
			}
			else
			{
				pwdValue = replaceUnicodeBlank(wzdWirelessPwd5G);
				pwdDepNoteId = "pwdDepNote5G";
				wzdPwdNoteId = "wzdPwdNote5G";
				pwdDepId = "pwdDep5G";
				chgPwdDepId = "chgPwdDep5G";
				pwdDepI = "pwdDepI5G";
			}

			var width = 24, tip = "";
			var lgPwdlessTip = "none";
			var len = pwdValue.length;
			var lgPwdNoteVi = "visible";
			var iClass = "warn";
			var errorNo = checkWlanPwd(pwdValue);

			if (EINVWLANPWD == errorNo)
			{
				closeNote(pwdDepNoteId);
				id(wzdPwdNoteId).style.display = "inline-block";
				showNote(wzdPwdNoteId, errStr.wlanWzdPwdValid);
				return false;
			}
			else if (EINVPSKLEN == errorNo)
			{
				closeNote(pwdDepNoteId);
				id(wzdPwdNoteId).style.display = "inline-block";
				showNote(wzdPwdNoteId, errStr.wlanWzdPwdLenValid);
				return false;
			}

			if (len >= 0 && len < 8)
			{
				lgPwdNoteVi = "hidden";
				lgPwdlessTip = "inline-block";
			}
			else if (/^\d+$/.test(pwdValue) ||
					/^[\x21-\x2f\x3a-\x40\x5b-\x60\x7b-\x7e\s]+$/.test(pwdValue) ||
					/^[a-zA-Z]+$/.test(pwdValue))
			{
				if (len <= 12)
				{
					tip = label.weak;
					width = width;
				}
				else
				{
					tip = label.media;
					width = width*2;
				}
			}
			else if (true == pwdCheckMixChars(pwdValue))
			{
				tip = label.strong;
				iClass = "correct";
				width = width*3;
			}
			else
			{
				if (len <= 12)
				{
					tip = label.media;
					width = width*2;
				}
				else
				{
					tip = label.strong;
					iClass = "correct";
					width = width*3;
				}
			}

			id(pwdDepNoteId).style.visibility = lgPwdNoteVi;
			id(wzdPwdNoteId).style.display = lgPwdlessTip;
			id(pwdDepId).innerHTML = tip;
			id(chgPwdDepId).style.width = width + "px";
			id(pwdDepI).className = iClass;
		}

		function checkStrHasCN(str)
		{
			var len = str.length;
			for (var i = 0; i < len; i++)
			{
				if (str.charCodeAt(i) > 127)
				{
					return true;
				}
			}

			return false;
		}

		function initWifiCfg()
		{
			var nameVal2G = wzdWirelessName2G.value;
			var pswVal2G  = wzdWirelessPwd2G.value;

			var nameVal5G = wzdWirelessName5G.value;
			var pswVal5G  = wzdWirelessPwd5G.value;

			var DISABLE = uciWireless.optValue.bsEnable.disable;

			if (usePwd2G.checked)
			{
				pswVal5G = pswVal2G;
			}

			/* 全局变量：标志无线配置是否更改 */
			gIsWifiCfg2GChged = ((nameVal2G != oriWifiCfg[optSsid]) || (pswVal2G != oriWifiCfg[optKey]));
			gIsWifiCfg5GChged = ((nameVal5G != oriWifiCfg5G[optSsid]) || (pswVal5G != oriWifiCfg5G[optKey]));
			gIsWifiCfgChged = (gIsWifiCfg2GChged || gIsWifiCfg5GChged);

			if (!gSysModeSupport || uciSystem.optValue.sysMode.wdsMode != gSysMode) { //无线中继模式下，为了保证从802.11ax页面返回时ssid不为空，不能清空gWifiCfgToSave
				/* 全局变量：临时保存无线配置 */
				gWifiCfgToSave = {};
				gWifiCfgToSave[uciFile] = {};
			}

			if (gSupportBS && oriWifiCfgBs[optBsEnable] != DISABLE)
			{
				gIsWifiCfgChged = true;
				if (!gSysModeSupport || uciSystem.optValue.sysMode.wdsMode != gSysMode) { //无线中继模式下，为了保证从802.11ax页面返回时ssid不为空，不能清空gWifiCfgToSave
					gWifiCfgToSave[uciFile][uciSecWifiBs] = {};
				}
				gWifiCfgToSave[uciFile][uciSecWifiBs][optBsEnable] = DISABLE;
			}

			if (g11AxSupport["wlan2g"] || g11AxSupport["wlan5g"] || gIsWifiCfgChged)
			{
				if (g11AxSupport["wlan2g"] || gIsWifiCfg2GChged)
				{
					gWifiCfgToSave[uciFile][uciSecWifi2G] = {};
					gWifiCfgToSave[uciFile][uciSecWifi2G][optSsid] = nameVal2G;

					if (pswVal2G.length > 0)
					{
						gWifiCfgToSave[uciFile][uciSecWifi2G][optEncrypt] = uciWireless.dynOptValue.encryption.on;
						gWifiCfgToSave[uciFile][uciSecWifi2G][optKey] = pswVal2G;
					}
					else
					{
						gWifiCfgToSave[uciFile][uciSecWifi2G][optEncrypt] = uciWireless.dynOptValue.encryption.off;
					}
				}

				if (g11AxSupport["wlan5g"] || gIsWifiCfg5GChged)
				{
					gWifiCfgToSave[uciFile][uciSecWifi5G] = {};
					gWifiCfgToSave[uciFile][uciSecWifi5G][optSsid] = nameVal5G;

					if (pswVal5G.length > 0)
					{
						gWifiCfgToSave[uciFile][uciSecWifi5G][optEncrypt] = uciWireless.dynOptValue.encryption.on;
						gWifiCfgToSave[uciFile][uciSecWifi5G][optKey] = pswVal5G;
					}
					else
					{
						gWifiCfgToSave[uciFile][uciSecWifi5G][optEncrypt] = uciWireless.dynOptValue.encryption.off;
					}
				}
			}
		}

		function confirmStepEnd()
		{
			/* 初始化需要保存的无线配置信息 */
			initWifiCfg();

			if (g11AxSupport["wlan2g"] || g11AxSupport["wlan5g"])
			{
				loadPage("WizardWirelessAx.htm", "wizardCon");
			}
			else
			{
				loadPage("WizardEnd2Band.htm", "wizardCon");
			}
		}

		function confirmStepFour()
		{
			/* 检查2.4G和5G是否SSID相同而密码不同 */
			if (wzdWirelessName2G.value == wzdWirelessName5G.value &&
				wzdWirelessPwd2G.value != wzdWirelessPwd5G.value)
			{
				showCover(showConfirmSameSSID);
				return;
			}

			confirmStepEnd();
		}

		function confirmStepThree()
		{
			/* 检查5G无线密码是否为空 */
			if (0 == wzdWirelessPwd5G.value.length &&
				false == clkNotEyt)
			{
				showCover(wzdWirelessPwdConfirm5G);
				return;
			}

			confirmStepFour();
		}

		function confirmStepTwo()
		{
			/* 检查5G无线名称是否含有非英文字符 */
			if (checkStrHasCN(wzdWirelessName5G.value) &&
				false == clkIgnoreSsid)
			{
				showCover(wzdWirelessSsidConfirm5G);
				return;
			}

			confirmStepThree();
		}

		function confirmStepOne()
		{
			/* 检查2.4G无线密码是否为空 */
			if (0 == wzdWirelessPwd2G.value.length)
			{
				showCover(wzdWirelessPwdConfirm);
				return;
			}

			confirmStepTwo();
		}

		function onSave()
		{
			var nameVal2G = wzdWirelessName2G.value;
			var pswVal2G  = replaceUnicodeBlank(wzdWirelessPwd2G);

			var nameVal5G = wzdWirelessName5G.value;
			var pswVal5G  = replaceUnicodeBlank(wzdWirelessPwd5G);

			/* 检查2.4G无线名称 */
			if (0 == nameVal2G.length)
			{
				showNote("wzdAntNote2G", errStr.wlanSsidErr);
				return;
			}

			if(!checkWifiName(nameVal2G, 32, 1))
		    {
				showNote("wzdAntNote2G", errStr.wlanSsidLenErr);
				return;
		    }

			if (/^ +$/gi.test(nameVal2G) == true)
			{
				showNote("wzdAntNote2G", errStr.wlanSsidBlank);
				return;
			}

			closeNote("wzdAntNote2G");

			/* 检查2.4G无线密码 */
			var errNo = checkWlanPwd(pswVal2G);
			switch(errNo)
			{
			case EINVWLANPWD:
				showNote("wzdPwdNote2G", errStr.wlanWzdPwdValid);
				return;
			case EINVPSKLEN:
				showNote("wzdPwdNote2G", errStr.wlanWzdPwdLenValid);
				return;
			case EWLANPWDBLANK:
			default:
				break;
			}

			/* 检测5G无线名称 */
			if (0 == nameVal5G.length)
			{
				showNote("wzdAntNote5G", errStr.wlanSsidErr);
				return;
			}

			if(!checkWifiName(nameVal5G, 32, 1))
		    {
				showNote("wzdAntNote5G", errStr.wlanSsidLenErr);
				return;
		    }

			if (/^ +$/gi.test(nameVal5G) == true)
			{
				showNote("wzdAntNote5G", errStr.wlanSsidBlank);
				return;
			}

			closeNote("wzdAntNote5G");

			/* 检查5G无线密码 */
			var errNo = checkWlanPwd(pswVal5G);
			switch(errNo)
			{
			case EINVWLANPWD:
				showNote("wzdPwdNote5G", errStr.wlanWzdPwdValid);
				return;
			case EINVPSKLEN:
				showNote("wzdPwdNote5G", errStr.wlanWzdPwdLenValid);
				return;
			case EWLANPWDBLANK:
			default:
				break;
			}

			/* 检查2.4G无线名称是否含有非英文字符 */
			if (checkStrHasCN(nameVal2G))
			{
				showCover(wzdWirelessSsidConfirm);
				return;
			}

			confirmStepOne();
		}

		function getCfgCbk(ALL_DATA)
		{
			oriWifiCfg = ALL_DATA[uciFile][uciSecWifi2G];
			oriWifiCfg5G = ALL_DATA[uciFile][uciSecWifi5G];
			oriWifiCfgBs = ALL_DATA[uciFile][uciSecWifiBs] || {};

			if (typeof(gIsWifiCfg2GChged) != "undefined" && gIsWifiCfg2GChged == true)
			{
				var wifiCfg = gWifiCfgToSave[uciFile][uciSecWifi2G];

				wzdWirelessName2G.value = wifiCfg[optSsid];

				if (wifiCfg[optKey])
				{
					wzdWirelessPwd2G.value = wifiCfg[optKey];
				}
			}
			else
			{
				wzdWirelessName2G.value = oriWifiCfg[optSsid];
				wzdWirelessPwd2G.value = oriWifiCfg[optKey];
			}

			if (typeof(gIsWifiCfg5GChged) != "undefined" && gIsWifiCfg5GChged == true)
			{
				var wifiCfg = gWifiCfgToSave[uciFile][uciSecWifi5G];

				wzdWirelessName5G.value = wifiCfg[optSsid];

				if (wifiCfg[optKey])
				{
					wzdWirelessPwd5G.value = wifiCfg[optKey];
				}
			}
			else
			{
				wzdWirelessName5G.value = oriWifiCfg5G[optSsid];
				wzdWirelessPwd5G.value = oriWifiCfg5G[optKey];
			}

			/* 密码不相同，不勾选相关的复选框 */
			if (wzdWirelessPwd2G.value != wzdWirelessPwd5G.value)
			{
				usePwd2G.checked = false;
				wzdWirelessPwd5G.disabled = false;
			}

			/* 初始化当前登录的是否是无线设备 */
			var hostsInfo = formatTableData(ALL_DATA[uciHostsInfo.fileName][uciHostsInfo.dynData.host_info]);
			for (var i = 0; i < hostsInfo.length; i++)
			{
				var hostObj = hostsInfo[i];
				if (1 == parseInt(hostObj["is_cur_host"]))
				{
					gIsWifiDevice = (0 != parseInt(hostObj["type"]));
				}
			}
		}

		function showDefaultCfg()
		{
			var data = {};
			data[uciFile] = {};
			data[uciFile][KEY_NAME] = [uciSecWifi2G, uciSecWifi5G];

			if (gSupportBS)
			{
				data[uciFile][KEY_NAME].push(uciSecWifiBs);
			}

			data[uciHostsInfo.fileName] = {};
			data[uciHostsInfo.fileName][KEY_TABLE] = [uciHostsInfo.dynData.host_info];

			$.query(data, getCfgCbk);
		}

		function onUsePwd2G()
		{
			var dis = this.checked;
			wzdWirelessPwd5G.disabled = dis;

			checkWlanPwdInput5G();
		}

		/* 设置导航栏颜色 */
		wzdNavSet(2);
		wzdConSet({"height":"680px"});
		wzdWirelessName2G.focus();
		id("pre").onclick = function(){
			if (gSysModeSupport && uciSystem.optValue.sysMode.apMode == gSysMode) {
				wzdNetWorkModeChange(LINK_TYPE_WIRED_REPEATER);
			} else if (gSysModeSupport && uciSystem.optValue.sysMode.wdsMode == gSysMode) {
				loadPage('WizardWirelessRepeater.htm', "wizardCon");
			} else {
				wzdNetWorkModeChange(gNetworkCfg[uciProto.optName.type]);
			}
		};

		if (gSysModeSupport && uciSystem.optValue.sysMode.wdsMode == gSysMode) {
			$("#wzdConTitleDes").text("请设置本路由器的无线名称和密码（推荐与前端路由保持一致，实现无缝漫游）");
		}

		var subObj = id("sub");
		subObj.onclick = onSave;
		if (g11AxSupport["wlan2g"] || g11AxSupport["wlan5g"]) {
			subObj.value = btn.nextStep;
		} else {
			subObj.value = btn.ok;
		}

		wzdWirelessName2G.onblur = checkSsidInput;
		wzdWirelessName2G.onkeyup = checkSsidInput;
		wzdWirelessPwd2G.onblur = checkWlanPwdInput2G;
		wzdWirelessPwd2G.onkeyup = checkWlanPwdDep;

		wzdWirelessName5G.onblur = checkSsidInput;
		wzdWirelessName5G.onkeyup = checkSsidInput;
		wzdWirelessPwd5G.onblur = checkWlanPwdInput5G;
		wzdWirelessPwd5G.onkeyup = checkWlanPwdDep;

		usePwd2G.onclick = onUsePwd2G;

		usePwd2G.click();

		showDefaultCfg();

		if(gSupportBS)
		{
			wzdConSet({"height":"790px"});
			id("wifiUniteOn").checked  = false;
			id("wifiUniteOff").checked = true;

			$('input[name="wifiUnite"]').on("click", function(){
				changeBSPage(this.id == "wifiUniteOn" ? gBSHandler.ON : gBSHandler.OFF);
			})

			$(".wifiUnite").removeClass("disNone");
		}
	}
	init();
</script>
<style type="text/css">
	li.wzdSubLi input{
		width:152px;
	}
	li.wzdSubLi input.btnL {
		margin-right: 24px !important;
		background-color: #FFFFFF;
	}
	li.usePwd2GLi{
		list-style:none;
		margin:5px auto 5px 347px;
	}
	input.pwdSame{
		height:12px !important;
		margin:0;
		vertical-align:middle !important;
		width:12px !important;
	}
	label.pwdSameLbl{
		color:#FFFFFF !important;
		display:inline !important;
		font-size:12px;
		margin-left:5px !important;
	}
	p.wzdSubTitle{
		color:#FFFFFF;
		font-size:18px;
		font-weight:bold;
		margin:35px auto 25px 275px;
	}
	ul.wzdConTileUlW{
		margin-bottom:40px;
	}
	ul.inputUlF{
		overflow:hidden;
	}
	label.desLblWU{
		font-size:16px;
		font-weight:bold;
		margin-right:15px;
		float:left;
	}
	p.wzdWUTip{
		font-size:12px;
		width:373px;
		margin-top:4px;
	}
	div.wifiUnite{
		width:400px;
		margin-left:275px;
		padding-bottom:30px;
		color:#fff;
		border-bottom:1px #0d6a90 solid;
	}
	p.titleWU{
		margin-top: 30px;
		margin-bottom:24px;
	}
	div.confirmCon{
		top:400px;
	}
	div.confirmBody{
		padding:50px;
		color:#3c3e43;
		background:#fff;
		text-align:left;
		margin:0px auto;
		width:350px;
	}
	p.confirmTitle{
		color:#3C3E43;
		font-size:14px;
		font-weight:bold;
		line-height:20px;
	}
	p.confirmText{
		color:#3C3E43;
		font-size:12px;
		margin-top:21px;
		line-height:20px;
	}
	div.confirmFuncCon{
		margin:30px 0 0;
		text-align:center;
	}
	div.confirmFuncCon input.subBtnL{
		margin-right:20px;
	}
</style>
<ul class="wzdConTitleUl wzdConTileUlW">
	<p class="wzdConTitle">{%label.wifiSet%}</p>
	<p id="wzdConTitleDes" class="wzdConTitleDes">{%label.wifiSetTip%}</p>
</ul>
<div class="wifiUnite disNone">
	<ul class="gridLine gridLineA">
		<label class="desLblWU">{%label.wifiUnite%}</label>
		<input id="wifiUniteOn" name="wifiUnite" class="switchRadio" type="radio" /><label class="noteLbl" for="wifiUniteOn">{%label.openStr%}</label>
		<input id="wifiUniteOff" name="wifiUnite" class="switchRadio switchRadioR" type="radio" /><label class="noteLbl" for="wifiUniteOff">{%label.closeStr%}</label>
	</ul>
	<p class="wzdWUTip">{%label.bsHelp%}</p>
</div>
<p class="wzdSubTitle titleWU">{%label.wifiSet2G%}</p>
<ul class="inputUl">
	<li class="inputLi">
		<label for="wzdWirelessName2G">{%label.wirelessName%}</label>
		<input id="wzdWirelessName2G" type="text" maxLength="32" />
	</li>
	<li id="wzdAntNote2G" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%errStr.wlanSsidErr%}</p>
		</div>
	</li>
</ul>
<ul class="inputUl inputUlF">
	<li class="inputLi">
		<label for="wzdWirelessPwd2G">{%label.wirelessPwd%}</label>
		<input id="wzdWirelessPwd2G" type="text" class="imeModeN" maxLength="63" />
	</li>
	<li id="wzdPwdNote2G" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%label.netPwdTip%}</p>
		</div>
	</li>
	<li id="pwdDepNote2G" class="note">
		<i id="pwdDepI" class="warn"></i>
		<div class="noteCon">
			<p class="pwdDepC twoLine">{%label.chgPwdDep%}{%label.colon%}<label id="pwdDep2G">{%label.weak%}</label></p>
			<div class="pwdDepL"><label id="chgPwdDep2G"></label></div>
		</div>
	</li>
</ul>
<p class="wzdDesP">{%label.wifiPwdTip%}</p>
<p class="wzdSubTitle">{%label.wifiSet5G%}</p>
<ul class="inputUl">
	<li class="inputLi">
		<label for="wzdWirelessName5G">{%label.wirelessName%}</label>
		<input id="wzdWirelessName5G" type="text" maxLength="32" />
	</li>
	<li id="wzdAntNote5G" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%errStr.wlanSsidErr%}</p>
		</div>
	</li>
</ul>
<ul class="inputUl inputUlF">
	<li class="inputLi">
		<label for="wzdWirelessPwd5G">{%label.wirelessPwd%}</label>
		<input id="wzdWirelessPwd5G" class="imeModeN" maxLength="63" />
	</li>
	<li id="wzdPwdNote5G" class="note">
		<i class="error"></i>
		<div class="noteCon">
			<p>{%label.netPwdTip%}</p>
		</div>
	</li>
	<li id="pwdDepNote5G" class="note">
		<i id="pwdDepI5G" class="warn"></i>
		<div class="noteCon">
			<p class="pwdDepC twoLine">{%label.chgPwdDep%}{%label.colon%}<label id="pwdDep5G">{%label.weak%}</label></p>
			<div class="pwdDepL"><label id="chgPwdDep5G"></label></div>
		</div>
	</li>
</ul>
<ul>
	<li class="usePwd2GLi">
		<input id="samePwd" class="pwdSame" type="checkbox" />
		<label class="pwdSameLbl" for="samePwd">{%label.wlanWzdUse2gPwdFor5g%}</label>
	</li>
</ul>
<p class="wzdDesP">{%label.wifiPwdTip%}</p>
<ul>
	<li class="wzdSubLi">
		<input id="pre" type="button" class="btnL" value="{%btn.preStep%}" />
		<input id="sub" type="button" value="{%btn.ok%}" />
	</li>
</ul>
